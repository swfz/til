{
  "results": [
    {
      "hits": [
        {
          "url": "https://til.swfz.io//entries/bigquery_sa_permission_from_cli/",
          "text": "\n特定のデータセット、特定サービスアカウントにREADやWRITE権限を与える\n\n`bq show`で対象データセットの設定を出力、中身の`access`に対象サービスアカウントのメールアドレスをと権限を追加して`bq update`\n\n```shell\nbq show --format=prettyjson memo-111111:sample  > sample.json\n```\n\n- sample.json\n\n```json\n\"access\": [\n  ...\n  ...\n  ...\n    {\n      \"role\": \"READER\",\n      \"userByEmail\": \"github-actions-sample-nokey@memo-111111.iam.gserviceaccount.com\"\n    }\n]\n```\n\n```shell\nbq update --source sample.json sample\n```\n\n## 確認\n\n対象サービスアカウントで実行した\n\n- bq ls\n\n```txt\n  datasetId  \n ----------- \n  sample     \n```\n\n- クエリ\n\n```shell\nbq query --nouse_legacy_sql 'select * from sample.summary'\n```\n\n```\n+------+-------+----+\n| view | title | id |\n+------+-------+----+\n|    3 | fuga  |  2 |\n|    3 | foo   |  4 |\n|    4 | piyo  |  3 |\n|    5 | hoge  |  1 |\n|    5 | bar   |  5 |\n+------+-------+----+\n```\n\nできた\n\n最近GitHubActionsのOIDC認証でCI用のサービスアカウントに対してクエリできるようにする + データセット単位で権限を絞るところまで行ったのでメモ\n\n個人使用ならこれで問題ないかなーという感じ",
          "date": "2022-10-12",
          "title": "BigQueryで特定データセットに権限を付与する",
          "tags": ["BigQuery", "GoogleCloudPlatform"],
          "description": "bq show + bq update",
          "slug": "/entries/bigquery_sa_permission_from_cli/",
          "timeToRead": 1,
          "objectID": "dafae263-fb55-5d08-bf9f-17c62c276690",
          "_snippetResult": {
            "text": {
              "value": "shell\n__ais-highlight__b__/ais-highlight__q update --source sample.json sample\n```\n\n## 確認\n\n対象サービスアカウントで実行した\n\n- __ais-highlight__b__/ais-highlight__q ls\n\n```txt\n  datasetId  \n ----------- \n  sample     \n```\n\n- クエリ\n\n```shell\n__ais-highlight__b__/ais-highlight__q query --nouse_legacy_sql 'select * from sample.summary'\n```\n\n```\n+------+-------+----+\n| view | title | id |\n+------+-------+----+\n|    3 | fuga  |  2 |\n|    3",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__b__/ais-highlight__igquery_sa_permission_from_cli/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\n特定のデータセット、特定サービスアカウントにREADやWRITE権限を与える\n\n`__ais-highlight__b__/ais-highlight__q show`で対象データセットの設定を出力、中身の`access`に対象サービスアカウントのメールアドレスをと権限を追加して`__ais-highlight__b__/ais-highlight__q update`\n\n```shell\n__ais-highlight__b__/ais-highlight__q show --format=prettyjson memo-111111:sample  > sample.json\n```\n\n- sample.json\n\n```json\n\"access\": [\n  ...\n  ...\n  ...\n    {\n      \"role\": \"READER\",\n      \"userByEmail\": \"github-actions-sample-nokey@memo-111111.iam.gserviceaccount.com\"\n    }\n]\n```\n\n```shell\n__ais-highlight__b__/ais-highlight__q update --source sample.json sample\n```\n\n## 確認\n\n対象サービスアカウントで実行した\n\n- __ais-highlight__b__/ais-highlight__q ls\n\n```txt\n  datasetId  \n ----------- \n  sample     \n```\n\n- クエリ\n\n```shell\n__ais-highlight__b__/ais-highlight__q query --nouse_legacy_sql 'select * from sample.summary'\n```\n\n```\n+------+-------+----+\n| view | title | id |\n+------+-------+----+\n|    3 | fuga  |  2 |\n|    3 | foo   |  4 |\n|    4 | piyo  |  3 |\n|    5 | hoge  |  1 |\n|    5 | __ais-highlight__b__/ais-highlight__ar   |  5 |\n+------+-------+----+\n```\n\nできた\n\n最近GitHubActionsのOIDC認証でCI用のサービスアカウントに対してクエリできるようにする + データセット単位で権限を絞るところまで行ったのでメモ\n\n個人使用ならこれで問題ないかなーという感じ",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2022-10-12",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "__ais-highlight__B__/ais-highlight__igQueryで特定データセットに権限を付与する",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "tags": [
              {
                "value": "__ais-highlight__B__/ais-highlight__igQuery",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["b"]
              },
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "__ais-highlight__b__/ais-highlight__q show + __ais-highlight__b__/ais-highlight__q update",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "slug": {
              "value": "/entries/__ais-highlight__b__/ais-highlight__igquery_sa_permission_from_cli/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/basic_auth_in_node_fetch/",
          "text": "\n## auth用の文字列の生成\n\n今どきは`new Buffer`ではないらしい\n\n次のようなWarningが出力される\n\n```\n(node:22161) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.\n(Use `node --trace-deprecation ...` to show where the warning was created)\n```\n\nということで下記のように認証用の文字列を生成する\n\n```javascript\nconst buffer = Buffer.from(`username:token`);\nconst authString = buffer.toString('base64');\n```\n\n## リクエスト\n\n```javascript\nconst request = async () => {\n  const res = await fetch(`https://example.com`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': `Basic ${authString}`\n    }\n  });\n\n  return await res.json();\n}\n\n(async () => {\n  const json = request();\n  console.log(json);\n})();\n```\n\nheadersの`Authorization`にユーザー名とTOKENやパスワードを`:`でつなげbase64した文字列を入れる\n\nそれだけ",
          "date": "2021-06-22",
          "title": "node-fetchでBasicAuthする",
          "tags": ["Node", "BasicAuth", "node-fetch"],
          "description": "base64してHeaderに設定",
          "slug": "/entries/basic_auth_in_node_fetch/",
          "timeToRead": 1,
          "objectID": "bb031fa1-6d38-58ed-b5ce-bd3d972ac6ec",
          "_snippetResult": {
            "text": {
              "value": "new __ais-highlight__B__/ais-highlight__uffer`ではないらしい\n\n次のようなWarningが出力される\n\n```\n(node:22161) [DEP0005] DeprecationWarning: __ais-highlight__B__/ais-highlight__uffer() is deprecated due to security and usability issues. Please use the __ais-highlight__B__/ais-highlight__uffer.alloc(), __ais-highlight__B__/ais-highlight__uffer.allocUnsafe(), or __ais-highlight__B__/ais-highlight__uffer.from() methods instead.\n(Use `node --trace-deprecation",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__b__/ais-highlight__asic_auth_in_node_fetch/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\n## auth用の文字列の生成\n\n今どきは`new __ais-highlight__B__/ais-highlight__uffer`ではないらしい\n\n次のようなWarningが出力される\n\n```\n(node:22161) [DEP0005] DeprecationWarning: __ais-highlight__B__/ais-highlight__uffer() is deprecated due to security and usability issues. Please use the __ais-highlight__B__/ais-highlight__uffer.alloc(), __ais-highlight__B__/ais-highlight__uffer.allocUnsafe(), or __ais-highlight__B__/ais-highlight__uffer.from() methods instead.\n(Use `node --trace-deprecation ...` to show where the warning was created)\n```\n\nということで下記のように認証用の文字列を生成する\n\n```javascript\nconst __ais-highlight__b__/ais-highlight__uffer = __ais-highlight__B__/ais-highlight__uffer.from(`username:token`);\nconst authString = __ais-highlight__b__/ais-highlight__uffer.toString('__ais-highlight__b__/ais-highlight__ase64');\n```\n\n## リクエスト\n\n```javascript\nconst request = async () => {\n  const res = await fetch(`https://example.com`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': `__ais-highlight__B__/ais-highlight__asic ${authString}`\n    }\n  });\n\n  return await res.json();\n}\n\n(async () => {\n  const json = request();\n  console.log(json);\n})();\n```\n\nheadersの`Authorization`にユーザー名とTOKENやパスワードを`:`でつなげ__ais-highlight__b__/ais-highlight__ase64した文字列を入れる\n\nそれだけ",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2021-06-22",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "node-fetchで__ais-highlight__B__/ais-highlight__asicAuthする",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "tags": [
              { "value": "Node", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "__ais-highlight__B__/ais-highlight__asicAuth",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["b"]
              },
              {
                "value": "node-fetch",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "__ais-highlight__b__/ais-highlight__ase64してHeaderに設定",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "slug": {
              "value": "/entries/__ais-highlight__b__/ais-highlight__asic_auth_in_node_fetch/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/bq_load_with_hive_partition/",
          "text": "\nLakeにデータを置いた日付をBQ上でカラムとして扱いたかったのでHiveパーティショニングモードでbq loadした時のメモ\n\n`${BUCKET_NAME}`, `${GOOGLE_PROJECT}`は適宜読み替える\n\n最初に環境変数へ入れておいたりしておくとよいかも\n\n```shell\nexport BUCKET_NAME=hoge\nexport GOOGLE_PROJECT=sample-project\n```\n\n- GCS側のディレクトリ構造\n\n```shell\n$ gsutil ls gs://${BUCKET_NAME}/items/\ngs://${BUCKET_NAME}/items/dt=2022-02-15/\ngs://${BUCKET_NAME}/items/dt=2022-02-25/\ngs://${BUCKET_NAME}/items/dt=2022-02-26/\ngs://${BUCKET_NAME}/items/dt=2022-02-27/\ngs://${BUCKET_NAME}/items/dt=2022-03-04/\ngs://${BUCKET_NAME}/items/dt=2022-04-01/\n```\n\n`xx=yy`という形式でオブジェクトを配置することでよしなにパーティショニングしてくれる\n\n各ディレクトリにはCSVが置いてある\n\n今回の例ではresponseというカラムにAPIのレスポンスがすべて入っているという感じ（JSON型を使ってみたかった）\n\n- schema.json\n\n```json\n[\n  {\n    \"mode\": \"NULLABLE\",\n    \"name\": \"response\",\n    \"type\": \"JSON\"\n  }\n]\n```\n\n- load\n\n```shell\nbq load --replace --source_format=CSV \\\n  --hive_partitioning_mode=AUTO \\\n  --hive_partitioning_source_uri_prefix=gs://${BUCKET_NAME}/items/ \\\n  ${GOOGLE_PROJECT}:sample_datalake.test_raw_items \"gs://${BUCKET_NAME}/items/*.csv\" ./schema.json\n```\n\n\n- 結果\n\n```shell\n$ bq show --format=prettyjson sample_datalake.test_raw_items\n{\n  \"creationTime\": \"1661458822114\",\n  \"etag\": \"hODI6PUMYlQYOpdjjEYedQ==\",\n  \"id\": \"sample-project:sample_datalake.test_raw_items\",\n  \"kind\": \"bigquery#table\",\n  \"lastModifiedTime\": \"1661458822114\",\n  \"location\": \"asia-northeast1\",\n  \"numActiveLogicalBytes\": \"27655304\",\n  \"numBytes\": \"27655304\",\n  \"numLongTermBytes\": \"0\",\n  \"numLongTermLogicalBytes\": \"0\",\n  \"numRows\": \"471\",\n  \"numTotalLogicalBytes\": \"27655304\",\n  \"schema\": {\n    \"fields\": [\n      {\n        \"mode\": \"NULLABLE\",\n        \"name\": \"response\",\n        \"type\": \"JSON\"\n      },\n      {\n        \"mode\": \"NULLABLE\",\n        \"name\": \"dt\",\n        \"type\": \"DATE\"\n      }\n    ]\n  },\n  \"selfLink\": \"https://bigquery.googleapis.com/bigquery/v2/projects/sample-project/datasets/sample_datalake/tables/test_raw_items\",\n  \"tableReference\": {\n    \"datasetId\": \"sample_datalake\",\n    \"projectId\": \"sample-project\",\n    \"tableId\": \"test_raw_items\"\n  },\n  \"type\": \"TABLE\"\n}\n```\n\nこれでOK\n\n`dt`を日付としてクエリできるようになった\n\n### 参考\n\n[外部パーティション分割データの読み込み  |  BigQuery  |  Google Cloud](https://cloud.google.com/bigquery/docs/hive-partitioned-loads-gcs?hl=ja#bq)\n",
          "date": "2022-08-31",
          "title": "Hiveパーティショニングモードでbq load",
          "tags": ["BigQuery", "Hive", "GoogleCloudPlatform"],
          "description": "メモ",
          "slug": "/entries/bq_load_with_hive_partition/",
          "timeToRead": 2,
          "objectID": "9e5019bb-8515-53fd-8b93-60b420100d66",
          "_snippetResult": {
            "text": {
              "value": "gs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/\ngs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/dt=2022-02-15/\ngs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/dt=2022-02-25/\ngs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/dt=2022-02-26/\ngs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/dt=2022-02-27/\ngs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/dt=2022-03-04",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__b__/ais-highlight__q_load_with_hive_partition/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\nLakeにデータを置いた日付を__ais-highlight__B__/ais-highlight__Q上でカラムとして扱いたかったのでHiveパーティショニングモードで__ais-highlight__b__/ais-highlight__q loadした時のメモ\n\n`${__ais-highlight__B__/ais-highlight__UCKET_NAME}`, `${GOOGLE_PROJECT}`は適宜読み替える\n\n最初に環境変数へ入れておいたりしておくとよいかも\n\n```shell\nexport __ais-highlight__B__/ais-highlight__UCKET_NAME=hoge\nexport GOOGLE_PROJECT=sample-project\n```\n\n- GCS側のディレクトリ構造\n\n```shell\n$ gsutil ls gs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/\ngs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/dt=2022-02-15/\ngs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/dt=2022-02-25/\ngs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/dt=2022-02-26/\ngs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/dt=2022-02-27/\ngs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/dt=2022-03-04/\ngs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/dt=2022-04-01/\n```\n\n`xx=yy`という形式でオブジェクトを配置することでよしなにパーティショニングしてくれる\n\n各ディレクトリにはCSVが置いてある\n\n今回の例ではresponseというカラムにAPIのレスポンスがすべて入っているという感じ（JSON型を使ってみたかった）\n\n- schema.json\n\n```json\n[\n  {\n    \"mode\": \"NULLABLE\",\n    \"name\": \"response\",\n    \"type\": \"JSON\"\n  }\n]\n```\n\n- load\n\n```shell\n__ais-highlight__b__/ais-highlight__q load --replace --source_format=CSV \\\n  --hive_partitioning_mode=AUTO \\\n  --hive_partitioning_source_uri_prefix=gs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/ \\\n  ${GOOGLE_PROJECT}:sample_datalake.test_raw_items \"gs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/*.csv\" ./schema.json\n```\n\n\n- 結果\n\n```shell\n$ __ais-highlight__b__/ais-highlight__q show --format=prettyjson sample_datalake.test_raw_items\n{\n  \"creationTime\": \"1661458822114\",\n  \"etag\": \"hODI6PUMYlQYOpdjjEYedQ==\",\n  \"id\": \"sample-project:sample_datalake.test_raw_items\",\n  \"kind\": \"__ais-highlight__b__/ais-highlight__igquery#table\",\n  \"lastModifiedTime\": \"1661458822114\",\n  \"location\": \"asia-northeast1\",\n  \"numActiveLogicalBytes\": \"27655304\",\n  \"numBytes\": \"27655304\",\n  \"numLongTermBytes\": \"0\",\n  \"numLongTermLogicalBytes\": \"0\",\n  \"numRows\": \"471\",\n  \"numTotalLogicalBytes\": \"27655304\",\n  \"schema\": {\n    \"fields\": [\n      {\n        \"mode\": \"NULLABLE\",\n        \"name\": \"response\",\n        \"type\": \"JSON\"\n      },\n      {\n        \"mode\": \"NULLABLE\",\n        \"name\": \"dt\",\n        \"type\": \"DATE\"\n      }\n    ]\n  },\n  \"selfLink\": \"https://__ais-highlight__b__/ais-highlight__igquery.googleapis.com/__ais-highlight__b__/ais-highlight__igquery/v2/projects/sample-project/datasets/sample_datalake/tables/test_raw_items\",\n  \"tableReference\": {\n    \"datasetId\": \"sample_datalake\",\n    \"projectId\": \"sample-project\",\n    \"tableId\": \"test_raw_items\"\n  },\n  \"type\": \"TABLE\"\n}\n```\n\nこれでOK\n\n`dt`を日付としてクエリできるようになった\n\n### 参考\n\n[外部パーティション分割データの読み込み  |  __ais-highlight__B__/ais-highlight__igQuery  |  Google Cloud](https://cloud.google.com/__ais-highlight__b__/ais-highlight__igquery/docs/hive-partitioned-loads-gcs?hl=ja#__ais-highlight__b__/ais-highlight__q)\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2022-08-31",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Hiveパーティショニングモードで__ais-highlight__b__/ais-highlight__q load",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "tags": [
              {
                "value": "__ais-highlight__B__/ais-highlight__igQuery",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["b"]
              },
              { "value": "Hive", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "メモ",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/__ais-highlight__b__/ais-highlight__q_load_with_hive_partition/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "2",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/bigquery_empty_string_array/",
          "text": "\n[配列関数  |  BigQuery  |  Google Cloud](https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions?hl=ja)\n\nGENERATE_ARRAYで作るとINT64の空配列になってしまう\n\n```sql\nSELECT GENERATE_ARRAY(1,0,1) AS tags\n```\n\nUNIONなどで文字列の配列と結合させようとすると型が合わなくなってしまう\n\n## 例\n\n```sql\nSELECT ['a','b'] AS tags\nUNION ALL\nSELECT GENERATE_ARRAY(1,0,1) AS tags\n```\n\n- 結果\n\n```\n Column 1 in UNION ALL has incompatible types: ARRAY<STRING>, ARRAY<INT64> at [3:1] \n```\n\n[Create empty string array BigQuery - Stack Overflow](https://stackoverflow.com/questions/58504188/create-empty-string-array-bigquery)\n\nこまったときのstackoverflow、答えが書いてありました\n\n```sql\nSELECT ARRAY<STRING>[] AS tags\n```\n\nでSTRINGの空配列を生成できる\n\n解決！\n",
          "date": "2022-07-22",
          "title": "BigQueryでStringの空配列を生成する",
          "tags": ["BigQuery", "GoogleCloudPlatform"],
          "description": "ARRAY",
          "slug": "/entries/bigquery_empty_string_array/",
          "timeToRead": 1,
          "objectID": "94f95f4a-5e85-5917-a74f-84500c7a5783",
          "_snippetResult": {
            "text": {
              "value": "\n[配列関数  |  __ais-highlight__B__/ais-highlight__igQuery  |  Google Cloud](https://cloud.google.com/__ais-highlight__b__/ais-highlight__igquery/docs/reference/standard-sql/array_functions?hl=ja)\n\nGENERATE_ARRAYで作るとINT64の空配列になってしまう\n\n```sql\nSELECT GENERATE_ARRAY(1,0,1) AS tags\n```\n\nUNIONな",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__b__/ais-highlight__igquery_empty_string_array/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\n[配列関数  |  __ais-highlight__B__/ais-highlight__igQuery  |  Google Cloud](https://cloud.google.com/__ais-highlight__b__/ais-highlight__igquery/docs/reference/standard-sql/array_functions?hl=ja)\n\nGENERATE_ARRAYで作るとINT64の空配列になってしまう\n\n```sql\nSELECT GENERATE_ARRAY(1,0,1) AS tags\n```\n\nUNIONなどで文字列の配列と結合させようとすると型が合わなくなってしまう\n\n## 例\n\n```sql\nSELECT ['a','__ais-highlight__b__/ais-highlight__'] AS tags\nUNION ALL\nSELECT GENERATE_ARRAY(1,0,1) AS tags\n```\n\n- 結果\n\n```\n Column 1 in UNION ALL has incompatible types: ARRAY<STRING>, ARRAY<INT64> at [3:1] \n```\n\n[Create empty string array __ais-highlight__B__/ais-highlight__igQuery - Stack Overflow](https://stackoverflow.com/questions/58504188/create-empty-string-array-__ais-highlight__b__/ais-highlight__igquery)\n\nこまったときのstackoverflow、答えが書いてありました\n\n```sql\nSELECT ARRAY<STRING>[] AS tags\n```\n\nでSTRINGの空配列を生成できる\n\n解決！\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2022-07-22",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "__ais-highlight__B__/ais-highlight__igQueryでStringの空配列を生成する",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "tags": [
              {
                "value": "__ais-highlight__B__/ais-highlight__igQuery",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["b"]
              },
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "ARRAY",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/__ais-highlight__b__/ais-highlight__igquery_empty_string_array/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/bigquery_cant_use_autodetect/",
          "text": "\nPocketのデータをAPIで取得してBigQueryに突っ込もうとしたときの話\n\nGCSにJSONを置いてCLIから`bq load --autodetect`でデータをloadしようとしたらエラーで怒られた\n\n```\nBigQuery error in load operation: Error processing job\n'project-111111:bqjob_r70118be7bda78ce4_000001793f9c2946_1': Error while reading\ndata, error message: JSON table encountered too many errors, giving up. Rows: 1;\nerrors: 1. Please look into the errors[] collection for more details.\nFailure details:\n- Error while reading data, error message: JSON processing\nencountered too many errors, giving up. Rows: 1; errors: 1; max\nbad: 0; error percent: 0\n- gs://sample-bucket/preprocessed_rawdata/month=2021-05-01/raw-04.json: Error\nwhile reading data, error message: JSON parsing error in row\nstarting at position 0: JSON object specified for non-record field:\nlist.videos\n```\n\n## 前提\n\n現状あるデータは次の3つ（bucket名はサンプル）\n\n```\ngs://sample-bucket/preprocessed_rawdata/month=2021-05-01/raw-03.json\ngs://sample-bucket/preprocessed_rawdata/month=2021-05-01/raw-04.json\ngs://sample-bucket/preprocessed_rawdata/month=2021-05-01/raw-05.json\n```\n\n## 原因の切り分け\n\n- raw-03.json\n- raw-04.json\n\nのときは問題なくloadできている\n\n`raw-05.json`\n\nが追加されてから上記エラーになってしまった\n\n05と03,04のJSONの中身を比べてみたところ05には`list.videos`がすべて`[]`になっていた\n\n03,04に関してはどこかのレコードでオブジェクトが入っていたので`RECORD`と判断された模様\n\nこのことから`--autodetect`は最初のファイルをautodetectで読み込んで順番にその他ファイルも読み込んでいると考えられる\n\n[スキーマの自動検出](https://cloud.google.com/bigquery/docs/schema-detect?hl=ja#auto-detect)\n\nここに説明が書いてあった\n\n> 自動検出を有効にすると、BigQuery はデータソース内でランダムにファイルを選択します。ファイルの最大 100 行をスキャンして代表的なサンプルとして使用し、推定プロセスを開始します。BigQuery は、各フィールドを検証し、そのサンプル内の値に基づいてそのフィールドにデータ型を割り当てようとします。\n\nランダムでファイルを読み込むとあるので全パターンを網羅したデータがあるファイルじゃないファイルがサンプルに選定されてしまった場合にこういうことが起きる\n\nそうなると`autodetect`は使えないのでテーブル作成→loadの手順を踏む必要がある\n\n- schemaの取り出し\n\nうまく行ったパターンで生成したテーブルのスキーマを取得する\n\n```\nbq show --schema --format=prettyjson pocket.rawdata > pocket-rawdata.json\n```\n\n- テーブル作成\n\n別のテーブルを用意して試してみる\n\n```\nbq mk --table --time_partitioning_field month --time_partitioning_type MONTH sample.pocket_rawdata pocket-rawdata.json\n```\n\n- load\n\n```\nbq load --source_format=NEWLINE_DELIMITED_JSON --replace sample.pocket_rawdata 'gs://sample-bucket/preprocessed_rawdata/*'\n```\n\n今のところこんな感じでなんとかなっている\n\n## まとめ\n\n取り込み対象のデータにばらつきがある（あるデータではRECORD、あるデータでは`[]`のようなとき）とサンプリング次第で取り込めない場合がある\n\nさらに`--autodetect`+`--replace`を用いると毎回ロード時に自動検出するので失敗する可能性がある\n\nそのためスキーマを定義してテーブルの作成+`bq load`と手順を踏む必要がある\n\n## 所感\n\n本来だったら`autodetect`で生成したスキーマからさらに精査して本当に`NULLABLE`?みたいな話も考えたほうが良いが今回は趣味プロジェクトなので…\n\nautodetectは便利だけどこういうパターンに対応できないのでやはりPOCやお試しのときくらいしか使えないよなーとあらためて感じた\n\nまぁでも気軽に試せるのはとても良いことなので使い分けが大事",
          "date": "2021-05-08",
          "title": "BigQueryのbq load時にautodetectを使えない場合",
          "tags": ["BigQuery", "GoogleCloudPlatform"],
          "description": "データにばらつきがありautodetectが使えないパターン",
          "slug": "/entries/bigquery_cant_use_autodetect/",
          "timeToRead": 3,
          "objectID": "6c49c87d-a92d-51b8-863d-7251544ccc40",
          "_snippetResult": {
            "text": {
              "value": "list.videos\n```\n\n## 前提\n\n現状あるデータは次の3つ（__ais-highlight__b__/ais-highlight__ucket名はサンプル）\n\n```\ngs://sample-__ais-highlight__b__/ais-highlight__ucket/preprocessed_rawdata/month=2021-05-01/raw-03.json\ngs://sample-__ais-highlight__b__/ais-highlight__ucket/preprocessed_rawdata/month=2021-05-01/raw-04.json\ngs://sample-__ais-highlight__b__/ais-highlight__ucket",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__b__/ais-highlight__igquery_cant_use_autodetect/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\nPocketのデータをAPIで取得して__ais-highlight__B__/ais-highlight__igQueryに突っ込もうとしたときの話\n\nGCSにJSONを置いてCLIから`__ais-highlight__b__/ais-highlight__q load --autodetect`でデータをloadしようとしたらエラーで怒られた\n\n```\n__ais-highlight__B__/ais-highlight__igQuery error in load operation: Error processing job\n'project-111111:__ais-highlight__b__/ais-highlight__qjob_r70118be7bda78ce4_000001793f9c2946_1': Error while reading\ndata, error message: JSON table encountered too many errors, giving up. Rows: 1;\nerrors: 1. Please look into the errors[] collection for more details.\nFailure details:\n- Error while reading data, error message: JSON processing\nencountered too many errors, giving up. Rows: 1; errors: 1; max\n__ais-highlight__b__/ais-highlight__ad: 0; error percent: 0\n- gs://sample-__ais-highlight__b__/ais-highlight__ucket/preprocessed_rawdata/month=2021-05-01/raw-04.json: Error\nwhile reading data, error message: JSON parsing error in row\nstarting at position 0: JSON object specified for non-record field:\nlist.videos\n```\n\n## 前提\n\n現状あるデータは次の3つ（__ais-highlight__b__/ais-highlight__ucket名はサンプル）\n\n```\ngs://sample-__ais-highlight__b__/ais-highlight__ucket/preprocessed_rawdata/month=2021-05-01/raw-03.json\ngs://sample-__ais-highlight__b__/ais-highlight__ucket/preprocessed_rawdata/month=2021-05-01/raw-04.json\ngs://sample-__ais-highlight__b__/ais-highlight__ucket/preprocessed_rawdata/month=2021-05-01/raw-05.json\n```\n\n## 原因の切り分け\n\n- raw-03.json\n- raw-04.json\n\nのときは問題なくloadできている\n\n`raw-05.json`\n\nが追加されてから上記エラーになってしまった\n\n05と03,04のJSONの中身を比べてみたところ05には`list.videos`がすべて`[]`になっていた\n\n03,04に関してはどこかのレコードでオブジェクトが入っていたので`RECORD`と判断された模様\n\nこのことから`--autodetect`は最初のファイルをautodetectで読み込んで順番にその他ファイルも読み込んでいると考えられる\n\n[スキーマの自動検出](https://cloud.google.com/__ais-highlight__b__/ais-highlight__igquery/docs/schema-detect?hl=ja#auto-detect)\n\nここに説明が書いてあった\n\n> 自動検出を有効にすると、__ais-highlight__B__/ais-highlight__igQuery はデータソース内でランダムにファイルを選択します。ファイルの最大 100 行をスキャンして代表的なサンプルとして使用し、推定プロセスを開始します。__ais-highlight__B__/ais-highlight__igQuery は、各フィールドを検証し、そのサンプル内の値に基づいてそのフィールドにデータ型を割り当てようとします。\n\nランダムでファイルを読み込むとあるので全パターンを網羅したデータがあるファイルじゃないファイルがサンプルに選定されてしまった場合にこういうことが起きる\n\nそうなると`autodetect`は使えないのでテーブル作成→loadの手順を踏む必要がある\n\n- schemaの取り出し\n\nうまく行ったパターンで生成したテーブルのスキーマを取得する\n\n```\n__ais-highlight__b__/ais-highlight__q show --schema --format=prettyjson pocket.rawdata > pocket-rawdata.json\n```\n\n- テーブル作成\n\n別のテーブルを用意して試してみる\n\n```\n__ais-highlight__b__/ais-highlight__q mk --table --time_partitioning_field month --time_partitioning_type MONTH sample.pocket_rawdata pocket-rawdata.json\n```\n\n- load\n\n```\n__ais-highlight__b__/ais-highlight__q load --source_format=NEWLINE_DELIMITED_JSON --replace sample.pocket_rawdata 'gs://sample-__ais-highlight__b__/ais-highlight__ucket/preprocessed_rawdata/*'\n```\n\n今のところこんな感じでなんとかなっている\n\n## まとめ\n\n取り込み対象のデータにばらつきがある（あるデータではRECORD、あるデータでは`[]`のようなとき）とサンプリング次第で取り込めない場合がある\n\nさらに`--autodetect`+`--replace`を用いると毎回ロード時に自動検出するので失敗する可能性がある\n\nそのためスキーマを定義してテーブルの作成+`__ais-highlight__b__/ais-highlight__q load`と手順を踏む必要がある\n\n## 所感\n\n本来だったら`autodetect`で生成したスキーマからさらに精査して本当に`NULLABLE`?みたいな話も考えたほうが良いが今回は趣味プロジェクトなので…\n\nautodetectは便利だけどこういうパターンに対応できないのでやはりPOCやお試しのときくらいしか使えないよなーとあらためて感じた\n\nまぁでも気軽に試せるのはとても良いことなので使い分けが大事",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2021-05-08",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "__ais-highlight__B__/ais-highlight__igQueryの__ais-highlight__b__/ais-highlight__q load時にautodetectを使えない場合",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "tags": [
              {
                "value": "__ais-highlight__B__/ais-highlight__igQuery",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["b"]
              },
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "データにばらつきがありautodetectが使えないパターン",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/__ais-highlight__b__/ais-highlight__igquery_cant_use_autodetect/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "3",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/bigquery_date_function/",
          "text": "\nよく使うと思われるクエリをメモしておく\n\n```sql\nSELECT\nDATE_TRUNC(CURRENT_DATE(), MONTH) AS first_day, # 月初\nLAST_DAY(CURRENT_DATE(), MONTH) AS last_day, # 月末\nDATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY), MONTH) AS first_day_of_yesterday, # 前日起算の月初\nLAST_DAY(DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY), MONTH) AS last_day_of_yesterday, # 前日起算の月末\nDATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH), MONTH) AS first_day_of_last_three_month # 3ヶ月前の月初\n```\n\nDATE_TRUNC, LAST_DAYが便利",
          "date": "2022-03-25",
          "title": "BigQueryの日付を扱う際のメモ",
          "tags": ["BigQuery", "GoogleCloudPlatform", "SQL"],
          "description": "スニペット的なやつ",
          "slug": "/entries/bigquery_date_function/",
          "timeToRead": 1,
          "objectID": "6539d73b-40f3-50ab-8340-44ae50b6b75b",
          "_snippetResult": {
            "text": {
              "value": "\nよく使うと思われるクエリをメモしておく\n\n```sql\nSELECT\nDATE_TRUNC(CURRENT_DATE(), MONTH) AS first_day, # 月初\nLAST_DAY(CURRENT_DATE(), MONTH) AS last_day, # 月末\nDATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__b__/ais-highlight__igquery_date_function/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\nよく使うと思われるクエリをメモしておく\n\n```sql\nSELECT\nDATE_TRUNC(CURRENT_DATE(), MONTH) AS first_day, # 月初\nLAST_DAY(CURRENT_DATE(), MONTH) AS last_day, # 月末\nDATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY), MONTH) AS first_day_of_yesterday, # 前日起算の月初\nLAST_DAY(DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY), MONTH) AS last_day_of_yesterday, # 前日起算の月末\nDATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH), MONTH) AS first_day_of_last_three_month # 3ヶ月前の月初\n```\n\nDATE_TRUNC, LAST_DAYが便利",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2022-03-25",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "__ais-highlight__B__/ais-highlight__igQueryの日付を扱う際のメモ",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "tags": [
              {
                "value": "__ais-highlight__B__/ais-highlight__igQuery",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["b"]
              },
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              },
              { "value": "SQL", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "スニペット的なやつ",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/__ais-highlight__b__/ais-highlight__igquery_date_function/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/bigquery_sample_data/",
          "text": "\n簡易的にでもサンプルデータが欲しい場合、わざわざデータを入れ込まなくてもサンプルデータを生成できる\n\n```sql\nWITH sample AS(\n  SELECT * FROM UNNEST(ARRAY<STRUCT<start_date DATE, end_date DATE, item STRING, sales INT64>>\n    [\n      (\"2020-08-01\", \"2020-11-30\", \"hoge\", 100),\n      (\"2020-10-01\", \"2020-10-31\", \"fuga\", 200)\n    ]\n  )\n)\nSELECT * FROM sample\n```\n\n- 結果\n\n|start_date|end_date|item|sales|\n|---|---|---|---|\n|2020-08-01|2020-11-30|hoge|100|\n|2020-10-01|2020-10-31|fuga|200|\n\n\n記事書くときや説明とかに使える\n",
          "date": "2020-12-09",
          "title": "BigQueryでサンプルデータをサクッと作る",
          "tags": ["BigQuery", "SQL"],
          "description": "WITH,UNNEST,ARRAY,STRUCTでやる",
          "slug": "/entries/bigquery_sample_data/",
          "timeToRead": 1,
          "objectID": "095f8841-166b-5319-8f30-c135a7d6b56b",
          "_snippetResult": {
            "text": {
              "value": "\n簡易的にでもサンプルデータが欲しい場合、わざわざデータを入れ込まなくてもサンプルデータを生成できる\n\n```sql",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__b__/ais-highlight__igquery_sample_data/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\n簡易的にでもサンプルデータが欲しい場合、わざわざデータを入れ込まなくてもサンプルデータを生成できる\n\n```sql\nWITH sample AS(\n  SELECT * FROM UNNEST(ARRAY<STRUCT<start_date DATE, end_date DATE, item STRING, sales INT64>>\n    [\n      (\"2020-08-01\", \"2020-11-30\", \"hoge\", 100),\n      (\"2020-10-01\", \"2020-10-31\", \"fuga\", 200)\n    ]\n  )\n)\nSELECT * FROM sample\n```\n\n- 結果\n\n|start_date|end_date|item|sales|\n|---|---|---|---|\n|2020-08-01|2020-11-30|hoge|100|\n|2020-10-01|2020-10-31|fuga|200|\n\n\n記事書くときや説明とかに使える\n",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2020-12-09",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "__ais-highlight__B__/ais-highlight__igQueryでサンプルデータをサクッと作る",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "tags": [
              {
                "value": "__ais-highlight__B__/ais-highlight__igQuery",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["b"]
              },
              { "value": "SQL", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "WITH,UNNEST,ARRAY,STRUCTでやる",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/__ais-highlight__b__/ais-highlight__igquery_sample_data/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/bigquery_date_timezone/",
          "text": "\ndataformでsourceテーブルから中間テーブルを生成してassertionを書いていた\n\n検算したら件数が合わないなーということで調べた\n\n次のようなSQLで`from`,`to`を指定して単月分のレコードのみ抜き出すというパターン\n\n```sql\nSELECT\n  *,\n  'private' AS workspace\nFROM\n  `sample.rawdata-private`,\n  UNNEST(data) AS d\nWHERE\n  DATE(start) BETWEEN ${target_date.from}\n  AND ${target_date.to}\n```\n\n<!-- textlint-disable prh -->\nSQLXなので`target_date.to`と`target_date.from`はその時々によって変化する\n<!-- textlint-enable prh -->\n\n今回は`2021-04-01` ～ `2021-04-30`をという感じ\n\n`rawdata-private`はAPIのレスポンスをそのまま保存していて1行に`total_count`と`data`列に実際のレコードがあるので`UNNEST`してレコード数と比較することで確認している\n\n`rawdata-private`のレコードを追ってみると\n\n```json\n\"start\": \"2021-04-01T04:57:39+09:00\",\n```\n\nのデータが`DATE(start)`を通すことで`2021-03-31`になっていた\n\nなるほどUTC\n\n`DATE(start, 'Asia/Tokyo'),`でタイムゾーン指定の日付データに変換できるのでこれで対応\n\nBigQueryがDATEでよしなにやってくれた結果UTCで解釈すると`2021-03-31`となってしまうためフィルタ対象から外れてしまい、件数が合わない状態になっていた\n\n正直assertion書いてなかったら気付かなかったのでassertion大事w",
          "date": "2021-04-21",
          "title": "BigQueryで日付を扱うときはTimezoneを意識する",
          "tags": ["BigQuery", "GoogleCloudPlatform"],
          "description": "基本はUTCですねという話",
          "slug": "/entries/bigquery_date_timezone/",
          "timeToRead": 1,
          "objectID": "02883dc4-e742-5435-892c-a78e335fdde5",
          "_snippetResult": {
            "text": {
              "value": "出すというパターン\n\n```sql\nSELECT\n  *,\n  'private' AS workspace\nFROM\n  `sample.rawdata-private`,\n  UNNEST(data) AS d\nWHERE\n  DATE(start) __ais-highlight__B__/ais-highlight__ETWEEN ${target_date.from}\n  AND ${target_date.to}\n```\n\n<!-- textlint-disable prh -->\nSQLXなので`target_date.to`と`target_date.from`は",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__b__/ais-highlight__igquery_date_timezone/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\ndataformでsourceテーブルから中間テーブルを生成してassertionを書いていた\n\n検算したら件数が合わないなーということで調べた\n\n次のようなSQLで`from`,`to`を指定して単月分のレコードのみ抜き出すというパターン\n\n```sql\nSELECT\n  *,\n  'private' AS workspace\nFROM\n  `sample.rawdata-private`,\n  UNNEST(data) AS d\nWHERE\n  DATE(start) __ais-highlight__B__/ais-highlight__ETWEEN ${target_date.from}\n  AND ${target_date.to}\n```\n\n<!-- textlint-disable prh -->\nSQLXなので`target_date.to`と`target_date.from`はその時々によって変化する\n<!-- textlint-enable prh -->\n\n今回は`2021-04-01` ～ `2021-04-30`をという感じ\n\n`rawdata-private`はAPIのレスポンスをそのまま保存していて1行に`total_count`と`data`列に実際のレコードがあるので`UNNEST`してレコード数と比較することで確認している\n\n`rawdata-private`のレコードを追ってみると\n\n```json\n\"start\": \"2021-04-01T04:57:39+09:00\",\n```\n\nのデータが`DATE(start)`を通すことで`2021-03-31`になっていた\n\nなるほどUTC\n\n`DATE(start, 'Asia/Tokyo'),`でタイムゾーン指定の日付データに変換できるのでこれで対応\n\n__ais-highlight__B__/ais-highlight__igQueryがDATEでよしなにやってくれた結果UTCで解釈すると`2021-03-31`となってしまうためフィルタ対象から外れてしまい、件数が合わない状態になっていた\n\n正直assertion書いてなかったら気付かなかったのでassertion大事w",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2021-04-21",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "__ais-highlight__B__/ais-highlight__igQueryで日付を扱うときはTimezoneを意識する",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "tags": [
              {
                "value": "__ais-highlight__B__/ais-highlight__igQuery",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["b"]
              },
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "基本はUTCですねという話",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/__ais-highlight__b__/ais-highlight__igquery_date_timezone/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/filter_by_explain_result/",
          "text": "\nAWSで稼働しているRDSからgeneral logを取ってきてそのクエリログから特定のクエリを抽出してExplainの結果を判定するということをやったのでそのときやったことをメモしておく\n\n単発だったのでいくつか簡単なスクリプトを書いて対応したがしくみ化するならいろいろおもしろいかも\n\n## 前提\n\nローカルからのフォワーディングや本番サーバなどから実行するなど本番のDBに接続できる必要がある\n\ngeneral logをファイルに出力する設定をしておく必要がある\n\n## やること\n### general logの取得\n\nAPIのドキュメントは下記\n\n[Accessing Amazon RDS database log files - Amazon Relational Database Service](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html)\n\n直近24時間分のログが取れる\n\n数値はUTC時刻の範囲で出力されるっぽいので`general/mysql-general.log.0`はJSTでは`09:00`台の内容\n\n```shell\n#!/bin/bash\n\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.0  > 0.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.1  > 1.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.2  > 2.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.3  > 3.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.4  > 4.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.5  > 5.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.6  > 6.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.7  > 7.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.8  > 8.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.9  > 9.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.10 > 10.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.11 > 11.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.12 > 12.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.13 > 13.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.14 > 14.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.15 > 15.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.16 > 16.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.17 > 17.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.18 > 18.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.19 > 19.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.20 > 20.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.21 > 21.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.22 > 22.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.23 > 23.log\n```\n\n### クエリのフォーマット、フィルタリング\n\ngeneral logの形式が次のような感じなのでクエリ部分を抜き出す必要がある\n\n```\nTime                 Id Command    Argument\n                946458 Query    SELECT hoge FROM fuga....\n```\n\n[Mysql general log parser](https://gist.github.com/httpdss/948386)\n\n<!-- textlint-disable prh,spellcheck-tech-word -->\nからパーススクリプトを持ってきて配置し（mysql-general-log-parser.pl）次のようなシェルを書いた\n<!-- textlint-enable prh,spellcheck-tech-word  -->\n\n- filter_general_log.sh\n\n```shell\nfile=$1\n\nperl mysql-general-log-parser.pl $file | grep -v 'Your log message was truncated' | grep -v 'rds_heartbeat2' | grep -v 'rds_configuration' | grep -v 'mysql-connector-java' | grep -v 'EXPLAIN ' | sort | uniq > $file.query_list.txt\n```\n\n- 実行\n\n```shell\nls -l {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23}.log | awk '{print $9}' | xargs -i ./filter_general_log.sh {}\n```\n\n### 生成したファイルをマージする\n\n```\ncat *.query_list.txt > query_list.txt\n```\n\n### 特定クエリの抽出\n\n`GROUP BY`, `DISTINCT`を使用しているクエリを拾う\n\n- filter_group_by_query.py\n\n```python\nimport sqlparse\nimport sys\n\nfilepath = sys.argv[1]\n\nf = open(filepath)\nlines = f.readlines()\nf.close()\n\nfor line in lines:\n    parsed = sqlparse.parse(line)[0]\n    tokens = list(parsed.flatten())\n    is_grouped = filter(lambda t: t.match(sqlparse.tokens.Keyword, \"GROUP\\s+BY\", regex=True), tokens)\n    is_distinct = filter(lambda t: t.match(sqlparse.tokens.Name, \"DISTINCT\"), tokens)\n    if len(list(is_grouped)) > 0 or len(list(is_distinct )) > 0:\n        print(line)\n```\n\n- 実行\n\n```shell\npip install sqlparse\npython filter_group_by_query.py query_list.txt > group_by_query.txt\n```\n\n### チェック\n\nexplainの結果に`Using index for group-by`が含まれるものを抜き出す\n\n- check_group_by_query.sh\n\n```shell\n#!/bin/bash\n\nfile=$1\n\ncnt=0\ncat $file | while read line\ndo\n  cnt=`expr $cnt + 1`\n  echo $cnt\n  mysql -uhoge -P 13306 -h localhost -ppass dbname -e \"EXPLAIN $line\" | grep 'Using index for group-by'\n  if [ $? -eq 0 ]; then\n    echo \"Found Query\"\n    echo $line\n    echo $line >> result.txt\n  fi\ndone\n```\n\n- 実行\n\n```\nsh check_group_by_query.sh group_by_query.txt\n```\n\nという感じでいくつかのクエリを探すようなことをした",
          "date": "2021-02-26",
          "title": "MySQLのgenerallogから特定のSQLを抜き出す",
          "tags": ["MySQL", "Python", "AWS"],
          "description": "いろいろやる",
          "slug": "/entries/filter_by_explain_result/",
          "timeToRead": 5,
          "objectID": "98a416aa-9340-5f56-bc5c-dde7cd637e48",
          "_snippetResult": {
            "text": {
              "value": "filter_group___ais-highlight__b__/ais-highlight__y_query.py query_list.txt > group___ais-highlight__b__/ais-highlight__y_query.txt\n```\n\n### チェック\n\nexplainの結果に`Using index for group-__ais-highlight__b__/ais-highlight__y`が含まれるものを抜き出す\n\n- check_group___ais-highlight__b__/ais-highlight__y_query.sh\n\n```shell\n#!/__ais-highlight__b__/ais-highlight__in/__ais-highlight__b__/ais-highlight__ash\n\nfile=$1\n\ncnt=0",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/filter___ais-highlight__b__/ais-highlight__y_explain_result/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\nAWSで稼働しているRDSからgeneral logを取ってきてそのクエリログから特定のクエリを抽出してExplainの結果を判定するということをやったのでそのときやったことをメモしておく\n\n単発だったのでいくつか簡単なスクリプトを書いて対応したがしくみ化するならいろいろおもしろいかも\n\n## 前提\n\nローカルからのフォワーディングや本番サーバなどから実行するなど本番のDBに接続できる必要がある\n\ngeneral logをファイルに出力する設定をしておく必要がある\n\n## やること\n### general logの取得\n\nAPIのドキュメントは下記\n\n[Accessing Amazon RDS database log files - Amazon Relational Database Service](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html)\n\n直近24時間分のログが取れる\n\n数値はUTC時刻の範囲で出力されるっぽいので`general/mysql-general.log.0`はJSTでは`09:00`台の内容\n\n```shell\n#!/__ais-highlight__b__/ais-highlight__in/__ais-highlight__b__/ais-highlight__ash\n\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.0  > 0.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.1  > 1.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.2  > 2.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.3  > 3.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.4  > 4.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.5  > 5.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.6  > 6.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.7  > 7.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.8  > 8.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.9  > 9.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.10 > 10.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.11 > 11.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.12 > 12.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.13 > 13.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.14 > 14.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.15 > 15.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.16 > 16.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.17 > 17.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.18 > 18.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.19 > 19.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.20 > 20.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.21 > 21.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.22 > 22.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.23 > 23.log\n```\n\n### クエリのフォーマット、フィルタリング\n\ngeneral logの形式が次のような感じなのでクエリ部分を抜き出す必要がある\n\n```\nTime                 Id Command    Argument\n                946458 Query    SELECT hoge FROM fuga....\n```\n\n[Mysql general log parser](https://gist.github.com/httpdss/948386)\n\n<!-- textlint-disable prh,spellcheck-tech-word -->\nからパーススクリプトを持ってきて配置し（mysql-general-log-parser.pl）次のようなシェルを書いた\n<!-- textlint-enable prh,spellcheck-tech-word  -->\n\n- filter_general_log.sh\n\n```shell\nfile=$1\n\nperl mysql-general-log-parser.pl $file | grep -v 'Your log message was truncated' | grep -v 'rds_heartbeat2' | grep -v 'rds_configuration' | grep -v 'mysql-connector-java' | grep -v 'EXPLAIN ' | sort | uniq > $file.query_list.txt\n```\n\n- 実行\n\n```shell\nls -l {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23}.log | awk '{print $9}' | xargs -i ./filter_general_log.sh {}\n```\n\n### 生成したファイルをマージする\n\n```\ncat *.query_list.txt > query_list.txt\n```\n\n### 特定クエリの抽出\n\n`GROUP __ais-highlight__B__/ais-highlight__Y`, `DISTINCT`を使用しているクエリを拾う\n\n- filter_group___ais-highlight__b__/ais-highlight__y_query.py\n\n```python\nimport sqlparse\nimport sys\n\nfilepath = sys.argv[1]\n\nf = open(filepath)\nlines = f.readlines()\nf.close()\n\nfor line in lines:\n    parsed = sqlparse.parse(line)[0]\n    tokens = list(parsed.flatten())\n    is_grouped = filter(lambda t: t.match(sqlparse.tokens.Keyword, \"GROUP\\s+__ais-highlight__B__/ais-highlight__Y\", regex=True), tokens)\n    is_distinct = filter(lambda t: t.match(sqlparse.tokens.Name, \"DISTINCT\"), tokens)\n    if len(list(is_grouped)) > 0 or len(list(is_distinct )) > 0:\n        print(line)\n```\n\n- 実行\n\n```shell\npip install sqlparse\npython filter_group___ais-highlight__b__/ais-highlight__y_query.py query_list.txt > group___ais-highlight__b__/ais-highlight__y_query.txt\n```\n\n### チェック\n\nexplainの結果に`Using index for group-__ais-highlight__b__/ais-highlight__y`が含まれるものを抜き出す\n\n- check_group___ais-highlight__b__/ais-highlight__y_query.sh\n\n```shell\n#!/__ais-highlight__b__/ais-highlight__in/__ais-highlight__b__/ais-highlight__ash\n\nfile=$1\n\ncnt=0\ncat $file | while read line\ndo\n  cnt=`expr $cnt + 1`\n  echo $cnt\n  mysql -uhoge -P 13306 -h localhost -ppass dbname -e \"EXPLAIN $line\" | grep 'Using index for group-__ais-highlight__b__/ais-highlight__y'\n  if [ $? -eq 0 ]; then\n    echo \"Found Query\"\n    echo $line\n    echo $line >> result.txt\n  fi\ndone\n```\n\n- 実行\n\n```\nsh check_group___ais-highlight__b__/ais-highlight__y_query.sh group___ais-highlight__b__/ais-highlight__y_query.txt\n```\n\nという感じでいくつかのクエリを探すようなことをした",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2021-02-26",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "MySQLのgenerallogから特定のSQLを抜き出す",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "MySQL", "matchLevel": "none", "matchedWords": [] },
              { "value": "Python", "matchLevel": "none", "matchedWords": [] },
              { "value": "AWS", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "いろいろやる",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/filter___ais-highlight__b__/ais-highlight__y_explain_result/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "5",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/toc_bookmarklet/",
          "text": "\n他の記事はどのような構成なんだろう？\n\n記事書くときにどのような流れが良いのかなー？\n\nと考えることがあったのでTOCを収集して傾向などを見つけてみようと思ったので掲題のブックマークレットを書いた\n\n- toc.js\n\n```javascript\n(() => {\n  const log = (msg) => { console.log(msg) };\n  log('start extract toc');\n\n  const o = (body) => {\n    const d = window.open().document;\n    d.writeln('TOC<br /><textarea cols=\"100\" rows=\"30\">' + body + '</textarea>');\n    d.close();\n  };\n\n  const toc = Array.from(document.querySelectorAll('h1,h2,h3,h4')).map(e => {\n    const n = e.tagName.replace(\"H\",\"\");\n    return `${\"#\".repeat(n)} ${e.textContent}`;\n  }).join(\"\\n\");\n  log(toc);\n  o(toc);\n})();\n```\n\nブックマークに登録するときは次のように1行にしてスペースはエスケープする\n\n```javascript\njavascript:(()%20=>%20{%20const%20log%20=%20(msg)%20=>%20{%20console.log(msg)%20};%20log('start%20extract%20toc');%20const%20o%20=%20(body)%20=>%20{%20const%20d%20=%20window.open().document;%20d.writeln('TOC<br%20/><textarea%20cols=\"100\"%20rows=\"30\">'%20+%20body%20+%20'</textarea>');%20d.close();%20};%20const%20toc%20=%20Array.from(document.querySelectorAll('h1,h2,h3,h4')).map(e%20=>%20{%20const%20n%20=%20e.tagName.replace(\"H\",\"\");%20return%20`${\"#\".repeat(n)}%20${e.textContent}`;%20}).join(\"\\n\");%20log(toc);%20o(toc);%20})();\n```\n\nこんな感じの出力が得られる\n\n```\n## WSL側\n## Xlaunch\n## WSL側\n### 参考：\n```\n\nなお、対象ページでタイトル以外にも`h2`などを付けているとその情報も入ってきてしまう\n",
          "date": "2021-06-10",
          "title": "TOCを抽出するためのブックマークレット",
          "tags": ["Bookmarklet"],
          "description": "TOC",
          "slug": "/entries/toc_bookmarklet/",
          "timeToRead": 1,
          "objectID": "6985eaba-5fc6-5c81-999d-05fab0c96a74",
          "_snippetResult": {
            "text": {
              "value": "マークレットを書いた\n\n- toc.js\n\n```javascript\n(() => {\n  const log = (msg) => { console.log(msg) };\n  log('start extract toc');\n\n  const o = (__ais-highlight__b__/ais-highlight__ody) => {\n    const d = window.open().document;\n    d.writeln('TOC' + __ais-highlight__b__/ais-highlight__ody + '');\n    d.close();\n  };\n\n  const toc = Array.from(document.querySelectorAll('h1,h2,h3,h4')).map(e => {\n    const",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/toc___ais-highlight__b__/ais-highlight__ookmarklet/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\n他の記事はどのような構成なんだろう？\n\n記事書くときにどのような流れが良いのかなー？\n\nと考えることがあったのでTOCを収集して傾向などを見つけてみようと思ったので掲題のブックマークレットを書いた\n\n- toc.js\n\n```javascript\n(() => {\n  const log = (msg) => { console.log(msg) };\n  log('start extract toc');\n\n  const o = (__ais-highlight__b__/ais-highlight__ody) => {\n    const d = window.open().document;\n    d.writeln('TOC<br /><textarea cols=\"100\" rows=\"30\">' + __ais-highlight__b__/ais-highlight__ody + '</textarea>');\n    d.close();\n  };\n\n  const toc = Array.from(document.querySelectorAll('h1,h2,h3,h4')).map(e => {\n    const n = e.tagName.replace(\"H\",\"\");\n    return `${\"#\".repeat(n)} ${e.textContent}`;\n  }).join(\"\\n\");\n  log(toc);\n  o(toc);\n})();\n```\n\nブックマークに登録するときは次のように1行にしてスペースはエスケープする\n\n```javascript\njavascript:(()%20=>%20{%20const%20log%20=%20(msg)%20=>%20{%20console.log(msg)%20};%20log('start%20extract%20toc');%20const%20o%20=%20(__ais-highlight__b__/ais-highlight__ody)%20=>%20{%20const%20d%20=%20window.open().document;%20d.writeln('TOC<br%20/><textarea%20cols=\"100\"%20rows=\"30\">'%20+%20body%20+%20'</textarea>');%20d.close();%20};%20const%20toc%20=%20Array.from(document.querySelectorAll('h1,h2,h3,h4')).map(e%20=>%20{%20const%20n%20=%20e.tagName.replace(\"H\",\"\");%20return%20`${\"#\".repeat(n)}%20${e.textContent}`;%20}).join(\"\\n\");%20log(toc);%20o(toc);%20})();\n```\n\nこんな感じの出力が得られる\n\n```\n## WSL側\n## Xlaunch\n## WSL側\n### 参考：\n```\n\nなお、対象ページでタイトル以外にも`h2`などを付けているとその情報も入ってきてしまう\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2021-06-10",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "TOCを抽出するためのブックマークレット",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "__ais-highlight__B__/ais-highlight__ookmarklet",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["b"]
              }
            ],
            "description": {
              "value": "TOC",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/toc___ais-highlight__b__/ais-highlight__ookmarklet/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/vagrant_boot_failed/",
          "text": "\nホスト機がフリーズしてしまったとかVMを正常に終了させられないまま再起動してしまったときなど\n\nごくたまにVagrantで使っているVMが起動しなくなる\n\nいくつか試してみたのでその記録\n\n本記事では`dev4`というVM名で進める\n\n```shell\n$ vagrant up\nBringing machine 'default' up with 'virtualbox' provider...\n==> default: Checking if box 'bento/centos-7.4' version '201803.24.0' is up to date...\n==> default: Clearing any previously set forwarded ports...\nThere was an error while executing `VBoxManage`, a CLI used by Vagrant\nfor controlling VirtualBox. The command and stderr is shown below.\n\nCommand: [\"modifyvm\", \"d4c26ea5-e507-4049-878a-2c89a841f9e6\", \"--natpf1\", \"delete\", \"127.0.0.1tcp22396\", \"--natpf1\", \"delete\", \"127.0.0.1tcp9200\", \"--natpf1\", \"delete\", \"127.0.0.1tcp9300\", \"--natpf1\", \"delete\", \"ssh\"]\n\nStderr: VBoxManage.exe: error: The machine 'dev4' is already locked for a session (or being unlocked)\nVBoxManage.exe: error: Details: code VBOX_E_INVALID_OBJECT_STATE (0x80bb0007), component MachineWrap, interface IMachine, callee IUnknown\nVBoxManage.exe: error: Context: \"LockMachine(a->session, LockType_Write)\" at line 554 of file VBoxManageModifyVM.cpp\n```\n\nlockされてます\n\nいくつか調べたら`poweroff`にすればよいとあったので実行してみる\n\n```shell\n$ cd /c/Program\\ Files/Oracle/VirtualBox\n$ ./VBoxManage.exe controlvm dev4 poweroff\nVBoxManage.exe: error: The virtual machine is being powered down\nVBoxManage.exe: error: Details: code VBOX_E_INVALID_VM_STATE (0x80bb0002), component ConsoleWrap, interface IConsole, callee IUnknown\nVBoxManage.exe: error: Context: \"PowerDown(progress.asOutParam())\" at line 619 of file VBoxManageControlVM.cpp\n```\n\nもう止まっているよということのよう\n\n```\n$ vagrant status\nCurrent machine states:\n\ndefault                   stopping (virtualbox)\n\nThe VM is stopping.\n```\n\n- 参考\n\n[VirtualBoxで仮想コンピュータが反応しなくなった時( = _ = )](https://qiita.com/Ikumi/items/557808a232a0c12d3027)\n\nを参考に強制的に落とす\n\n```shell\n ./VBoxManage.exe startvm dev4 --type emergencystop\n```\n\nabortedになった\n\n```shell\n$ vagrant status\nCurrent machine states:\n\ndefault                   aborted (virtualbox)\n\nThe VM is in an aborted state. This means that it was abruptly\nstopped without properly closing the session. Run `vagrant up`\nto resume this virtual machine. If any problems persist, you may\nhave to destroy and restart the virtual machine.\n```\n\nここから`vagrant up`して無事立ち上げることができた\n\n\n```\n$ vagrant up\n.....\n.....\n.....\nTimed out while waiting for the machine to boot. This means that\nVagrant was unable to communicate with the guest machine within\nthe configured (\"config.vm.boot_timeout\" value) time period.\n\nIf you look above, you should be able to see the error(s) that\nVagrant had when attempting to connect to the machine. These errors\nare usually good hints as to what may be wrong.\n\nIf you're using a custom box, make sure that networking is properly\nworking and you're able to connect to the machine. It is a common\nproblem that networking isn't setup properly in these boxes.\nVerify that authentication configurations are also setup properly,\nas well.\n\nIf the box appears to be booting properly, you may want to increase\nthe timeout (\"config.vm.boot_timeout\") value.\n```\n\nが、立ち上がったは良いがsshできないという感じになってしまった\n\nVirtualBoxからものぞいてみようと試みたがVMが完全に立ち上がらない状態で操作できず\n\n結局ホストのWindowsを完全シャットダウン（shift+シャットダウン）&起動してVM起動したら動くようになっていた\n\nただの徒労…\n",
          "date": "2021-01-26",
          "title": "VagrantのVMが立ち上がらなくなってしまったときの対処方いくつか",
          "tags": ["Vagrant", "VirtualBox"],
          "description": "最終的にはWindows再起動",
          "slug": "/entries/vagrant_boot_failed/",
          "timeToRead": 3,
          "objectID": "469d3526-3329-586f-a94e-82a9bafd627b",
          "_snippetResult": {
            "text": {
              "value": "is a common\nproblem that networking isn't setup properly in these __ais-highlight__b__/ais-highlight__oxes.\nVerify that authentication configurations are also setup properly,\nas well.\n\nIf the __ais-highlight__b__/ais-highlight__ox appears to __ais-highlight__b__/ais-highlight__e __ais-highlight__b__/ais-highlight__ooting properly, you may want to increase\nthe timeout (\"config.vm.__ais-highlight__b__/ais-highlight__oot_timeout\") value.\n```\n\nが、立ち上がった",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/vagrant___ais-highlight__b__/ais-highlight__oot_failed/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\nホスト機がフリーズしてしまったとかVMを正常に終了させられないまま再起動してしまったときなど\n\nごくたまにVagrantで使っているVMが起動しなくなる\n\nいくつか試してみたのでその記録\n\n本記事では`dev4`というVM名で進める\n\n```shell\n$ vagrant up\n__ais-highlight__B__/ais-highlight__ringing machine 'default' up with 'virtualbox' provider...\n==> default: Checking if __ais-highlight__b__/ais-highlight__ox '__ais-highlight__b__/ais-highlight__ento/centos-7.4' version '201803.24.0' is up to date...\n==> default: Clearing any previously set forwarded ports...\nThere was an error while executing `VBoxManage`, a CLI used __ais-highlight__b__/ais-highlight__y Vagrant\nfor controlling VirtualBox. The command and stderr is shown __ais-highlight__b__/ais-highlight__elow.\n\nCommand: [\"modifyvm\", \"d4c26ea5-e507-4049-878a-2c89a841f9e6\", \"--natpf1\", \"delete\", \"127.0.0.1tcp22396\", \"--natpf1\", \"delete\", \"127.0.0.1tcp9200\", \"--natpf1\", \"delete\", \"127.0.0.1tcp9300\", \"--natpf1\", \"delete\", \"ssh\"]\n\nStderr: VBoxManage.exe: error: The machine 'dev4' is already locked for a session (or __ais-highlight__b__/ais-highlight__eing unlocked)\nVBoxManage.exe: error: Details: code VBOX_E_INVALID_OBJECT_STATE (0x80bb0007), component MachineWrap, interface IMachine, callee IUnknown\nVBoxManage.exe: error: Context: \"LockMachine(a->session, LockType_Write)\" at line 554 of file VBoxManageModifyVM.cpp\n```\n\nlockされてます\n\nいくつか調べたら`poweroff`にすればよいとあったので実行してみる\n\n```shell\n$ cd /c/Program\\ Files/Oracle/VirtualBox\n$ ./VBoxManage.exe controlvm dev4 poweroff\nVBoxManage.exe: error: The virtual machine is __ais-highlight__b__/ais-highlight__eing powered down\nVBoxManage.exe: error: Details: code VBOX_E_INVALID_VM_STATE (0x80bb0002), component ConsoleWrap, interface IConsole, callee IUnknown\nVBoxManage.exe: error: Context: \"PowerDown(progress.asOutParam())\" at line 619 of file VBoxManageControlVM.cpp\n```\n\nもう止まっているよということのよう\n\n```\n$ vagrant status\nCurrent machine states:\n\ndefault                   stopping (virtualbox)\n\nThe VM is stopping.\n```\n\n- 参考\n\n[VirtualBoxで仮想コンピュータが反応しなくなった時( = _ = )](https://qiita.com/Ikumi/items/557808a232a0c12d3027)\n\nを参考に強制的に落とす\n\n```shell\n ./VBoxManage.exe startvm dev4 --type emergencystop\n```\n\nabortedになった\n\n```shell\n$ vagrant status\nCurrent machine states:\n\ndefault                   aborted (virtualbox)\n\nThe VM is in an aborted state. This means that it was abruptly\nstopped without properly closing the session. Run `vagrant up`\nto resume this virtual machine. If any problems persist, you may\nhave to destroy and restart the virtual machine.\n```\n\nここから`vagrant up`して無事立ち上げることができた\n\n\n```\n$ vagrant up\n.....\n.....\n.....\nTimed out while waiting for the machine to __ais-highlight__b__/ais-highlight__oot. This means that\nVagrant was unable to communicate with the guest machine within\nthe configured (\"config.vm.__ais-highlight__b__/ais-highlight__oot_timeout\" value) time period.\n\nIf you look above, you should __ais-highlight__b__/ais-highlight__e able to see the error(s) that\nVagrant had when attempting to connect to the machine. These errors\nare usually good hints as to what may __ais-highlight__b__/ais-highlight__e wrong.\n\nIf you're using a custom __ais-highlight__b__/ais-highlight__ox, make sure that networking is properly\nworking and you're able to connect to the machine. It is a common\nproblem that networking isn't setup properly in these __ais-highlight__b__/ais-highlight__oxes.\nVerify that authentication configurations are also setup properly,\nas well.\n\nIf the __ais-highlight__b__/ais-highlight__ox appears to __ais-highlight__b__/ais-highlight__e __ais-highlight__b__/ais-highlight__ooting properly, you may want to increase\nthe timeout (\"config.vm.__ais-highlight__b__/ais-highlight__oot_timeout\") value.\n```\n\nが、立ち上がったは良いがsshできないという感じになってしまった\n\nVirtualBoxからものぞいてみようと試みたがVMが完全に立ち上がらない状態で操作できず\n\n結局ホストのWindowsを完全シャットダウン（shift+シャットダウン）&起動してVM起動したら動くようになっていた\n\nただの徒労…\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2021-01-26",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "VagrantのVMが立ち上がらなくなってしまったときの対処方いくつか",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "Vagrant", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "VirtualBox",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "最終的にはWindows再起動",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/vagrant___ais-highlight__b__/ais-highlight__oot_failed/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "3",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/github_contribute_bookmarklet/",
          "text": "\n以前Twitterで`採用などでGitHubアカウントもらったらこのクエリでコントリビューションみますね`みたいなのを見かけた\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nとりあえずそのうち見るときのためにタブをそのままにしていたが、いろいろな人のも見られるとおもしろいかもと思ってブックマークレットを書いた\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\nユーザーページもしくは対象ユーザーのどこかのリポジトリなど、ユーザー名がURLに存在すれば実行可能\n\n- github_contribute.js\n\n```javascript\n(function(){\n  const user = window.location.href.split(\"/\")[3];\n  const excludeOrgs = [];\n  const w = window.open();\n  const excludeOrgQuery = excludeOrgs.map(o => `-org%3A${o}`).join('+');\n  w.location.href = `https://github.com/pulls?q=involves%3A${user}+-user%3A${user}+${excludeOrgQuery}`;\n})()\n```\n\n- ブックマークバーへの貼り付け用出力\n\n```shell\n$ cat github_contribute.js |  sed -e ':loop;N;$!b loop;s/\\n/ /g' -e 's/ \\+/%20/g' -e 's/^/javascript:/'\njavascript:(function(){%20const%20user%20=%20window.location.href.split(\"/\")[3];%20const%20excludeOrgs%20=%20[];%20const%20w%20=%20window.open();%20const%20excludeOrgQuery%20=%20excludeOrgs.map(o%20=>%20`-org%3A${o}`).join('+');%20w.location.href%20=%20`https://github.com/pulls?q=involves%3A${user}+-user%3A${user}+${excludeOrgQuery}`;%20})()\n```\n\n`excludeOrgs`は自分が所属している組織へのPRやissueは除外するための記述\n\nGitHubで仕事の開発している場合は対象組織のPRなども表示されてしまうのでその除外\n\n感想としては自分はあんまりコントリビュートできてません!ということがわかりました。まる。\n",
          "date": "2021-09-25",
          "title": "GitHubのコントリビュート一覧に飛ぶためのブックマークレット",
          "tags": ["Bookmarklet", "GitHub"],
          "description": "コントリビュートしたい",
          "slug": "/entries/github_contribute_bookmarklet/",
          "timeToRead": 1,
          "objectID": "faff91eb-e6c1-50b9-9e09-6076dc528ecb",
          "_snippetResult": {
            "text": {
              "value": "マークバーへの貼り付け用出力\n\n```shell\n$ cat github_contribute.js |  sed -e ':loop;N;$!__ais-highlight__b__/ais-highlight__ loop;s/\\n/ /g' -e 's/ \\+/%20/g' -e 's/^/javascript:/'\njavascript:(function(){%20const%20user%20=%20window.location.href.split(\"/\")[3];%20const%20excludeOrgs%20",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/github_contribute___ais-highlight__b__/ais-highlight__ookmarklet/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\n以前Twitterで`採用などでGitHubアカウントもらったらこのクエリでコントリビューションみますね`みたいなのを見かけた\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nとりあえずそのうち見るときのためにタブをそのままにしていたが、いろいろな人のも見られるとおもしろいかもと思ってブックマークレットを書いた\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\nユーザーページもしくは対象ユーザーのどこかのリポジトリなど、ユーザー名がURLに存在すれば実行可能\n\n- github_contribute.js\n\n```javascript\n(function(){\n  const user = window.location.href.split(\"/\")[3];\n  const excludeOrgs = [];\n  const w = window.open();\n  const excludeOrgQuery = excludeOrgs.map(o => `-org%3A${o}`).join('+');\n  w.location.href = `https://github.com/pulls?q=involves%3A${user}+-user%3A${user}+${excludeOrgQuery}`;\n})()\n```\n\n- ブックマークバーへの貼り付け用出力\n\n```shell\n$ cat github_contribute.js |  sed -e ':loop;N;$!__ais-highlight__b__/ais-highlight__ loop;s/\\n/ /g' -e 's/ \\+/%20/g' -e 's/^/javascript:/'\njavascript:(function(){%20const%20user%20=%20window.location.href.split(\"/\")[3];%20const%20excludeOrgs%20=%20[];%20const%20w%20=%20window.open();%20const%20excludeOrgQuery%20=%20excludeOrgs.map(o%20=>%20`-org%3A${o}`).join('+');%20w.location.href%20=%20`https://github.com/pulls?q=involves%3A${user}+-user%3A${user}+${excludeOrgQuery}`;%20})()\n```\n\n`excludeOrgs`は自分が所属している組織へのPRやissueは除外するための記述\n\nGitHubで仕事の開発している場合は対象組織のPRなども表示されてしまうのでその除外\n\n感想としては自分はあんまりコントリビュートできてません!ということがわかりました。まる。\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2021-09-25",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "GitHubのコントリビュート一覧に飛ぶためのブックマークレット",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "__ais-highlight__B__/ais-highlight__ookmarklet",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["b"]
              },
              { "value": "GitHub", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "コントリビュートしたい",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/github_contribute___ais-highlight__b__/ais-highlight__ookmarklet/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/github_projects_batch_archive/",
          "text": "\nProjects自体はItemが1200件までしか作れない、それ以上扱いたい場合は既存のItemをDelete or Archiveしなければならない\n\nなのでArchiveするという選択肢になるが、今度は2022-08-31時点ではArchiveするAPI（mutation）がない\n\nGUIの中でBoardViewだと各リストに一括Archiveできる機能もあるがStatusかIteration単位でしかグループ化できない\n\nなのでIterationを設定する前のItemについては一括で扱うしかない状態になってしまう\n\nIteration設定されていないものを一括でArchiveするのもなんとなく嫌だなと思ったので\n\n雑だが簡単なコードを書いた\n\n## consoleでの一回の操作\n\n```javascript\n$('.menu-trigger').click()\n$('[data-test-id=\"row-menu-archive\"]').click()\n$x('//button[text()=\"Archive\"]')[0].click()\n```\n\n- メニューを出して\n- Archiveをクリックして\n- Confirmする\n\nというながれを一番上のItemで行うためのコード\n\n## まとめて操作\n\n```javascript\nfunction archive() {\n  document.querySelector('.menu-trigger').click();\n  document.querySelector('[data-test-id=\"row-menu-archive\"]').click();\n  document.evaluate('//button[text()=\"Archive\"]', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.click()\n}\n```\n\n一番上のItemをArchiveする操作を関数にまとめ\n\n```javascript\nsetInterval(archive, 2000);\n```\n\n定期実行することでたまっているItemを自動でArchiveする\n\n使い方としてはある程度フィルタリングして全件Archive\n\nあと全部ArchiveされるとItemがない状態になるので実行時エラーになる\n\n丁寧にやるならエラーをキャッチしてclearIntervalまでしてあげれば良さそうだが…\n\n## XPath周りでの差分\n\n関数化するとdevtoolで便利な`$`が使えないので一部修正した\n\nさらにXPath周りはちょっと勝手が違った\n\n- 参考\n\n[JavaScript での XPath の利用の手引き - XPath | MDN](https://developer.mozilla.org/ja/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript)\n\nただ単に`document.evaluate`するだけだと`click()`できるNodeが返却値に含まれない\n\nオプションで返却値の指定をしてNodeを取れるようにしてからノードを取得、クリックといった処理になった\n\n今回は初回に見つかったNodeだけを取得したいので`FIRST_ORDERED_NODE_TYPE`を指定し`sinbleNodeValue`でNodeを取得した\n",
          "date": "2022-09-04",
          "title": "GitHub ProjectsのItemを一括Archive",
          "tags": ["GitHub", "GitHub Projects", "JavaScript"],
          "description": "desc",
          "slug": "/entries/github_projects_batch_archive/",
          "timeToRead": 2,
          "objectID": "cccac18a-0e2e-5671-b3d2-9a1a4bc2e3fa",
          "_snippetResult": {
            "text": {
              "value": "なるが、今度は2022-08-31時点ではArchiveするAPI（mutation）がない\n\nGUIの中で__ais-highlight__B__/ais-highlight__oardViewだと各リストに一括Archiveできる機能もあるがStatusかIteration単位",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/github_projects___ais-highlight__b__/ais-highlight__atch_archive/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\nProjects自体はItemが1200件までしか作れない、それ以上扱いたい場合は既存のItemをDelete or Archiveしなければならない\n\nなのでArchiveするという選択肢になるが、今度は2022-08-31時点ではArchiveするAPI（mutation）がない\n\nGUIの中で__ais-highlight__B__/ais-highlight__oardViewだと各リストに一括Archiveできる機能もあるがStatusかIteration単位でしかグループ化できない\n\nなのでIterationを設定する前のItemについては一括で扱うしかない状態になってしまう\n\nIteration設定されていないものを一括でArchiveするのもなんとなく嫌だなと思ったので\n\n雑だが簡単なコードを書いた\n\n## consoleでの一回の操作\n\n```javascript\n$('.menu-trigger').click()\n$('[data-test-id=\"row-menu-archive\"]').click()\n$x('//__ais-highlight__b__/ais-highlight__utton[text()=\"Archive\"]')[0].click()\n```\n\n- メニューを出して\n- Archiveをクリックして\n- Confirmする\n\nというながれを一番上のItemで行うためのコード\n\n## まとめて操作\n\n```javascript\nfunction archive() {\n  document.querySelector('.menu-trigger').click();\n  document.querySelector('[data-test-id=\"row-menu-archive\"]').click();\n  document.evaluate('//__ais-highlight__b__/ais-highlight__utton[text()=\"Archive\"]', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.click()\n}\n```\n\n一番上のItemをArchiveする操作を関数にまとめ\n\n```javascript\nsetInterval(archive, 2000);\n```\n\n定期実行することでたまっているItemを自動でArchiveする\n\n使い方としてはある程度フィルタリングして全件Archive\n\nあと全部ArchiveされるとItemがない状態になるので実行時エラーになる\n\n丁寧にやるならエラーをキャッチしてclearIntervalまでしてあげれば良さそうだが…\n\n## XPath周りでの差分\n\n関数化するとdevtoolで便利な`$`が使えないので一部修正した\n\nさらにXPath周りはちょっと勝手が違った\n\n- 参考\n\n[JavaScript での XPath の利用の手引き - XPath | MDN](https://developer.mozilla.org/ja/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript)\n\nただ単に`document.evaluate`するだけだと`click()`できるNodeが返却値に含まれない\n\nオプションで返却値の指定をしてNodeを取れるようにしてからノードを取得、クリックといった処理になった\n\n今回は初回に見つかったNodeだけを取得したいので`FIRST_ORDERED_NODE_TYPE`を指定し`sinbleNodeValue`でNodeを取得した\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2022-09-04",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "GitHub ProjectsのItemを一括Archive",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "GitHub", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "GitHub Projects",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "JavaScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "desc",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/github_projects___ais-highlight__b__/ais-highlight__atch_archive/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "2",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/workflows_logging_bigquery_failed/",
          "text": "\nはてなブログのAPIなど公開のAPIをたたいてそのレスポンスをそのままBigQueryに突っ込むみたいなやつ\n\nプライベートなのと規模感が小さいのでちょっと冒険的な感じでやってみようと次のような構成で試みた\n\n- Workflowsではてなブックマークの公開APIをたたく\n- WorkflowsのログにAPIのレスポンスをそのまま流す\n- Logging→集約シンクでBigQueryにレコードを追加する\n\nFunctionsを新たに作らなくても良いしとりあえずの生データも保存できるしわりと省力で実現できるかと考えた\n\nある程度動作確認して問題なかったので自分のブログの全URLで実行したら次のようなエラーが出てしまった\n\n```shell\nExecution failed or cancelled.\nin step \"call_workflow_api\", routine \"call_workflow\", line: 88\nin step \"collect_hatena_bookmark_workflow\", routine \"main\", line: 35\n{\n  \"message\": \"Execution failed or cancelled.\",\n  \"operation\": {\n    \"argument\": \"{\\\"target_url\\\":\\\"https://swfz.hatenablog.com/entry/2018/12/22/080733\\\"}\",\n    \"endTime\": \"2021-07-10T12:01:03.749667278Z\",\n    \"error\": {\n      \"payload\": \"{\\\"message\\\":\\\"ResourceLimitError: Memory usage limit exceeded\\\",\\\"tags\\\":[\\\"ResourceLimitError\\\"]}\",\n      \"stackTrace\": {}\n    },\n    \"name\": \"projects/1111111111111/locations/us-central1/workflows/collect_hatena_bookmark_metrics/executions/c4a686eb-4d92-4e95-94f6-4257438131e0\",\n    \"startTime\": \"2021-07-10T12:01:02.693637032Z\",\n    \"state\": \"FAILED\",\n    \"workflowRevisionId\": \"000001-331\"\n  },\n  \"tags\": [\n    \"OperationError\"\n  ]\n}\n```\n\nバズって300前後のブックマークが付いたURLのレスポンスで発生した\n\n[割り当てと上限  |  ワークフロー  |  Google Cloud](https://cloud.google.com/workflows/quotas)\n\n変数のメモリ割り当てにも上限があり64KBまでらしい\n\nなのでAPIのレスポンスが64KB以上ある場合はエラーになってしまう…\n\nFunctionsは経由するがFunctionsからLoggingへ直接流すようにするか?と思ったが\n\n[割り当てと上限  |  Cloud Logging  |  Google Cloud](https://cloud.google.com/logging/quotas?hl=ja)\n\n同じようにLoggingにも割り当て上限があるのでこの辺も考慮できていないといけない\n\nこの辺まで調べて面倒になってきてしまいこの手法は諦めた\n\nメモリリミットに達してしまったため回避方法はなさそう…APIのレスポンスをそのままWorkflows上でよしなにやるパターンは厳しいという結論になりました\n\nWorkflowsはあくまで各処理のオーケストレーションなのでWorkflows内にあまり処理を持ち込むべきではないっていう考え方なのかなと推測\n\n結局こういうパターンはFunctionsでGCSにデータ置く+BigQueryへloadってパターンがベターなのかな",
          "date": "2021-07-13",
          "title": "Workflowsで Memory usage limit exeeded",
          "tags": ["Workflows", "GoogleCloudPlatform"],
          "description": "失敗記録",
          "slug": "/entries/workflows_logging_bigquery_failed/",
          "timeToRead": 2,
          "objectID": "ac419206-6eea-559a-82a6-992344e0e64d",
          "_snippetResult": {
            "text": {
              "value": "\nはてなブログのAPIなど公開のAPIをたたいてそのレスポンスをそのまま__ais-highlight__B__/ais-highlight__igQueryに突っ込むみたいなやつ\n\nプライベート",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/workflows_logging___ais-highlight__b__/ais-highlight__igquery_failed/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\nはてなブログのAPIなど公開のAPIをたたいてそのレスポンスをそのまま__ais-highlight__B__/ais-highlight__igQueryに突っ込むみたいなやつ\n\nプライベートなのと規模感が小さいのでちょっと冒険的な感じでやってみようと次のような構成で試みた\n\n- Workflowsではてなブックマークの公開APIをたたく\n- WorkflowsのログにAPIのレスポンスをそのまま流す\n- Logging→集約シンクで__ais-highlight__B__/ais-highlight__igQueryにレコードを追加する\n\nFunctionsを新たに作らなくても良いしとりあえずの生データも保存できるしわりと省力で実現できるかと考えた\n\nある程度動作確認して問題なかったので自分のブログの全URLで実行したら次のようなエラーが出てしまった\n\n```shell\nExecution failed or cancelled.\nin step \"call_workflow_api\", routine \"call_workflow\", line: 88\nin step \"collect_hatena___ais-highlight__b__/ais-highlight__ookmark_workflow\", routine \"main\", line: 35\n{\n  \"message\": \"Execution failed or cancelled.\",\n  \"operation\": {\n    \"argument\": \"{\\\"target_url\\\":\\\"https://swfz.hatenablog.com/entry/2018/12/22/080733\\\"}\",\n    \"endTime\": \"2021-07-10T12:01:03.749667278Z\",\n    \"error\": {\n      \"payload\": \"{\\\"message\\\":\\\"ResourceLimitError: Memory usage limit exceeded\\\",\\\"tags\\\":[\\\"ResourceLimitError\\\"]}\",\n      \"stackTrace\": {}\n    },\n    \"name\": \"projects/1111111111111/locations/us-central1/workflows/collect_hatena___ais-highlight__b__/ais-highlight__ookmark_metrics/executions/c4a686eb-4d92-4e95-94f6-4257438131e0\",\n    \"startTime\": \"2021-07-10T12:01:02.693637032Z\",\n    \"state\": \"FAILED\",\n    \"workflowRevisionId\": \"000001-331\"\n  },\n  \"tags\": [\n    \"OperationError\"\n  ]\n}\n```\n\nバズって300前後のブックマークが付いたURLのレスポンスで発生した\n\n[割り当てと上限  |  ワークフロー  |  Google Cloud](https://cloud.google.com/workflows/quotas)\n\n変数のメモリ割り当てにも上限があり64KBまでらしい\n\nなのでAPIのレスポンスが64KB以上ある場合はエラーになってしまう…\n\nFunctionsは経由するがFunctionsからLoggingへ直接流すようにするか?と思ったが\n\n[割り当てと上限  |  Cloud Logging  |  Google Cloud](https://cloud.google.com/logging/quotas?hl=ja)\n\n同じようにLoggingにも割り当て上限があるのでこの辺も考慮できていないといけない\n\nこの辺まで調べて面倒になってきてしまいこの手法は諦めた\n\nメモリリミットに達してしまったため回避方法はなさそう…APIのレスポンスをそのままWorkflows上でよしなにやるパターンは厳しいという結論になりました\n\nWorkflowsはあくまで各処理のオーケストレーションなのでWorkflows内にあまり処理を持ち込むべきではないっていう考え方なのかなと推測\n\n結局こういうパターンはFunctionsでGCSにデータ置く+__ais-highlight__B__/ais-highlight__igQueryへloadってパターンがベターなのかな",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2021-07-13",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Workflowsで Memory usage limit exeeded",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "Workflows",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "失敗記録",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/workflows_logging___ais-highlight__b__/ais-highlight__igquery_failed/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "2",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/terraform_gcs_backend/",
          "text": "\n環境ごとにバックエンドの設定を変えたりする場合などに有効\n\n- backend.tf\n\n```terraform\nterraform {\n  backend \"gcs\" {\n  }\n}\n```\n\n## ファイルから設定する\n\n- backend-config.tfvars\n\n```tfvars\nbucket = \"hoge-tfstate\"\nprefix = \"prefix-hoge\"\n```\n\n```shell\nterraform init -backend-config=backend-config.tfvars\n```\n\n## コマンドラインから設定する\n\n```shell\nterraform init -backend-config=\"bucket=hoge-tfstate\" -backend-config=\"prefix=prefix-hoge\"\n```\n",
          "date": "2021-04-07",
          "title": "Terraform+GCSでバックエンドの設定をCLIで行う",
          "tags": ["Terraform", "GoogleCloudPlatform", "GCS"],
          "description": "backend-config",
          "slug": "/entries/terraform_gcs_backend/",
          "timeToRead": 1,
          "objectID": "9a0ca1bc-1a07-58e1-9626-90ce61382f87",
          "_snippetResult": {
            "text": {
              "value": "__ais-highlight__b__/ais-highlight__ackend \"gcs\" {\n  }\n}\n```\n\n## ファイルから設定する\n\n- __ais-highlight__b__/ais-highlight__ackend-config.tfvars\n\n```tfvars\n__ais-highlight__b__/ais-highlight__ucket = \"hoge-tfstate\"\nprefix = \"prefix-hoge\"\n```\n\n```shell\nterraform init -__ais-highlight__b__/ais-highlight__ackend-config=__ais-highlight__b__/ais-highlight__ackend-config.tfvars\n```\n\n## コマンドラインから設定する\n\n```shell\nterraform init -__ais-highlight__b__/ais-highlight__ackend-config=\"__ais-highlight__b__/ais-highlight__ucket=hoge",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/terraform_gcs___ais-highlight__b__/ais-highlight__ackend/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\n環境ごとにバックエンドの設定を変えたりする場合などに有効\n\n- __ais-highlight__b__/ais-highlight__ackend.tf\n\n```terraform\nterraform {\n  __ais-highlight__b__/ais-highlight__ackend \"gcs\" {\n  }\n}\n```\n\n## ファイルから設定する\n\n- __ais-highlight__b__/ais-highlight__ackend-config.tfvars\n\n```tfvars\n__ais-highlight__b__/ais-highlight__ucket = \"hoge-tfstate\"\nprefix = \"prefix-hoge\"\n```\n\n```shell\nterraform init -__ais-highlight__b__/ais-highlight__ackend-config=__ais-highlight__b__/ais-highlight__ackend-config.tfvars\n```\n\n## コマンドラインから設定する\n\n```shell\nterraform init -__ais-highlight__b__/ais-highlight__ackend-config=\"__ais-highlight__b__/ais-highlight__ucket=hoge-tfstate\" -__ais-highlight__b__/ais-highlight__ackend-config=\"prefix=prefix-hoge\"\n```\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2021-04-07",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Terraform+GCSでバックエンドの設定をCLIで行う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "Terraform",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              },
              { "value": "GCS", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "__ais-highlight__b__/ais-highlight__ackend-config",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "slug": {
              "value": "/entries/terraform_gcs___ais-highlight__b__/ais-highlight__ackend/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/ruby_progress_bar/ruby_progress_bar/",
          "text": "\n```ruby\n(1..100).each { |n| print \"#{'#' * n}#{'-' * (100 - n)} #{n}% \\r\"; sleep 1}\n```\n\n書き捨てスクリプトなどで進捗を表示させたいときなど`\\r`を末尾に付けることで再描画できるので進捗が進んでいるような見え方をさせられる\n\n![alt](ruby_progress_bar01.gif)\n",
          "date": "2021-01-23",
          "title": "Rubyで進捗表示のスクリプトを書くとき",
          "tags": ["Ruby"],
          "description": "print + \r つかう",
          "slug": "/entries/ruby_progress_bar/ruby_progress_bar/",
          "timeToRead": 1,
          "objectID": "3a2f8eb1-6650-5235-9340-825346f132c8",
          "_snippetResult": {
            "text": {
              "value": "たいときなど`\\r`を末尾に付けることで再描画できるので進捗が進んでいるような見え方をさせられる\n\n![alt](ruby_progress___ais-highlight__b__/ais-highlight__ar01.gif)\n",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/ruby_progress___ais-highlight__b__/ais-highlight__ar/ruby_progress___ais-highlight__b__/ais-highlight__ar/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\n```ruby\n(1..100).each { |n| print \"#{'#' * n}#{'-' * (100 - n)} #{n}% \\r\"; sleep 1}\n```\n\n書き捨てスクリプトなどで進捗を表示させたいときなど`\\r`を末尾に付けることで再描画できるので進捗が進んでいるような見え方をさせられる\n\n![alt](ruby_progress___ais-highlight__b__/ais-highlight__ar01.gif)\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2021-01-23",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Rubyで進捗表示のスクリプトを書くとき",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [{ "value": "Ruby", "matchLevel": "none", "matchedWords": [] }],
            "description": {
              "value": "print + \r つかう",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/ruby_progress___ais-highlight__b__/ais-highlight__ar/ruby_progress___ais-highlight__b__/ais-highlight__ar/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/s3_price_per_bucket/",
          "text": "\nかなり面倒で分かりづらかったのでメモ程度に残しておく\n\n## 手順\n### 使用状況レポートをDLする\n- [使用状況レポートのダウンロード](https://console.aws.amazon.com/billing/home#/reports/usage)\n- 次の項目を指定する\n    - サービス\n    - 使用タイプ\n    - オペレーション\n    - 期間\n    - 詳細度（粒度）\n\n`Resource`列にバケット名が入ってくるので区別する\n\n### 次の3点に関してそれぞれ使用状況レポートから計算する\n- ストレージ容量\n    - `TimedStorage-ByteHrs`などを対象\n    - バイト時間を課金GB月に変換する\n- リクエストカウント\n    - `Requests-Tier2`などを対象\n        - Tier1\n        - Tier2\n    - リクエストのタイプにより料金が違うのでそれぞれ集計し、1000リクエストごとの料金を掛け合わせる\n- データ転送量\n    - 次の3点を考慮して計算する\n        - Outに関して料金が発生する\n        - 月の使用量によってレートが変わる\n        - インターネットかリージョンかでもレートが変わる\n            - インターネット -> `DataTransfer-Out-Bytes`\n            - リージョン間 -> `AWS-Out-Bytes`,`C3DataTransfer-Out-Bytes`\n            - `S3G-DataTransfer-Out-Bytes`はリージョン間に該当すると思われる\n            - Cloudfrontへの転送は料金がかからない\n                - `CloudFront-Out-Bytes`\n\n`使用レポート`の項目を読み込んで必要な項目だけ抜き出して計算する必要がある\n\n## 参考\n\n[AWS の Amazon S3 請求および使用状況レポートを理解する - Amazon Simple Storage Service](https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/aws-usage-report-understand.html)\n\n[S3 バケットの請求および使用状況レポート - Amazon Simple Storage Service](https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/BucketBilling.html)\n\n[Amazon S3 用の AWS 使用状況レポート - Amazon Simple Storage Service](https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/aws-usage-report.html)\n\n[料金 - Amazon S3 ｜AWS](https://aws.amazon.com/jp/s3/pricing/?nc1=h_ls)\n",
          "date": "2020-07-18",
          "title": "S3利用料をバケット毎に詳細に出すための情報",
          "tags": ["AWS", "S3"],
          "description": "使用量レポートと合わせて計算する",
          "slug": "/entries/s3_price_per_bucket/",
          "timeToRead": 2,
          "objectID": "bdc0fa91-9ec4-5a0a-9c22-729b15d9b40d",
          "_snippetResult": {
            "text": {
              "value": "かリージョンかでもレートが変わる\n            - インターネット -> `DataTransfer-Out-__ais-highlight__B__/ais-highlight__ytes`\n            - リージョン間 -> `AWS-Out-__ais-highlight__B__/ais-highlight__ytes`,`C3DataTransfer-Out-__ais-highlight__B__/ais-highlight__ytes`\n            - `S3G-DataTransfer-Out-__ais-highlight__B__/ais-highlight__ytes`はリージョン間に",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/s3_price_per___ais-highlight__b__/ais-highlight__ucket/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\nかなり面倒で分かりづらかったのでメモ程度に残しておく\n\n## 手順\n### 使用状況レポートをDLする\n- [使用状況レポートのダウンロード](https://console.aws.amazon.com/__ais-highlight__b__/ais-highlight__illing/home#/reports/usage)\n- 次の項目を指定する\n    - サービス\n    - 使用タイプ\n    - オペレーション\n    - 期間\n    - 詳細度（粒度）\n\n`Resource`列にバケット名が入ってくるので区別する\n\n### 次の3点に関してそれぞれ使用状況レポートから計算する\n- ストレージ容量\n    - `TimedStorage-__ais-highlight__B__/ais-highlight__yteHrs`などを対象\n    - バイト時間を課金GB月に変換する\n- リクエストカウント\n    - `Requests-Tier2`などを対象\n        - Tier1\n        - Tier2\n    - リクエストのタイプにより料金が違うのでそれぞれ集計し、1000リクエストごとの料金を掛け合わせる\n- データ転送量\n    - 次の3点を考慮して計算する\n        - Outに関して料金が発生する\n        - 月の使用量によってレートが変わる\n        - インターネットかリージョンかでもレートが変わる\n            - インターネット -> `DataTransfer-Out-__ais-highlight__B__/ais-highlight__ytes`\n            - リージョン間 -> `AWS-Out-__ais-highlight__B__/ais-highlight__ytes`,`C3DataTransfer-Out-__ais-highlight__B__/ais-highlight__ytes`\n            - `S3G-DataTransfer-Out-__ais-highlight__B__/ais-highlight__ytes`はリージョン間に該当すると思われる\n            - Cloudfrontへの転送は料金がかからない\n                - `CloudFront-Out-__ais-highlight__B__/ais-highlight__ytes`\n\n`使用レポート`の項目を読み込んで必要な項目だけ抜き出して計算する必要がある\n\n## 参考\n\n[AWS の Amazon S3 請求および使用状況レポートを理解する - Amazon Simple Storage Service](https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/aws-usage-report-understand.html)\n\n[S3 バケットの請求および使用状況レポート - Amazon Simple Storage Service](https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/__ais-highlight__B__/ais-highlight__ucketBilling.html)\n\n[Amazon S3 用の AWS 使用状況レポート - Amazon Simple Storage Service](https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/aws-usage-report.html)\n\n[料金 - Amazon S3 ｜AWS](https://aws.amazon.com/jp/s3/pricing/?nc1=h_ls)\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2020-07-18",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "S3利用料をバケット毎に詳細に出すための情報",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "AWS", "matchLevel": "none", "matchedWords": [] },
              { "value": "S3", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "使用量レポートと合わせて計算する",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/s3_price_per___ais-highlight__b__/ais-highlight__ucket/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "2",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/react_hot_loader_should_be_patched/",
          "text": "\n次のリンクとまったく同じ状態になった\n\n[Gatsby doesn't work with React 17 RC (Error: React-Hot-Loader: AppContainer should be patched) · Issue #26979 · gatsbyjs/gatsby](https://github.com/gatsbyjs/gatsby/issues/26979)\n\nhttps://github.com/gatsbyjs/gatsby/issues/26979#issuecomment-696702777\n\nのコメントにあるようにパッケージのバージョンを上げればOKのよう\n\n`react-hot-loader`自体はgatsbyの依存モジュールで`package.json`には含まれていなかったため\n\n気にせず`yarn add`したら解決するかと思ったら解決せず…\n\n`yarn why`で確認すると2つのバージョンが混在する状態になっていた\n\n```shell\n$ yarn why react-hot-loader\nyarn why v1.22.5\n[1/4] Why do we have the module \"react-hot-loader\"...?\n[2/4] Initialising dependency graph...\n[3/4] Finding dependency...\n[4/4] Calculating file sizes...\n=> Found \"react-hot-loader@4.13.0\"\ninfo Has been hoisted to \"react-hot-loader\"\ninfo This module exists because it's specified in \"devDependencies\".\ninfo Disk size without dependencies: \"652KB\"\ninfo Disk size with unique dependencies: \"1.96MB\"\ninfo Disk size with transitive dependencies: \"2.8MB\"\ninfo Number of shared dependencies: 16\n=> Found \"gatsby#react-hot-loader@4.12.21\"\ninfo This module exists because \"gatsby\" depends on it.\ninfo Disk size without dependencies: \"288KB\"\ninfo Disk size with unique dependencies: \"1.61MB\"\ninfo Disk size with transitive dependencies: \"2.45MB\"\ninfo Number of shared dependencies: 16\nDone in 1.94s.\n```\n\n新たにインストールしたほうは呼ばれていないっぽい\n\nということで次の記事を参考にして`yarn.lock`の`gatsby#react-hot-loader`の部分を削除して再度`yarn install`で解決した\n\n[yarn upgrade で更新できない間接的な依存パッケージだけをアップグレードするには - Qiita](https://qiita.com/uasi/items/ca440a750a77ca62321b)\n\n[https://qiita.com/uasi/items/ca440a750a77ca62321b:embed:cite]\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\n直接`yarn.lock`触るのはちょっと気が引けたので別の機会で他の方法がないか調べてみようと思う\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->",
          "date": "2020-11-15",
          "title": "Error: React-Hot-Loader: AppContainer should be patched",
          "tags": ["Gatsby", "Yarn", "Node"],
          "description": "yarn whyでチェック",
          "slug": "/entries/react_hot_loader_should_be_patched/",
          "timeToRead": 2,
          "objectID": "a61de203-87d7-50d7-9527-092862613f1f",
          "_snippetResult": {
            "text": {
              "value": "hot-loader\"...?\n[2/4] Initialising dependency graph...\n[3/4] Finding dependency...\n[4/4] Calculating file sizes...\n=> Found \"react-hot-loader@4.13.0\"\ninfo Has __ais-highlight__b__/ais-highlight__een hoisted to \"react-hot-loader\"\ninfo This module exists __ais-highlight__b__/ais-highlight__ecause it's specified in \"devDependencies\".\ninfo Disk size without dependencies: \"652KB\"\ninfo Disk size",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/react_hot_loader_should___ais-highlight__b__/ais-highlight__e_patched/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\n次のリンクとまったく同じ状態になった\n\n[Gatsby doesn't work with React 17 RC (Error: React-Hot-Loader: AppContainer should __ais-highlight__b__/ais-highlight__e patched) · Issue #26979 · gatsbyjs/gatsby](https://github.com/gatsbyjs/gatsby/issues/26979)\n\nhttps://github.com/gatsbyjs/gatsby/issues/26979#issuecomment-696702777\n\nのコメントにあるようにパッケージのバージョンを上げればOKのよう\n\n`react-hot-loader`自体はgatsbyの依存モジュールで`package.json`には含まれていなかったため\n\n気にせず`yarn add`したら解決するかと思ったら解決せず…\n\n`yarn why`で確認すると2つのバージョンが混在する状態になっていた\n\n```shell\n$ yarn why react-hot-loader\nyarn why v1.22.5\n[1/4] Why do we have the module \"react-hot-loader\"...?\n[2/4] Initialising dependency graph...\n[3/4] Finding dependency...\n[4/4] Calculating file sizes...\n=> Found \"react-hot-loader@4.13.0\"\ninfo Has __ais-highlight__b__/ais-highlight__een hoisted to \"react-hot-loader\"\ninfo This module exists __ais-highlight__b__/ais-highlight__ecause it's specified in \"devDependencies\".\ninfo Disk size without dependencies: \"652KB\"\ninfo Disk size with unique dependencies: \"1.96MB\"\ninfo Disk size with transitive dependencies: \"2.8MB\"\ninfo Number of shared dependencies: 16\n=> Found \"gatsby#react-hot-loader@4.12.21\"\ninfo This module exists __ais-highlight__b__/ais-highlight__ecause \"gatsby\" depends on it.\ninfo Disk size without dependencies: \"288KB\"\ninfo Disk size with unique dependencies: \"1.61MB\"\ninfo Disk size with transitive dependencies: \"2.45MB\"\ninfo Number of shared dependencies: 16\nDone in 1.94s.\n```\n\n新たにインストールしたほうは呼ばれていないっぽい\n\nということで次の記事を参考にして`yarn.lock`の`gatsby#react-hot-loader`の部分を削除して再度`yarn install`で解決した\n\n[yarn upgrade で更新できない間接的な依存パッケージだけをアップグレードするには - Qiita](https://qiita.com/uasi/items/ca440a750a77ca62321b)\n\n[https://qiita.com/uasi/items/ca440a750a77ca62321b:embed:cite]\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\n直接`yarn.lock`触るのはちょっと気が引けたので別の機会で他の方法がないか調べてみようと思う\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2020-11-15",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Error: React-Hot-Loader: AppContainer should __ais-highlight__b__/ais-highlight__e patched",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "tags": [
              { "value": "Gatsby", "matchLevel": "none", "matchedWords": [] },
              { "value": "Yarn", "matchLevel": "none", "matchedWords": [] },
              { "value": "Node", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "yarn whyでチェック",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/react_hot_loader_should___ais-highlight__b__/ais-highlight__e_patched/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "2",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/nextjs_export/",
          "text": "\nNext.jsでbuildした後ホスティングサービスへ配信する際の成果物指定の方法\n\nデフォルトの挙動として、`next build`ではSSRなどサーバ側も含めてビルドした成果物を`.next`に配置する\n\n[Advanced Features: Static HTML Export | Next.js](https://nextjs.org/docs/advanced-features/static-html-export)\n\n静的ファイルのみをホストしたい場合、デフォルトの`.next`を指定しても静的ファイルを配信できる状態ではないので配信できない\n\nしらなかった…\n\n## 静的ファイルだけでOKな場合（SSG）\n\n`next export`で静的ファイルを`out`に置き、`out`ディレクトリをサーブすることでページを閲覧できるようになる\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\nなのでサーバサイドでの処理が不要な場合は公式の通り`next build && next export`で静的ファイルだけを`out`ディレクトリに置き、ホスティングサービスのGit連携で成果物があるディレクトリを指定する\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n今までNext.jsで作成したサイトはVercelでしか配信したことなかったのでVercelがよしなにやってくれていたようだ\n\n今回Cloudflare Pagesで配信する際にこれを知らずにつまずいた",
          "date": "2022-09-11",
          "title": "Next.jsで静的ファイルだけ使えるようにする",
          "tags": ["Next"],
          "description": "SSG",
          "slug": "/entries/nextjs_export/",
          "timeToRead": 1,
          "objectID": "18750b2f-3c40-5983-b91c-17f31646edb6",
          "_snippetResult": {
            "text": {
              "value": "\nNext.jsで__ais-highlight__b__/ais-highlight__uildした後ホスティングサービスへ配信する際の成果物指定の方法\n\nデフォルトの挙動として、`next __ais-highlight__b__/ais-highlight__uild`ではSSRな",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/nextjs_export/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "text": {
              "value": "\nNext.jsで__ais-highlight__b__/ais-highlight__uildした後ホスティングサービスへ配信する際の成果物指定の方法\n\nデフォルトの挙動として、`next __ais-highlight__b__/ais-highlight__uild`ではSSRなどサーバ側も含めてビルドした成果物を`.next`に配置する\n\n[Advanced Features: Static HTML Export | Next.js](https://nextjs.org/docs/advanced-features/static-html-export)\n\n静的ファイルのみをホストしたい場合、デフォルトの`.next`を指定しても静的ファイルを配信できる状態ではないので配信できない\n\nしらなかった…\n\n## 静的ファイルだけでOKな場合（SSG）\n\n`next export`で静的ファイルを`out`に置き、`out`ディレクトリをサーブすることでページを閲覧できるようになる\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\nなのでサーバサイドでの処理が不要な場合は公式の通り`next __ais-highlight__b__/ais-highlight__uild && next export`で静的ファイルだけを`out`ディレクトリに置き、ホスティングサービスのGit連携で成果物があるディレクトリを指定する\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n今までNext.jsで作成したサイトはVercelでしか配信したことなかったのでVercelがよしなにやってくれていたようだ\n\n今回Cloudflare Pagesで配信する際にこれを知らずにつまずいた",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2022-09-11",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Next.jsで静的ファイルだけ使えるようにする",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [{ "value": "Next", "matchLevel": "none", "matchedWords": [] }],
            "description": {
              "value": "SSG",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/nextjs_export/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/github_projects_data_from_graphql/",
          "text": "\nGitHubのProjects（Beta）を使って自動化や集計をするなどしたい場合のメモ\n\nAPIの基本的な使い方に関しては下記を参照し、1つずつ実行していけばイメージはつかめる\n\n[APIを使ったプロジェクト（ベータ）の管理 - GitHub Docs](https://docs.github.com/ja/issues/trying-out-the-new-projects-experience/using-the-api-to-manage-projects)\n\n事前にProjectのIDだけ取得しメモしておく\n\n次のクエリ一発でだいたい必要なデータは取れそう\n\n```graphql\nquery ($project_id: ID!) {\n  node(id: $project_id) {\n    ... on ProjectNext {\n      items(first: 100) {\n        nodes {\n          title\n          createdAt\n          fieldValues(first: 8) {\n            nodes {\n              value\n              createdAt\n              projectField {\n                name\n                settings\n              }\n            }\n          }\n          content {\n            ... on Issue {\n              id\n              number\n              url\n              repository {\n                name\n              }\n              milestone {\n                id\n                title\n              }\n              createdAt\n              closed\n              closedAt\n              assignees(first: 5) {\n                nodes {\n                  name\n                }\n              }\n            }\n            ... on PullRequest {\n              id\n              number\n              url\n              assignees(first: 5) {\n                nodes {\n                  name\n                }\n              }\n              repository {\n                name\n              }\n              createdAt\n              closed\n              closedAt\n              merged\n              mergedAt\n              reviewRequests(first: 10) {\n                nodes {\n                  requestedReviewer {\n                    ... on User {\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          id\n          updatedAt\n        }\n      }\n    }\n  }\n}\n```\n\nproject_idは事前にメモしておいた値\n\nどのカラムが必要かなどは下記で`Explorer`を展開して1つずつ見ていけば把握できる\n\n[Explorer - GitHub Docs](https://docs.github.com/ja/graphql/overview/explorer)\n\nExplorerのiframeの範囲が狭くて見づらいのがちょっと不満ではあるがそれ以外は便利に使える\n\nカードに紐づくIssueやPullRequestなどの情報も取ってこれるのでフラットにして集計する前のデータとして使える\n\nとりあえずプロジェクトのデータ使って云々やりたい場合はこのくらいデータが有れば十分かなと感じる\n\n- 結果（一部抜粋）\n\n```json\n{\n  \"data\": {\n    \"node\": {\n      \"items\": {\n        \"nodes\": [\n          {\n            \"title\": \"timerの時刻がブラウザの負荷状況によってずれる\",\n            \"id\": \"PNI_xxxxxxxxxxxxxxxxxxxx\",\n            \"updatedAt\": \"2022-01-19T06:12:59Z\",\n            \"fieldValues\": {\n              \"nodes\": [\n                {\n                  \"value\": \"timerの時刻がブラウザの負荷状況によってずれる\",\n                  \"projectField\": {\n                    \"name\": \"Title\",\n                    \"settings\": \"{\\\"width\\\":319}\"\n                  }\n                },\n                {\n                  \"value\": \"98236657\",\n                  \"projectField\": {\n                    \"name\": \"Status\",\n                    \"settings\": \"{\\\"width\\\":125,\\\"options\\\":[{\\\"id\\\":\\\"xxxxxxx1\\\",\\\"name\\\":\\\"New\\\",\\\"name_html\\\":\\\"New\\\"},{\\\"id\\\":\\\"xxxxxxx2\\\",\\\"name\\\":\\\"Epic\\\",\\\"name_html\\\":\\\"Epic\\\"},{\\\"id\\\":\\\"xxxxxxx3\\\",\\\"name\\\":\\\"Idea\\\",\\\"name_html\\\":\\\"Idea\\\"},{\\\"id\\\":\\\"xxxxxxx4\\\",\\\"name\\\":\\\"Todo\\\",\\\"name_html\\\":\\\"Todo\\\"},{\\\"id\\\":\\\"xxxxxxx5\\\",\\\"name\\\":\\\"In Progress\\\",\\\"name_html\\\":\\\"In Progress\\\"},{\\\"id\\\":\\\"xxxxxxx6\\\",\\\"name\\\":\\\"Review\\\",\\\"name_html\\\":\\\"Review\\\"},{\\\"id\\\":\\\"xxxxxxx7\\\",\\\"name\\\":\\\"Done\\\",\\\"name_html\\\":\\\"Done\\\"}]}\"\n                  }\n                },\n                {\n                  \"value\": \"2\",\n                  \"projectField\": {\n                    \"name\": \"Point\",\n                    \"settings\": \"{\\\"width\\\":69}\"\n                  }\n                },\n                {\n                  \"value\": \"2022-01-01T00:00:00+00:00\",\n                  \"projectField\": {\n                    \"name\": \"Month\",\n                    \"settings\": \"null\"\n                  }\n                },\n                {\n                  \"value\": \"e9bbecfa\",\n                  \"projectField\": {\n                    \"name\": \"Iteration\",\n                    \"settings\": \"{\\\"configuration\\\":{\\\"duration\\\":14,\\\"start_day\\\":1,\\\"iterations\\\":[{\\\"id\\\":\\\"xxxxxxa\\\",\\\"title\\\":\\\"2022-01_2\\\",\\\"duration\\\":14,\\\"start_date\\\":\\\"2022-01-17\\\",\\\"title_html\\\":\\\"2022-01_2\\\"},{\\\"id\\\":\\\"xxxxxxb\\\",\\\"title\\\":\\\"2022-02_1\\\",\\\"duration\\\":14,\\\"start_date\\\":\\\"2022-01-31\\\",\\\"title_html\\\":\\\"2022-02_1\\\"},{\\\"id\\\":\\\"xxxxxxc\\\",\\\"title\\\":\\\"2022-02_2\\\",\\\"duration\\\":14,\\\"start_date\\\":\\\"2022-02-14\\\",\\\"title_html\\\":\\\"2022-02_2\\\"}],\\\"completed_iterations\\\":[{\\\"id\\\":\\\"xxxxxxd\\\",\\\"title\\\":\\\"2022-01_1\\\",\\\"duration\\\":14,\\\"start_date\\\":\\\"2022-01-03\\\",\\\"title_html\\\":\\\"2022-01_1\\\"},{\\\"id\\\":\\\"xxxxxxe\\\",\\\"title\\\":\\\"Iteration 1\\\",\\\"duration\\\":7,\\\"start_date\\\":\\\"2021-12-27\\\",\\\"title_html\\\":\\\"Iteration 1\\\"}]}}\"\n                  }\n                }\n              ]\n            },\n            \"content\": {\n              \"id\": \"I_xxxxxxxxxxxxxxxx\",\n              \"number\": 56,\n              \"url\": \"https://github.com/swfz/tools/issues/56\",\n              \"closed\": true,\n              \"closedAt\": \"2022-01-20T16:27:38Z\",\n              \"createdAt\": \"2022-01-19T06:12:59Z\",\n              \"repository\": {\n                \"name\": \"tools\"\n              },\n              \"milestone\": null,\n              \"assignees\": {\n                \"nodes\": [\n                  {\n                    \"name\": \"swfz\"\n                  }\n                ]\n              }\n            }\n          },\n          .....\n          .....\n          .....\n          .....\n```\n\nまた、実際にこのデータを用いて何かやるなら100件以上のデータが存在することのほうが多いはずなのでページングにも対応したクエリにする必要があるが今回はここまで\n",
          "date": "2022-01-21",
          "title": "GitHub Projects(beta)のデータを収集する",
          "tags": ["GitHub", "GraphQL"],
          "description": "Explorerが便利",
          "slug": "/entries/github_projects_data_from_graphql/",
          "timeToRead": 3,
          "objectID": "4c05ffd1-8ca9-53f5-80d3-ef7e8a28dac6",
          "_snippetResult": {
            "text": {
              "value": "\nGitHubのProjects（__ais-highlight__B__/ais-highlight__eta）を使って自動化や集計をするなどしたい場合のメモ\n\nAPIの基本的な使い方に関しては下記を参照し、1つ",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/github_projects_data_from_graphql/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "text": {
              "value": "\nGitHubのProjects（__ais-highlight__B__/ais-highlight__eta）を使って自動化や集計をするなどしたい場合のメモ\n\nAPIの基本的な使い方に関しては下記を参照し、1つずつ実行していけばイメージはつかめる\n\n[APIを使ったプロジェクト（ベータ）の管理 - GitHub Docs](https://docs.github.com/ja/issues/trying-out-the-new-projects-experience/using-the-api-to-manage-projects)\n\n事前にProjectのIDだけ取得しメモしておく\n\n次のクエリ一発でだいたい必要なデータは取れそう\n\n```graphql\nquery ($project_id: ID!) {\n  node(id: $project_id) {\n    ... on ProjectNext {\n      items(first: 100) {\n        nodes {\n          title\n          createdAt\n          fieldValues(first: 8) {\n            nodes {\n              value\n              createdAt\n              projectField {\n                name\n                settings\n              }\n            }\n          }\n          content {\n            ... on Issue {\n              id\n              number\n              url\n              repository {\n                name\n              }\n              milestone {\n                id\n                title\n              }\n              createdAt\n              closed\n              closedAt\n              assignees(first: 5) {\n                nodes {\n                  name\n                }\n              }\n            }\n            ... on PullRequest {\n              id\n              number\n              url\n              assignees(first: 5) {\n                nodes {\n                  name\n                }\n              }\n              repository {\n                name\n              }\n              createdAt\n              closed\n              closedAt\n              merged\n              mergedAt\n              reviewRequests(first: 10) {\n                nodes {\n                  requestedReviewer {\n                    ... on User {\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          id\n          updatedAt\n        }\n      }\n    }\n  }\n}\n```\n\nproject_idは事前にメモしておいた値\n\nどのカラムが必要かなどは下記で`Explorer`を展開して1つずつ見ていけば把握できる\n\n[Explorer - GitHub Docs](https://docs.github.com/ja/graphql/overview/explorer)\n\nExplorerのiframeの範囲が狭くて見づらいのがちょっと不満ではあるがそれ以外は便利に使える\n\nカードに紐づくIssueやPullRequestなどの情報も取ってこれるのでフラットにして集計する前のデータとして使える\n\nとりあえずプロジェクトのデータ使って云々やりたい場合はこのくらいデータが有れば十分かなと感じる\n\n- 結果（一部抜粋）\n\n```json\n{\n  \"data\": {\n    \"node\": {\n      \"items\": {\n        \"nodes\": [\n          {\n            \"title\": \"timerの時刻がブラウザの負荷状況によってずれる\",\n            \"id\": \"PNI_xxxxxxxxxxxxxxxxxxxx\",\n            \"updatedAt\": \"2022-01-19T06:12:59Z\",\n            \"fieldValues\": {\n              \"nodes\": [\n                {\n                  \"value\": \"timerの時刻がブラウザの負荷状況によってずれる\",\n                  \"projectField\": {\n                    \"name\": \"Title\",\n                    \"settings\": \"{\\\"width\\\":319}\"\n                  }\n                },\n                {\n                  \"value\": \"98236657\",\n                  \"projectField\": {\n                    \"name\": \"Status\",\n                    \"settings\": \"{\\\"width\\\":125,\\\"options\\\":[{\\\"id\\\":\\\"xxxxxxx1\\\",\\\"name\\\":\\\"New\\\",\\\"name_html\\\":\\\"New\\\"},{\\\"id\\\":\\\"xxxxxxx2\\\",\\\"name\\\":\\\"Epic\\\",\\\"name_html\\\":\\\"Epic\\\"},{\\\"id\\\":\\\"xxxxxxx3\\\",\\\"name\\\":\\\"Idea\\\",\\\"name_html\\\":\\\"Idea\\\"},{\\\"id\\\":\\\"xxxxxxx4\\\",\\\"name\\\":\\\"Todo\\\",\\\"name_html\\\":\\\"Todo\\\"},{\\\"id\\\":\\\"xxxxxxx5\\\",\\\"name\\\":\\\"In Progress\\\",\\\"name_html\\\":\\\"In Progress\\\"},{\\\"id\\\":\\\"xxxxxxx6\\\",\\\"name\\\":\\\"Review\\\",\\\"name_html\\\":\\\"Review\\\"},{\\\"id\\\":\\\"xxxxxxx7\\\",\\\"name\\\":\\\"Done\\\",\\\"name_html\\\":\\\"Done\\\"}]}\"\n                  }\n                },\n                {\n                  \"value\": \"2\",\n                  \"projectField\": {\n                    \"name\": \"Point\",\n                    \"settings\": \"{\\\"width\\\":69}\"\n                  }\n                },\n                {\n                  \"value\": \"2022-01-01T00:00:00+00:00\",\n                  \"projectField\": {\n                    \"name\": \"Month\",\n                    \"settings\": \"null\"\n                  }\n                },\n                {\n                  \"value\": \"e9bbecfa\",\n                  \"projectField\": {\n                    \"name\": \"Iteration\",\n                    \"settings\": \"{\\\"configuration\\\":{\\\"duration\\\":14,\\\"start_day\\\":1,\\\"iterations\\\":[{\\\"id\\\":\\\"xxxxxxa\\\",\\\"title\\\":\\\"2022-01_2\\\",\\\"duration\\\":14,\\\"start_date\\\":\\\"2022-01-17\\\",\\\"title_html\\\":\\\"2022-01_2\\\"},{\\\"id\\\":\\\"xxxxxxb\\\",\\\"title\\\":\\\"2022-02_1\\\",\\\"duration\\\":14,\\\"start_date\\\":\\\"2022-01-31\\\",\\\"title_html\\\":\\\"2022-02_1\\\"},{\\\"id\\\":\\\"xxxxxxc\\\",\\\"title\\\":\\\"2022-02_2\\\",\\\"duration\\\":14,\\\"start_date\\\":\\\"2022-02-14\\\",\\\"title_html\\\":\\\"2022-02_2\\\"}],\\\"completed_iterations\\\":[{\\\"id\\\":\\\"xxxxxxd\\\",\\\"title\\\":\\\"2022-01_1\\\",\\\"duration\\\":14,\\\"start_date\\\":\\\"2022-01-03\\\",\\\"title_html\\\":\\\"2022-01_1\\\"},{\\\"id\\\":\\\"xxxxxxe\\\",\\\"title\\\":\\\"Iteration 1\\\",\\\"duration\\\":7,\\\"start_date\\\":\\\"2021-12-27\\\",\\\"title_html\\\":\\\"Iteration 1\\\"}]}}\"\n                  }\n                }\n              ]\n            },\n            \"content\": {\n              \"id\": \"I_xxxxxxxxxxxxxxxx\",\n              \"number\": 56,\n              \"url\": \"https://github.com/swfz/tools/issues/56\",\n              \"closed\": true,\n              \"closedAt\": \"2022-01-20T16:27:38Z\",\n              \"createdAt\": \"2022-01-19T06:12:59Z\",\n              \"repository\": {\n                \"name\": \"tools\"\n              },\n              \"milestone\": null,\n              \"assignees\": {\n                \"nodes\": [\n                  {\n                    \"name\": \"swfz\"\n                  }\n                ]\n              }\n            }\n          },\n          .....\n          .....\n          .....\n          .....\n```\n\nまた、実際にこのデータを用いて何かやるなら100件以上のデータが存在することのほうが多いはずなのでページングにも対応したクエリにする必要があるが今回はここまで\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2022-01-21",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "GitHub Projects(__ais-highlight__b__/ais-highlight__eta)のデータを収集する",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "tags": [
              { "value": "GitHub", "matchLevel": "none", "matchedWords": [] },
              { "value": "GraphQL", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "Explorerが便利",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/github_projects_data_from_graphql/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "timeToRead": {
              "value": "3",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        }
      ],
      "nbHits": 108,
      "page": 0,
      "nbPages": 6,
      "hitsPerPage": 20,
      "exhaustiveNbHits": true,
      "exhaustiveTypo": true,
      "exhaustive": { "nbHits": true, "typo": true },
      "query": "B",
      "params": "facets=%5B%5D&highlightPostTag=__%2Fais-highlight__&highlightPreTag=__ais-highlight__&query=B&tagFilters=",
      "index": "til",
      "renderingContent": {},
      "processingTimeMS": 18,
      "processingTimingsMS": {
        "afterFetch": {
          "format": { "highlighting": 5, "snippeting": 9, "total": 16 },
          "total": 16
        },
        "getIdx": { "load": { "total": 1 }, "total": 1 },
        "total": 18
      }
    },
    {
      "hits": [
        {
          "url": "https://til.swfz.io//entries/bigquery_sa_permission_from_cli/",
          "text": "\n特定のデータセット、特定サービスアカウントにREADやWRITE権限を与える\n\n`bq show`で対象データセットの設定を出力、中身の`access`に対象サービスアカウントのメールアドレスをと権限を追加して`bq update`\n\n```shell\nbq show --format=prettyjson memo-111111:sample  > sample.json\n```\n\n- sample.json\n\n```json\n\"access\": [\n  ...\n  ...\n  ...\n    {\n      \"role\": \"READER\",\n      \"userByEmail\": \"github-actions-sample-nokey@memo-111111.iam.gserviceaccount.com\"\n    }\n]\n```\n\n```shell\nbq update --source sample.json sample\n```\n\n## 確認\n\n対象サービスアカウントで実行した\n\n- bq ls\n\n```txt\n  datasetId  \n ----------- \n  sample     \n```\n\n- クエリ\n\n```shell\nbq query --nouse_legacy_sql 'select * from sample.summary'\n```\n\n```\n+------+-------+----+\n| view | title | id |\n+------+-------+----+\n|    3 | fuga  |  2 |\n|    3 | foo   |  4 |\n|    4 | piyo  |  3 |\n|    5 | hoge  |  1 |\n|    5 | bar   |  5 |\n+------+-------+----+\n```\n\nできた\n\n最近GitHubActionsのOIDC認証でCI用のサービスアカウントに対してクエリできるようにする + データセット単位で権限を絞るところまで行ったのでメモ\n\n個人使用ならこれで問題ないかなーという感じ",
          "date": "2022-10-12",
          "title": "BigQueryで特定データセットに権限を付与する",
          "tags": ["BigQuery", "GoogleCloudPlatform"],
          "description": "bq show + bq update",
          "slug": "/entries/bigquery_sa_permission_from_cli/",
          "timeToRead": 1,
          "objectID": "dafae263-fb55-5d08-bf9f-17c62c276690",
          "_snippetResult": {
            "text": {
              "value": "shell\n__ais-highlight__b__/ais-highlight__q update --source sample.json sample\n```\n\n## 確認\n\n対象サービスアカウントで実行した\n\n- __ais-highlight__b__/ais-highlight__q ls\n\n```txt\n  datasetId  \n ----------- \n  sample     \n```\n\n- クエリ\n\n```shell\n__ais-highlight__b__/ais-highlight__q query --nouse_legacy_sql 'select * from sample.summary'\n```\n\n```\n+------+-------+----+\n| view | title | id |\n+------+-------+----+\n|    3 | fuga  |  2 |\n|    3",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__b__/ais-highlight__igquery_sa_permission_from_cli/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\n特定のデータセット、特定サービスアカウントにREADやWRITE権限を与える\n\n`__ais-highlight__b__/ais-highlight__q show`で対象データセットの設定を出力、中身の`access`に対象サービスアカウントのメールアドレスをと権限を追加して`__ais-highlight__b__/ais-highlight__q update`\n\n```shell\n__ais-highlight__b__/ais-highlight__q show --format=prettyjson memo-111111:sample  > sample.json\n```\n\n- sample.json\n\n```json\n\"access\": [\n  ...\n  ...\n  ...\n    {\n      \"role\": \"READER\",\n      \"userByEmail\": \"github-actions-sample-nokey@memo-111111.iam.gserviceaccount.com\"\n    }\n]\n```\n\n```shell\n__ais-highlight__b__/ais-highlight__q update --source sample.json sample\n```\n\n## 確認\n\n対象サービスアカウントで実行した\n\n- __ais-highlight__b__/ais-highlight__q ls\n\n```txt\n  datasetId  \n ----------- \n  sample     \n```\n\n- クエリ\n\n```shell\n__ais-highlight__b__/ais-highlight__q query --nouse_legacy_sql 'select * from sample.summary'\n```\n\n```\n+------+-------+----+\n| view | title | id |\n+------+-------+----+\n|    3 | fuga  |  2 |\n|    3 | foo   |  4 |\n|    4 | piyo  |  3 |\n|    5 | hoge  |  1 |\n|    5 | __ais-highlight__b__/ais-highlight__ar   |  5 |\n+------+-------+----+\n```\n\nできた\n\n最近GitHubActionsのOIDC認証でCI用のサービスアカウントに対してクエリできるようにする + データセット単位で権限を絞るところまで行ったのでメモ\n\n個人使用ならこれで問題ないかなーという感じ",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2022-10-12",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "__ais-highlight__B__/ais-highlight__igQueryで特定データセットに権限を付与する",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "tags": [
              {
                "value": "__ais-highlight__B__/ais-highlight__igQuery",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["b"]
              },
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "__ais-highlight__b__/ais-highlight__q show + __ais-highlight__b__/ais-highlight__q update",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "slug": {
              "value": "/entries/__ais-highlight__b__/ais-highlight__igquery_sa_permission_from_cli/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/basic_auth_in_node_fetch/",
          "text": "\n## auth用の文字列の生成\n\n今どきは`new Buffer`ではないらしい\n\n次のようなWarningが出力される\n\n```\n(node:22161) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.\n(Use `node --trace-deprecation ...` to show where the warning was created)\n```\n\nということで下記のように認証用の文字列を生成する\n\n```javascript\nconst buffer = Buffer.from(`username:token`);\nconst authString = buffer.toString('base64');\n```\n\n## リクエスト\n\n```javascript\nconst request = async () => {\n  const res = await fetch(`https://example.com`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': `Basic ${authString}`\n    }\n  });\n\n  return await res.json();\n}\n\n(async () => {\n  const json = request();\n  console.log(json);\n})();\n```\n\nheadersの`Authorization`にユーザー名とTOKENやパスワードを`:`でつなげbase64した文字列を入れる\n\nそれだけ",
          "date": "2021-06-22",
          "title": "node-fetchでBasicAuthする",
          "tags": ["Node", "BasicAuth", "node-fetch"],
          "description": "base64してHeaderに設定",
          "slug": "/entries/basic_auth_in_node_fetch/",
          "timeToRead": 1,
          "objectID": "bb031fa1-6d38-58ed-b5ce-bd3d972ac6ec",
          "_snippetResult": {
            "text": {
              "value": "new __ais-highlight__B__/ais-highlight__uffer`ではないらしい\n\n次のようなWarningが出力される\n\n```\n(node:22161) [DEP0005] DeprecationWarning: __ais-highlight__B__/ais-highlight__uffer() is deprecated due to security and usability issues. Please use the __ais-highlight__B__/ais-highlight__uffer.alloc(), __ais-highlight__B__/ais-highlight__uffer.allocUnsafe(), or __ais-highlight__B__/ais-highlight__uffer.from() methods instead.\n(Use `node --trace-deprecation",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__b__/ais-highlight__asic_auth_in_node_fetch/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\n## auth用の文字列の生成\n\n今どきは`new __ais-highlight__B__/ais-highlight__uffer`ではないらしい\n\n次のようなWarningが出力される\n\n```\n(node:22161) [DEP0005] DeprecationWarning: __ais-highlight__B__/ais-highlight__uffer() is deprecated due to security and usability issues. Please use the __ais-highlight__B__/ais-highlight__uffer.alloc(), __ais-highlight__B__/ais-highlight__uffer.allocUnsafe(), or __ais-highlight__B__/ais-highlight__uffer.from() methods instead.\n(Use `node --trace-deprecation ...` to show where the warning was created)\n```\n\nということで下記のように認証用の文字列を生成する\n\n```javascript\nconst __ais-highlight__b__/ais-highlight__uffer = __ais-highlight__B__/ais-highlight__uffer.from(`username:token`);\nconst authString = __ais-highlight__b__/ais-highlight__uffer.toString('__ais-highlight__b__/ais-highlight__ase64');\n```\n\n## リクエスト\n\n```javascript\nconst request = async () => {\n  const res = await fetch(`https://example.com`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': `__ais-highlight__B__/ais-highlight__asic ${authString}`\n    }\n  });\n\n  return await res.json();\n}\n\n(async () => {\n  const json = request();\n  console.log(json);\n})();\n```\n\nheadersの`Authorization`にユーザー名とTOKENやパスワードを`:`でつなげ__ais-highlight__b__/ais-highlight__ase64した文字列を入れる\n\nそれだけ",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2021-06-22",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "node-fetchで__ais-highlight__B__/ais-highlight__asicAuthする",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "tags": [
              { "value": "Node", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "__ais-highlight__B__/ais-highlight__asicAuth",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["b"]
              },
              {
                "value": "node-fetch",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "__ais-highlight__b__/ais-highlight__ase64してHeaderに設定",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "slug": {
              "value": "/entries/__ais-highlight__b__/ais-highlight__asic_auth_in_node_fetch/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/bq_load_with_hive_partition/",
          "text": "\nLakeにデータを置いた日付をBQ上でカラムとして扱いたかったのでHiveパーティショニングモードでbq loadした時のメモ\n\n`${BUCKET_NAME}`, `${GOOGLE_PROJECT}`は適宜読み替える\n\n最初に環境変数へ入れておいたりしておくとよいかも\n\n```shell\nexport BUCKET_NAME=hoge\nexport GOOGLE_PROJECT=sample-project\n```\n\n- GCS側のディレクトリ構造\n\n```shell\n$ gsutil ls gs://${BUCKET_NAME}/items/\ngs://${BUCKET_NAME}/items/dt=2022-02-15/\ngs://${BUCKET_NAME}/items/dt=2022-02-25/\ngs://${BUCKET_NAME}/items/dt=2022-02-26/\ngs://${BUCKET_NAME}/items/dt=2022-02-27/\ngs://${BUCKET_NAME}/items/dt=2022-03-04/\ngs://${BUCKET_NAME}/items/dt=2022-04-01/\n```\n\n`xx=yy`という形式でオブジェクトを配置することでよしなにパーティショニングしてくれる\n\n各ディレクトリにはCSVが置いてある\n\n今回の例ではresponseというカラムにAPIのレスポンスがすべて入っているという感じ（JSON型を使ってみたかった）\n\n- schema.json\n\n```json\n[\n  {\n    \"mode\": \"NULLABLE\",\n    \"name\": \"response\",\n    \"type\": \"JSON\"\n  }\n]\n```\n\n- load\n\n```shell\nbq load --replace --source_format=CSV \\\n  --hive_partitioning_mode=AUTO \\\n  --hive_partitioning_source_uri_prefix=gs://${BUCKET_NAME}/items/ \\\n  ${GOOGLE_PROJECT}:sample_datalake.test_raw_items \"gs://${BUCKET_NAME}/items/*.csv\" ./schema.json\n```\n\n\n- 結果\n\n```shell\n$ bq show --format=prettyjson sample_datalake.test_raw_items\n{\n  \"creationTime\": \"1661458822114\",\n  \"etag\": \"hODI6PUMYlQYOpdjjEYedQ==\",\n  \"id\": \"sample-project:sample_datalake.test_raw_items\",\n  \"kind\": \"bigquery#table\",\n  \"lastModifiedTime\": \"1661458822114\",\n  \"location\": \"asia-northeast1\",\n  \"numActiveLogicalBytes\": \"27655304\",\n  \"numBytes\": \"27655304\",\n  \"numLongTermBytes\": \"0\",\n  \"numLongTermLogicalBytes\": \"0\",\n  \"numRows\": \"471\",\n  \"numTotalLogicalBytes\": \"27655304\",\n  \"schema\": {\n    \"fields\": [\n      {\n        \"mode\": \"NULLABLE\",\n        \"name\": \"response\",\n        \"type\": \"JSON\"\n      },\n      {\n        \"mode\": \"NULLABLE\",\n        \"name\": \"dt\",\n        \"type\": \"DATE\"\n      }\n    ]\n  },\n  \"selfLink\": \"https://bigquery.googleapis.com/bigquery/v2/projects/sample-project/datasets/sample_datalake/tables/test_raw_items\",\n  \"tableReference\": {\n    \"datasetId\": \"sample_datalake\",\n    \"projectId\": \"sample-project\",\n    \"tableId\": \"test_raw_items\"\n  },\n  \"type\": \"TABLE\"\n}\n```\n\nこれでOK\n\n`dt`を日付としてクエリできるようになった\n\n### 参考\n\n[外部パーティション分割データの読み込み  |  BigQuery  |  Google Cloud](https://cloud.google.com/bigquery/docs/hive-partitioned-loads-gcs?hl=ja#bq)\n",
          "date": "2022-08-31",
          "title": "Hiveパーティショニングモードでbq load",
          "tags": ["BigQuery", "Hive", "GoogleCloudPlatform"],
          "description": "メモ",
          "slug": "/entries/bq_load_with_hive_partition/",
          "timeToRead": 2,
          "objectID": "9e5019bb-8515-53fd-8b93-60b420100d66",
          "_snippetResult": {
            "text": {
              "value": "gs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/\ngs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/dt=2022-02-15/\ngs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/dt=2022-02-25/\ngs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/dt=2022-02-26/\ngs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/dt=2022-02-27/\ngs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/dt=2022-03-04",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__b__/ais-highlight__q_load_with_hive_partition/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\nLakeにデータを置いた日付を__ais-highlight__B__/ais-highlight__Q上でカラムとして扱いたかったのでHiveパーティショニングモードで__ais-highlight__b__/ais-highlight__q loadした時のメモ\n\n`${__ais-highlight__B__/ais-highlight__UCKET_NAME}`, `${GOOGLE_PROJECT}`は適宜読み替える\n\n最初に環境変数へ入れておいたりしておくとよいかも\n\n```shell\nexport __ais-highlight__B__/ais-highlight__UCKET_NAME=hoge\nexport GOOGLE_PROJECT=sample-project\n```\n\n- GCS側のディレクトリ構造\n\n```shell\n$ gsutil ls gs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/\ngs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/dt=2022-02-15/\ngs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/dt=2022-02-25/\ngs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/dt=2022-02-26/\ngs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/dt=2022-02-27/\ngs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/dt=2022-03-04/\ngs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/dt=2022-04-01/\n```\n\n`xx=yy`という形式でオブジェクトを配置することでよしなにパーティショニングしてくれる\n\n各ディレクトリにはCSVが置いてある\n\n今回の例ではresponseというカラムにAPIのレスポンスがすべて入っているという感じ（JSON型を使ってみたかった）\n\n- schema.json\n\n```json\n[\n  {\n    \"mode\": \"NULLABLE\",\n    \"name\": \"response\",\n    \"type\": \"JSON\"\n  }\n]\n```\n\n- load\n\n```shell\n__ais-highlight__b__/ais-highlight__q load --replace --source_format=CSV \\\n  --hive_partitioning_mode=AUTO \\\n  --hive_partitioning_source_uri_prefix=gs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/ \\\n  ${GOOGLE_PROJECT}:sample_datalake.test_raw_items \"gs://${__ais-highlight__B__/ais-highlight__UCKET_NAME}/items/*.csv\" ./schema.json\n```\n\n\n- 結果\n\n```shell\n$ __ais-highlight__b__/ais-highlight__q show --format=prettyjson sample_datalake.test_raw_items\n{\n  \"creationTime\": \"1661458822114\",\n  \"etag\": \"hODI6PUMYlQYOpdjjEYedQ==\",\n  \"id\": \"sample-project:sample_datalake.test_raw_items\",\n  \"kind\": \"__ais-highlight__b__/ais-highlight__igquery#table\",\n  \"lastModifiedTime\": \"1661458822114\",\n  \"location\": \"asia-northeast1\",\n  \"numActiveLogicalBytes\": \"27655304\",\n  \"numBytes\": \"27655304\",\n  \"numLongTermBytes\": \"0\",\n  \"numLongTermLogicalBytes\": \"0\",\n  \"numRows\": \"471\",\n  \"numTotalLogicalBytes\": \"27655304\",\n  \"schema\": {\n    \"fields\": [\n      {\n        \"mode\": \"NULLABLE\",\n        \"name\": \"response\",\n        \"type\": \"JSON\"\n      },\n      {\n        \"mode\": \"NULLABLE\",\n        \"name\": \"dt\",\n        \"type\": \"DATE\"\n      }\n    ]\n  },\n  \"selfLink\": \"https://__ais-highlight__b__/ais-highlight__igquery.googleapis.com/__ais-highlight__b__/ais-highlight__igquery/v2/projects/sample-project/datasets/sample_datalake/tables/test_raw_items\",\n  \"tableReference\": {\n    \"datasetId\": \"sample_datalake\",\n    \"projectId\": \"sample-project\",\n    \"tableId\": \"test_raw_items\"\n  },\n  \"type\": \"TABLE\"\n}\n```\n\nこれでOK\n\n`dt`を日付としてクエリできるようになった\n\n### 参考\n\n[外部パーティション分割データの読み込み  |  __ais-highlight__B__/ais-highlight__igQuery  |  Google Cloud](https://cloud.google.com/__ais-highlight__b__/ais-highlight__igquery/docs/hive-partitioned-loads-gcs?hl=ja#__ais-highlight__b__/ais-highlight__q)\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2022-08-31",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Hiveパーティショニングモードで__ais-highlight__b__/ais-highlight__q load",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "tags": [
              {
                "value": "__ais-highlight__B__/ais-highlight__igQuery",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["b"]
              },
              { "value": "Hive", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "メモ",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/__ais-highlight__b__/ais-highlight__q_load_with_hive_partition/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "2",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/bigquery_empty_string_array/",
          "text": "\n[配列関数  |  BigQuery  |  Google Cloud](https://cloud.google.com/bigquery/docs/reference/standard-sql/array_functions?hl=ja)\n\nGENERATE_ARRAYで作るとINT64の空配列になってしまう\n\n```sql\nSELECT GENERATE_ARRAY(1,0,1) AS tags\n```\n\nUNIONなどで文字列の配列と結合させようとすると型が合わなくなってしまう\n\n## 例\n\n```sql\nSELECT ['a','b'] AS tags\nUNION ALL\nSELECT GENERATE_ARRAY(1,0,1) AS tags\n```\n\n- 結果\n\n```\n Column 1 in UNION ALL has incompatible types: ARRAY<STRING>, ARRAY<INT64> at [3:1] \n```\n\n[Create empty string array BigQuery - Stack Overflow](https://stackoverflow.com/questions/58504188/create-empty-string-array-bigquery)\n\nこまったときのstackoverflow、答えが書いてありました\n\n```sql\nSELECT ARRAY<STRING>[] AS tags\n```\n\nでSTRINGの空配列を生成できる\n\n解決！\n",
          "date": "2022-07-22",
          "title": "BigQueryでStringの空配列を生成する",
          "tags": ["BigQuery", "GoogleCloudPlatform"],
          "description": "ARRAY",
          "slug": "/entries/bigquery_empty_string_array/",
          "timeToRead": 1,
          "objectID": "94f95f4a-5e85-5917-a74f-84500c7a5783",
          "_snippetResult": {
            "text": {
              "value": "\n[配列関数  |  __ais-highlight__B__/ais-highlight__igQuery  |  Google Cloud](https://cloud.google.com/__ais-highlight__b__/ais-highlight__igquery/docs/reference/standard-sql/array_functions?hl=ja)\n\nGENERATE_ARRAYで作るとINT64の空配列になってしまう\n\n```sql\nSELECT GENERATE_ARRAY(1,0,1) AS tags\n```\n\nUNIONな",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__b__/ais-highlight__igquery_empty_string_array/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\n[配列関数  |  __ais-highlight__B__/ais-highlight__igQuery  |  Google Cloud](https://cloud.google.com/__ais-highlight__b__/ais-highlight__igquery/docs/reference/standard-sql/array_functions?hl=ja)\n\nGENERATE_ARRAYで作るとINT64の空配列になってしまう\n\n```sql\nSELECT GENERATE_ARRAY(1,0,1) AS tags\n```\n\nUNIONなどで文字列の配列と結合させようとすると型が合わなくなってしまう\n\n## 例\n\n```sql\nSELECT ['a','__ais-highlight__b__/ais-highlight__'] AS tags\nUNION ALL\nSELECT GENERATE_ARRAY(1,0,1) AS tags\n```\n\n- 結果\n\n```\n Column 1 in UNION ALL has incompatible types: ARRAY<STRING>, ARRAY<INT64> at [3:1] \n```\n\n[Create empty string array __ais-highlight__B__/ais-highlight__igQuery - Stack Overflow](https://stackoverflow.com/questions/58504188/create-empty-string-array-__ais-highlight__b__/ais-highlight__igquery)\n\nこまったときのstackoverflow、答えが書いてありました\n\n```sql\nSELECT ARRAY<STRING>[] AS tags\n```\n\nでSTRINGの空配列を生成できる\n\n解決！\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2022-07-22",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "__ais-highlight__B__/ais-highlight__igQueryでStringの空配列を生成する",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "tags": [
              {
                "value": "__ais-highlight__B__/ais-highlight__igQuery",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["b"]
              },
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "ARRAY",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/__ais-highlight__b__/ais-highlight__igquery_empty_string_array/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/bigquery_cant_use_autodetect/",
          "text": "\nPocketのデータをAPIで取得してBigQueryに突っ込もうとしたときの話\n\nGCSにJSONを置いてCLIから`bq load --autodetect`でデータをloadしようとしたらエラーで怒られた\n\n```\nBigQuery error in load operation: Error processing job\n'project-111111:bqjob_r70118be7bda78ce4_000001793f9c2946_1': Error while reading\ndata, error message: JSON table encountered too many errors, giving up. Rows: 1;\nerrors: 1. Please look into the errors[] collection for more details.\nFailure details:\n- Error while reading data, error message: JSON processing\nencountered too many errors, giving up. Rows: 1; errors: 1; max\nbad: 0; error percent: 0\n- gs://sample-bucket/preprocessed_rawdata/month=2021-05-01/raw-04.json: Error\nwhile reading data, error message: JSON parsing error in row\nstarting at position 0: JSON object specified for non-record field:\nlist.videos\n```\n\n## 前提\n\n現状あるデータは次の3つ（bucket名はサンプル）\n\n```\ngs://sample-bucket/preprocessed_rawdata/month=2021-05-01/raw-03.json\ngs://sample-bucket/preprocessed_rawdata/month=2021-05-01/raw-04.json\ngs://sample-bucket/preprocessed_rawdata/month=2021-05-01/raw-05.json\n```\n\n## 原因の切り分け\n\n- raw-03.json\n- raw-04.json\n\nのときは問題なくloadできている\n\n`raw-05.json`\n\nが追加されてから上記エラーになってしまった\n\n05と03,04のJSONの中身を比べてみたところ05には`list.videos`がすべて`[]`になっていた\n\n03,04に関してはどこかのレコードでオブジェクトが入っていたので`RECORD`と判断された模様\n\nこのことから`--autodetect`は最初のファイルをautodetectで読み込んで順番にその他ファイルも読み込んでいると考えられる\n\n[スキーマの自動検出](https://cloud.google.com/bigquery/docs/schema-detect?hl=ja#auto-detect)\n\nここに説明が書いてあった\n\n> 自動検出を有効にすると、BigQuery はデータソース内でランダムにファイルを選択します。ファイルの最大 100 行をスキャンして代表的なサンプルとして使用し、推定プロセスを開始します。BigQuery は、各フィールドを検証し、そのサンプル内の値に基づいてそのフィールドにデータ型を割り当てようとします。\n\nランダムでファイルを読み込むとあるので全パターンを網羅したデータがあるファイルじゃないファイルがサンプルに選定されてしまった場合にこういうことが起きる\n\nそうなると`autodetect`は使えないのでテーブル作成→loadの手順を踏む必要がある\n\n- schemaの取り出し\n\nうまく行ったパターンで生成したテーブルのスキーマを取得する\n\n```\nbq show --schema --format=prettyjson pocket.rawdata > pocket-rawdata.json\n```\n\n- テーブル作成\n\n別のテーブルを用意して試してみる\n\n```\nbq mk --table --time_partitioning_field month --time_partitioning_type MONTH sample.pocket_rawdata pocket-rawdata.json\n```\n\n- load\n\n```\nbq load --source_format=NEWLINE_DELIMITED_JSON --replace sample.pocket_rawdata 'gs://sample-bucket/preprocessed_rawdata/*'\n```\n\n今のところこんな感じでなんとかなっている\n\n## まとめ\n\n取り込み対象のデータにばらつきがある（あるデータではRECORD、あるデータでは`[]`のようなとき）とサンプリング次第で取り込めない場合がある\n\nさらに`--autodetect`+`--replace`を用いると毎回ロード時に自動検出するので失敗する可能性がある\n\nそのためスキーマを定義してテーブルの作成+`bq load`と手順を踏む必要がある\n\n## 所感\n\n本来だったら`autodetect`で生成したスキーマからさらに精査して本当に`NULLABLE`?みたいな話も考えたほうが良いが今回は趣味プロジェクトなので…\n\nautodetectは便利だけどこういうパターンに対応できないのでやはりPOCやお試しのときくらいしか使えないよなーとあらためて感じた\n\nまぁでも気軽に試せるのはとても良いことなので使い分けが大事",
          "date": "2021-05-08",
          "title": "BigQueryのbq load時にautodetectを使えない場合",
          "tags": ["BigQuery", "GoogleCloudPlatform"],
          "description": "データにばらつきがありautodetectが使えないパターン",
          "slug": "/entries/bigquery_cant_use_autodetect/",
          "timeToRead": 3,
          "objectID": "6c49c87d-a92d-51b8-863d-7251544ccc40",
          "_snippetResult": {
            "text": {
              "value": "list.videos\n```\n\n## 前提\n\n現状あるデータは次の3つ（__ais-highlight__b__/ais-highlight__ucket名はサンプル）\n\n```\ngs://sample-__ais-highlight__b__/ais-highlight__ucket/preprocessed_rawdata/month=2021-05-01/raw-03.json\ngs://sample-__ais-highlight__b__/ais-highlight__ucket/preprocessed_rawdata/month=2021-05-01/raw-04.json\ngs://sample-__ais-highlight__b__/ais-highlight__ucket",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__b__/ais-highlight__igquery_cant_use_autodetect/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\nPocketのデータをAPIで取得して__ais-highlight__B__/ais-highlight__igQueryに突っ込もうとしたときの話\n\nGCSにJSONを置いてCLIから`__ais-highlight__b__/ais-highlight__q load --autodetect`でデータをloadしようとしたらエラーで怒られた\n\n```\n__ais-highlight__B__/ais-highlight__igQuery error in load operation: Error processing job\n'project-111111:__ais-highlight__b__/ais-highlight__qjob_r70118be7bda78ce4_000001793f9c2946_1': Error while reading\ndata, error message: JSON table encountered too many errors, giving up. Rows: 1;\nerrors: 1. Please look into the errors[] collection for more details.\nFailure details:\n- Error while reading data, error message: JSON processing\nencountered too many errors, giving up. Rows: 1; errors: 1; max\n__ais-highlight__b__/ais-highlight__ad: 0; error percent: 0\n- gs://sample-__ais-highlight__b__/ais-highlight__ucket/preprocessed_rawdata/month=2021-05-01/raw-04.json: Error\nwhile reading data, error message: JSON parsing error in row\nstarting at position 0: JSON object specified for non-record field:\nlist.videos\n```\n\n## 前提\n\n現状あるデータは次の3つ（__ais-highlight__b__/ais-highlight__ucket名はサンプル）\n\n```\ngs://sample-__ais-highlight__b__/ais-highlight__ucket/preprocessed_rawdata/month=2021-05-01/raw-03.json\ngs://sample-__ais-highlight__b__/ais-highlight__ucket/preprocessed_rawdata/month=2021-05-01/raw-04.json\ngs://sample-__ais-highlight__b__/ais-highlight__ucket/preprocessed_rawdata/month=2021-05-01/raw-05.json\n```\n\n## 原因の切り分け\n\n- raw-03.json\n- raw-04.json\n\nのときは問題なくloadできている\n\n`raw-05.json`\n\nが追加されてから上記エラーになってしまった\n\n05と03,04のJSONの中身を比べてみたところ05には`list.videos`がすべて`[]`になっていた\n\n03,04に関してはどこかのレコードでオブジェクトが入っていたので`RECORD`と判断された模様\n\nこのことから`--autodetect`は最初のファイルをautodetectで読み込んで順番にその他ファイルも読み込んでいると考えられる\n\n[スキーマの自動検出](https://cloud.google.com/__ais-highlight__b__/ais-highlight__igquery/docs/schema-detect?hl=ja#auto-detect)\n\nここに説明が書いてあった\n\n> 自動検出を有効にすると、__ais-highlight__B__/ais-highlight__igQuery はデータソース内でランダムにファイルを選択します。ファイルの最大 100 行をスキャンして代表的なサンプルとして使用し、推定プロセスを開始します。__ais-highlight__B__/ais-highlight__igQuery は、各フィールドを検証し、そのサンプル内の値に基づいてそのフィールドにデータ型を割り当てようとします。\n\nランダムでファイルを読み込むとあるので全パターンを網羅したデータがあるファイルじゃないファイルがサンプルに選定されてしまった場合にこういうことが起きる\n\nそうなると`autodetect`は使えないのでテーブル作成→loadの手順を踏む必要がある\n\n- schemaの取り出し\n\nうまく行ったパターンで生成したテーブルのスキーマを取得する\n\n```\n__ais-highlight__b__/ais-highlight__q show --schema --format=prettyjson pocket.rawdata > pocket-rawdata.json\n```\n\n- テーブル作成\n\n別のテーブルを用意して試してみる\n\n```\n__ais-highlight__b__/ais-highlight__q mk --table --time_partitioning_field month --time_partitioning_type MONTH sample.pocket_rawdata pocket-rawdata.json\n```\n\n- load\n\n```\n__ais-highlight__b__/ais-highlight__q load --source_format=NEWLINE_DELIMITED_JSON --replace sample.pocket_rawdata 'gs://sample-__ais-highlight__b__/ais-highlight__ucket/preprocessed_rawdata/*'\n```\n\n今のところこんな感じでなんとかなっている\n\n## まとめ\n\n取り込み対象のデータにばらつきがある（あるデータではRECORD、あるデータでは`[]`のようなとき）とサンプリング次第で取り込めない場合がある\n\nさらに`--autodetect`+`--replace`を用いると毎回ロード時に自動検出するので失敗する可能性がある\n\nそのためスキーマを定義してテーブルの作成+`__ais-highlight__b__/ais-highlight__q load`と手順を踏む必要がある\n\n## 所感\n\n本来だったら`autodetect`で生成したスキーマからさらに精査して本当に`NULLABLE`?みたいな話も考えたほうが良いが今回は趣味プロジェクトなので…\n\nautodetectは便利だけどこういうパターンに対応できないのでやはりPOCやお試しのときくらいしか使えないよなーとあらためて感じた\n\nまぁでも気軽に試せるのはとても良いことなので使い分けが大事",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2021-05-08",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "__ais-highlight__B__/ais-highlight__igQueryの__ais-highlight__b__/ais-highlight__q load時にautodetectを使えない場合",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "tags": [
              {
                "value": "__ais-highlight__B__/ais-highlight__igQuery",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["b"]
              },
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "データにばらつきがありautodetectが使えないパターン",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/__ais-highlight__b__/ais-highlight__igquery_cant_use_autodetect/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "3",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/bigquery_date_function/",
          "text": "\nよく使うと思われるクエリをメモしておく\n\n```sql\nSELECT\nDATE_TRUNC(CURRENT_DATE(), MONTH) AS first_day, # 月初\nLAST_DAY(CURRENT_DATE(), MONTH) AS last_day, # 月末\nDATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY), MONTH) AS first_day_of_yesterday, # 前日起算の月初\nLAST_DAY(DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY), MONTH) AS last_day_of_yesterday, # 前日起算の月末\nDATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH), MONTH) AS first_day_of_last_three_month # 3ヶ月前の月初\n```\n\nDATE_TRUNC, LAST_DAYが便利",
          "date": "2022-03-25",
          "title": "BigQueryの日付を扱う際のメモ",
          "tags": ["BigQuery", "GoogleCloudPlatform", "SQL"],
          "description": "スニペット的なやつ",
          "slug": "/entries/bigquery_date_function/",
          "timeToRead": 1,
          "objectID": "6539d73b-40f3-50ab-8340-44ae50b6b75b",
          "_snippetResult": {
            "text": {
              "value": "\nよく使うと思われるクエリをメモしておく\n\n```sql\nSELECT\nDATE_TRUNC(CURRENT_DATE(), MONTH) AS first_day, # 月初\nLAST_DAY(CURRENT_DATE(), MONTH) AS last_day, # 月末\nDATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__b__/ais-highlight__igquery_date_function/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\nよく使うと思われるクエリをメモしておく\n\n```sql\nSELECT\nDATE_TRUNC(CURRENT_DATE(), MONTH) AS first_day, # 月初\nLAST_DAY(CURRENT_DATE(), MONTH) AS last_day, # 月末\nDATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY), MONTH) AS first_day_of_yesterday, # 前日起算の月初\nLAST_DAY(DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY), MONTH) AS last_day_of_yesterday, # 前日起算の月末\nDATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 3 MONTH), MONTH) AS first_day_of_last_three_month # 3ヶ月前の月初\n```\n\nDATE_TRUNC, LAST_DAYが便利",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2022-03-25",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "__ais-highlight__B__/ais-highlight__igQueryの日付を扱う際のメモ",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "tags": [
              {
                "value": "__ais-highlight__B__/ais-highlight__igQuery",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["b"]
              },
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              },
              { "value": "SQL", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "スニペット的なやつ",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/__ais-highlight__b__/ais-highlight__igquery_date_function/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/bigquery_sample_data/",
          "text": "\n簡易的にでもサンプルデータが欲しい場合、わざわざデータを入れ込まなくてもサンプルデータを生成できる\n\n```sql\nWITH sample AS(\n  SELECT * FROM UNNEST(ARRAY<STRUCT<start_date DATE, end_date DATE, item STRING, sales INT64>>\n    [\n      (\"2020-08-01\", \"2020-11-30\", \"hoge\", 100),\n      (\"2020-10-01\", \"2020-10-31\", \"fuga\", 200)\n    ]\n  )\n)\nSELECT * FROM sample\n```\n\n- 結果\n\n|start_date|end_date|item|sales|\n|---|---|---|---|\n|2020-08-01|2020-11-30|hoge|100|\n|2020-10-01|2020-10-31|fuga|200|\n\n\n記事書くときや説明とかに使える\n",
          "date": "2020-12-09",
          "title": "BigQueryでサンプルデータをサクッと作る",
          "tags": ["BigQuery", "SQL"],
          "description": "WITH,UNNEST,ARRAY,STRUCTでやる",
          "slug": "/entries/bigquery_sample_data/",
          "timeToRead": 1,
          "objectID": "095f8841-166b-5319-8f30-c135a7d6b56b",
          "_snippetResult": {
            "text": {
              "value": "\n簡易的にでもサンプルデータが欲しい場合、わざわざデータを入れ込まなくてもサンプルデータを生成できる\n\n```sql",
              "matchLevel": "none"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__b__/ais-highlight__igquery_sample_data/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\n簡易的にでもサンプルデータが欲しい場合、わざわざデータを入れ込まなくてもサンプルデータを生成できる\n\n```sql\nWITH sample AS(\n  SELECT * FROM UNNEST(ARRAY<STRUCT<start_date DATE, end_date DATE, item STRING, sales INT64>>\n    [\n      (\"2020-08-01\", \"2020-11-30\", \"hoge\", 100),\n      (\"2020-10-01\", \"2020-10-31\", \"fuga\", 200)\n    ]\n  )\n)\nSELECT * FROM sample\n```\n\n- 結果\n\n|start_date|end_date|item|sales|\n|---|---|---|---|\n|2020-08-01|2020-11-30|hoge|100|\n|2020-10-01|2020-10-31|fuga|200|\n\n\n記事書くときや説明とかに使える\n",
              "matchLevel": "none",
              "matchedWords": []
            },
            "date": {
              "value": "2020-12-09",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "__ais-highlight__B__/ais-highlight__igQueryでサンプルデータをサクッと作る",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "tags": [
              {
                "value": "__ais-highlight__B__/ais-highlight__igQuery",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["b"]
              },
              { "value": "SQL", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "WITH,UNNEST,ARRAY,STRUCTでやる",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/__ais-highlight__b__/ais-highlight__igquery_sample_data/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/bigquery_date_timezone/",
          "text": "\ndataformでsourceテーブルから中間テーブルを生成してassertionを書いていた\n\n検算したら件数が合わないなーということで調べた\n\n次のようなSQLで`from`,`to`を指定して単月分のレコードのみ抜き出すというパターン\n\n```sql\nSELECT\n  *,\n  'private' AS workspace\nFROM\n  `sample.rawdata-private`,\n  UNNEST(data) AS d\nWHERE\n  DATE(start) BETWEEN ${target_date.from}\n  AND ${target_date.to}\n```\n\n<!-- textlint-disable prh -->\nSQLXなので`target_date.to`と`target_date.from`はその時々によって変化する\n<!-- textlint-enable prh -->\n\n今回は`2021-04-01` ～ `2021-04-30`をという感じ\n\n`rawdata-private`はAPIのレスポンスをそのまま保存していて1行に`total_count`と`data`列に実際のレコードがあるので`UNNEST`してレコード数と比較することで確認している\n\n`rawdata-private`のレコードを追ってみると\n\n```json\n\"start\": \"2021-04-01T04:57:39+09:00\",\n```\n\nのデータが`DATE(start)`を通すことで`2021-03-31`になっていた\n\nなるほどUTC\n\n`DATE(start, 'Asia/Tokyo'),`でタイムゾーン指定の日付データに変換できるのでこれで対応\n\nBigQueryがDATEでよしなにやってくれた結果UTCで解釈すると`2021-03-31`となってしまうためフィルタ対象から外れてしまい、件数が合わない状態になっていた\n\n正直assertion書いてなかったら気付かなかったのでassertion大事w",
          "date": "2021-04-21",
          "title": "BigQueryで日付を扱うときはTimezoneを意識する",
          "tags": ["BigQuery", "GoogleCloudPlatform"],
          "description": "基本はUTCですねという話",
          "slug": "/entries/bigquery_date_timezone/",
          "timeToRead": 1,
          "objectID": "02883dc4-e742-5435-892c-a78e335fdde5",
          "_snippetResult": {
            "text": {
              "value": "出すというパターン\n\n```sql\nSELECT\n  *,\n  'private' AS workspace\nFROM\n  `sample.rawdata-private`,\n  UNNEST(data) AS d\nWHERE\n  DATE(start) __ais-highlight__B__/ais-highlight__ETWEEN ${target_date.from}\n  AND ${target_date.to}\n```\n\n<!-- textlint-disable prh -->\nSQLXなので`target_date.to`と`target_date.from`は",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/__ais-highlight__b__/ais-highlight__igquery_date_timezone/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\ndataformでsourceテーブルから中間テーブルを生成してassertionを書いていた\n\n検算したら件数が合わないなーということで調べた\n\n次のようなSQLで`from`,`to`を指定して単月分のレコードのみ抜き出すというパターン\n\n```sql\nSELECT\n  *,\n  'private' AS workspace\nFROM\n  `sample.rawdata-private`,\n  UNNEST(data) AS d\nWHERE\n  DATE(start) __ais-highlight__B__/ais-highlight__ETWEEN ${target_date.from}\n  AND ${target_date.to}\n```\n\n<!-- textlint-disable prh -->\nSQLXなので`target_date.to`と`target_date.from`はその時々によって変化する\n<!-- textlint-enable prh -->\n\n今回は`2021-04-01` ～ `2021-04-30`をという感じ\n\n`rawdata-private`はAPIのレスポンスをそのまま保存していて1行に`total_count`と`data`列に実際のレコードがあるので`UNNEST`してレコード数と比較することで確認している\n\n`rawdata-private`のレコードを追ってみると\n\n```json\n\"start\": \"2021-04-01T04:57:39+09:00\",\n```\n\nのデータが`DATE(start)`を通すことで`2021-03-31`になっていた\n\nなるほどUTC\n\n`DATE(start, 'Asia/Tokyo'),`でタイムゾーン指定の日付データに変換できるのでこれで対応\n\n__ais-highlight__B__/ais-highlight__igQueryがDATEでよしなにやってくれた結果UTCで解釈すると`2021-03-31`となってしまうためフィルタ対象から外れてしまい、件数が合わない状態になっていた\n\n正直assertion書いてなかったら気付かなかったのでassertion大事w",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2021-04-21",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "__ais-highlight__B__/ais-highlight__igQueryで日付を扱うときはTimezoneを意識する",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "tags": [
              {
                "value": "__ais-highlight__B__/ais-highlight__igQuery",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["b"]
              },
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "基本はUTCですねという話",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/__ais-highlight__b__/ais-highlight__igquery_date_timezone/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/filter_by_explain_result/",
          "text": "\nAWSで稼働しているRDSからgeneral logを取ってきてそのクエリログから特定のクエリを抽出してExplainの結果を判定するということをやったのでそのときやったことをメモしておく\n\n単発だったのでいくつか簡単なスクリプトを書いて対応したがしくみ化するならいろいろおもしろいかも\n\n## 前提\n\nローカルからのフォワーディングや本番サーバなどから実行するなど本番のDBに接続できる必要がある\n\ngeneral logをファイルに出力する設定をしておく必要がある\n\n## やること\n### general logの取得\n\nAPIのドキュメントは下記\n\n[Accessing Amazon RDS database log files - Amazon Relational Database Service](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html)\n\n直近24時間分のログが取れる\n\n数値はUTC時刻の範囲で出力されるっぽいので`general/mysql-general.log.0`はJSTでは`09:00`台の内容\n\n```shell\n#!/bin/bash\n\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.0  > 0.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.1  > 1.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.2  > 2.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.3  > 3.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.4  > 4.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.5  > 5.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.6  > 6.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.7  > 7.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.8  > 8.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.9  > 9.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.10 > 10.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.11 > 11.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.12 > 12.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.13 > 13.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.14 > 14.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.15 > 15.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.16 > 16.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.17 > 17.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.18 > 18.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.19 > 19.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.20 > 20.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.21 > 21.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.22 > 22.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.23 > 23.log\n```\n\n### クエリのフォーマット、フィルタリング\n\ngeneral logの形式が次のような感じなのでクエリ部分を抜き出す必要がある\n\n```\nTime                 Id Command    Argument\n                946458 Query    SELECT hoge FROM fuga....\n```\n\n[Mysql general log parser](https://gist.github.com/httpdss/948386)\n\n<!-- textlint-disable prh,spellcheck-tech-word -->\nからパーススクリプトを持ってきて配置し（mysql-general-log-parser.pl）次のようなシェルを書いた\n<!-- textlint-enable prh,spellcheck-tech-word  -->\n\n- filter_general_log.sh\n\n```shell\nfile=$1\n\nperl mysql-general-log-parser.pl $file | grep -v 'Your log message was truncated' | grep -v 'rds_heartbeat2' | grep -v 'rds_configuration' | grep -v 'mysql-connector-java' | grep -v 'EXPLAIN ' | sort | uniq > $file.query_list.txt\n```\n\n- 実行\n\n```shell\nls -l {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23}.log | awk '{print $9}' | xargs -i ./filter_general_log.sh {}\n```\n\n### 生成したファイルをマージする\n\n```\ncat *.query_list.txt > query_list.txt\n```\n\n### 特定クエリの抽出\n\n`GROUP BY`, `DISTINCT`を使用しているクエリを拾う\n\n- filter_group_by_query.py\n\n```python\nimport sqlparse\nimport sys\n\nfilepath = sys.argv[1]\n\nf = open(filepath)\nlines = f.readlines()\nf.close()\n\nfor line in lines:\n    parsed = sqlparse.parse(line)[0]\n    tokens = list(parsed.flatten())\n    is_grouped = filter(lambda t: t.match(sqlparse.tokens.Keyword, \"GROUP\\s+BY\", regex=True), tokens)\n    is_distinct = filter(lambda t: t.match(sqlparse.tokens.Name, \"DISTINCT\"), tokens)\n    if len(list(is_grouped)) > 0 or len(list(is_distinct )) > 0:\n        print(line)\n```\n\n- 実行\n\n```shell\npip install sqlparse\npython filter_group_by_query.py query_list.txt > group_by_query.txt\n```\n\n### チェック\n\nexplainの結果に`Using index for group-by`が含まれるものを抜き出す\n\n- check_group_by_query.sh\n\n```shell\n#!/bin/bash\n\nfile=$1\n\ncnt=0\ncat $file | while read line\ndo\n  cnt=`expr $cnt + 1`\n  echo $cnt\n  mysql -uhoge -P 13306 -h localhost -ppass dbname -e \"EXPLAIN $line\" | grep 'Using index for group-by'\n  if [ $? -eq 0 ]; then\n    echo \"Found Query\"\n    echo $line\n    echo $line >> result.txt\n  fi\ndone\n```\n\n- 実行\n\n```\nsh check_group_by_query.sh group_by_query.txt\n```\n\nという感じでいくつかのクエリを探すようなことをした",
          "date": "2021-02-26",
          "title": "MySQLのgenerallogから特定のSQLを抜き出す",
          "tags": ["MySQL", "Python", "AWS"],
          "description": "いろいろやる",
          "slug": "/entries/filter_by_explain_result/",
          "timeToRead": 5,
          "objectID": "98a416aa-9340-5f56-bc5c-dde7cd637e48",
          "_snippetResult": {
            "text": {
              "value": "filter_group___ais-highlight__b__/ais-highlight__y_query.py query_list.txt > group___ais-highlight__b__/ais-highlight__y_query.txt\n```\n\n### チェック\n\nexplainの結果に`Using index for group-__ais-highlight__b__/ais-highlight__y`が含まれるものを抜き出す\n\n- check_group___ais-highlight__b__/ais-highlight__y_query.sh\n\n```shell\n#!/__ais-highlight__b__/ais-highlight__in/__ais-highlight__b__/ais-highlight__ash\n\nfile=$1\n\ncnt=0",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/filter___ais-highlight__b__/ais-highlight__y_explain_result/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\nAWSで稼働しているRDSからgeneral logを取ってきてそのクエリログから特定のクエリを抽出してExplainの結果を判定するということをやったのでそのときやったことをメモしておく\n\n単発だったのでいくつか簡単なスクリプトを書いて対応したがしくみ化するならいろいろおもしろいかも\n\n## 前提\n\nローカルからのフォワーディングや本番サーバなどから実行するなど本番のDBに接続できる必要がある\n\ngeneral logをファイルに出力する設定をしておく必要がある\n\n## やること\n### general logの取得\n\nAPIのドキュメントは下記\n\n[Accessing Amazon RDS database log files - Amazon Relational Database Service](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html)\n\n直近24時間分のログが取れる\n\n数値はUTC時刻の範囲で出力されるっぽいので`general/mysql-general.log.0`はJSTでは`09:00`台の内容\n\n```shell\n#!/__ais-highlight__b__/ais-highlight__in/__ais-highlight__b__/ais-highlight__ash\n\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.0  > 0.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.1  > 1.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.2  > 2.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.3  > 3.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.4  > 4.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.5  > 5.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.6  > 6.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.7  > 7.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.8  > 8.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.9  > 9.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.10 > 10.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.11 > 11.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.12 > 12.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.13 > 13.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.14 > 14.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.15 > 15.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.16 > 16.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.17 > 17.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.18 > 18.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.19 > 19.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.20 > 20.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.21 > 21.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.22 > 22.log\naws rds download-db-log-file-portion --db-instance-identifier hoge-db --starting-token 0 --output text --log-file-name general/mysql-general.log.23 > 23.log\n```\n\n### クエリのフォーマット、フィルタリング\n\ngeneral logの形式が次のような感じなのでクエリ部分を抜き出す必要がある\n\n```\nTime                 Id Command    Argument\n                946458 Query    SELECT hoge FROM fuga....\n```\n\n[Mysql general log parser](https://gist.github.com/httpdss/948386)\n\n<!-- textlint-disable prh,spellcheck-tech-word -->\nからパーススクリプトを持ってきて配置し（mysql-general-log-parser.pl）次のようなシェルを書いた\n<!-- textlint-enable prh,spellcheck-tech-word  -->\n\n- filter_general_log.sh\n\n```shell\nfile=$1\n\nperl mysql-general-log-parser.pl $file | grep -v 'Your log message was truncated' | grep -v 'rds_heartbeat2' | grep -v 'rds_configuration' | grep -v 'mysql-connector-java' | grep -v 'EXPLAIN ' | sort | uniq > $file.query_list.txt\n```\n\n- 実行\n\n```shell\nls -l {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23}.log | awk '{print $9}' | xargs -i ./filter_general_log.sh {}\n```\n\n### 生成したファイルをマージする\n\n```\ncat *.query_list.txt > query_list.txt\n```\n\n### 特定クエリの抽出\n\n`GROUP __ais-highlight__B__/ais-highlight__Y`, `DISTINCT`を使用しているクエリを拾う\n\n- filter_group___ais-highlight__b__/ais-highlight__y_query.py\n\n```python\nimport sqlparse\nimport sys\n\nfilepath = sys.argv[1]\n\nf = open(filepath)\nlines = f.readlines()\nf.close()\n\nfor line in lines:\n    parsed = sqlparse.parse(line)[0]\n    tokens = list(parsed.flatten())\n    is_grouped = filter(lambda t: t.match(sqlparse.tokens.Keyword, \"GROUP\\s+__ais-highlight__B__/ais-highlight__Y\", regex=True), tokens)\n    is_distinct = filter(lambda t: t.match(sqlparse.tokens.Name, \"DISTINCT\"), tokens)\n    if len(list(is_grouped)) > 0 or len(list(is_distinct )) > 0:\n        print(line)\n```\n\n- 実行\n\n```shell\npip install sqlparse\npython filter_group___ais-highlight__b__/ais-highlight__y_query.py query_list.txt > group___ais-highlight__b__/ais-highlight__y_query.txt\n```\n\n### チェック\n\nexplainの結果に`Using index for group-__ais-highlight__b__/ais-highlight__y`が含まれるものを抜き出す\n\n- check_group___ais-highlight__b__/ais-highlight__y_query.sh\n\n```shell\n#!/__ais-highlight__b__/ais-highlight__in/__ais-highlight__b__/ais-highlight__ash\n\nfile=$1\n\ncnt=0\ncat $file | while read line\ndo\n  cnt=`expr $cnt + 1`\n  echo $cnt\n  mysql -uhoge -P 13306 -h localhost -ppass dbname -e \"EXPLAIN $line\" | grep 'Using index for group-__ais-highlight__b__/ais-highlight__y'\n  if [ $? -eq 0 ]; then\n    echo \"Found Query\"\n    echo $line\n    echo $line >> result.txt\n  fi\ndone\n```\n\n- 実行\n\n```\nsh check_group___ais-highlight__b__/ais-highlight__y_query.sh group___ais-highlight__b__/ais-highlight__y_query.txt\n```\n\nという感じでいくつかのクエリを探すようなことをした",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2021-02-26",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "MySQLのgenerallogから特定のSQLを抜き出す",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "MySQL", "matchLevel": "none", "matchedWords": [] },
              { "value": "Python", "matchLevel": "none", "matchedWords": [] },
              { "value": "AWS", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "いろいろやる",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/filter___ais-highlight__b__/ais-highlight__y_explain_result/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "5",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/toc_bookmarklet/",
          "text": "\n他の記事はどのような構成なんだろう？\n\n記事書くときにどのような流れが良いのかなー？\n\nと考えることがあったのでTOCを収集して傾向などを見つけてみようと思ったので掲題のブックマークレットを書いた\n\n- toc.js\n\n```javascript\n(() => {\n  const log = (msg) => { console.log(msg) };\n  log('start extract toc');\n\n  const o = (body) => {\n    const d = window.open().document;\n    d.writeln('TOC<br /><textarea cols=\"100\" rows=\"30\">' + body + '</textarea>');\n    d.close();\n  };\n\n  const toc = Array.from(document.querySelectorAll('h1,h2,h3,h4')).map(e => {\n    const n = e.tagName.replace(\"H\",\"\");\n    return `${\"#\".repeat(n)} ${e.textContent}`;\n  }).join(\"\\n\");\n  log(toc);\n  o(toc);\n})();\n```\n\nブックマークに登録するときは次のように1行にしてスペースはエスケープする\n\n```javascript\njavascript:(()%20=>%20{%20const%20log%20=%20(msg)%20=>%20{%20console.log(msg)%20};%20log('start%20extract%20toc');%20const%20o%20=%20(body)%20=>%20{%20const%20d%20=%20window.open().document;%20d.writeln('TOC<br%20/><textarea%20cols=\"100\"%20rows=\"30\">'%20+%20body%20+%20'</textarea>');%20d.close();%20};%20const%20toc%20=%20Array.from(document.querySelectorAll('h1,h2,h3,h4')).map(e%20=>%20{%20const%20n%20=%20e.tagName.replace(\"H\",\"\");%20return%20`${\"#\".repeat(n)}%20${e.textContent}`;%20}).join(\"\\n\");%20log(toc);%20o(toc);%20})();\n```\n\nこんな感じの出力が得られる\n\n```\n## WSL側\n## Xlaunch\n## WSL側\n### 参考：\n```\n\nなお、対象ページでタイトル以外にも`h2`などを付けているとその情報も入ってきてしまう\n",
          "date": "2021-06-10",
          "title": "TOCを抽出するためのブックマークレット",
          "tags": ["Bookmarklet"],
          "description": "TOC",
          "slug": "/entries/toc_bookmarklet/",
          "timeToRead": 1,
          "objectID": "6985eaba-5fc6-5c81-999d-05fab0c96a74",
          "_snippetResult": {
            "text": {
              "value": "マークレットを書いた\n\n- toc.js\n\n```javascript\n(() => {\n  const log = (msg) => { console.log(msg) };\n  log('start extract toc');\n\n  const o = (__ais-highlight__b__/ais-highlight__ody) => {\n    const d = window.open().document;\n    d.writeln('TOC' + __ais-highlight__b__/ais-highlight__ody + '');\n    d.close();\n  };\n\n  const toc = Array.from(document.querySelectorAll('h1,h2,h3,h4')).map(e => {\n    const",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/toc___ais-highlight__b__/ais-highlight__ookmarklet/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\n他の記事はどのような構成なんだろう？\n\n記事書くときにどのような流れが良いのかなー？\n\nと考えることがあったのでTOCを収集して傾向などを見つけてみようと思ったので掲題のブックマークレットを書いた\n\n- toc.js\n\n```javascript\n(() => {\n  const log = (msg) => { console.log(msg) };\n  log('start extract toc');\n\n  const o = (__ais-highlight__b__/ais-highlight__ody) => {\n    const d = window.open().document;\n    d.writeln('TOC<br /><textarea cols=\"100\" rows=\"30\">' + __ais-highlight__b__/ais-highlight__ody + '</textarea>');\n    d.close();\n  };\n\n  const toc = Array.from(document.querySelectorAll('h1,h2,h3,h4')).map(e => {\n    const n = e.tagName.replace(\"H\",\"\");\n    return `${\"#\".repeat(n)} ${e.textContent}`;\n  }).join(\"\\n\");\n  log(toc);\n  o(toc);\n})();\n```\n\nブックマークに登録するときは次のように1行にしてスペースはエスケープする\n\n```javascript\njavascript:(()%20=>%20{%20const%20log%20=%20(msg)%20=>%20{%20console.log(msg)%20};%20log('start%20extract%20toc');%20const%20o%20=%20(__ais-highlight__b__/ais-highlight__ody)%20=>%20{%20const%20d%20=%20window.open().document;%20d.writeln('TOC<br%20/><textarea%20cols=\"100\"%20rows=\"30\">'%20+%20body%20+%20'</textarea>');%20d.close();%20};%20const%20toc%20=%20Array.from(document.querySelectorAll('h1,h2,h3,h4')).map(e%20=>%20{%20const%20n%20=%20e.tagName.replace(\"H\",\"\");%20return%20`${\"#\".repeat(n)}%20${e.textContent}`;%20}).join(\"\\n\");%20log(toc);%20o(toc);%20})();\n```\n\nこんな感じの出力が得られる\n\n```\n## WSL側\n## Xlaunch\n## WSL側\n### 参考：\n```\n\nなお、対象ページでタイトル以外にも`h2`などを付けているとその情報も入ってきてしまう\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2021-06-10",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "TOCを抽出するためのブックマークレット",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "__ais-highlight__B__/ais-highlight__ookmarklet",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["b"]
              }
            ],
            "description": {
              "value": "TOC",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/toc___ais-highlight__b__/ais-highlight__ookmarklet/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/vagrant_boot_failed/",
          "text": "\nホスト機がフリーズしてしまったとかVMを正常に終了させられないまま再起動してしまったときなど\n\nごくたまにVagrantで使っているVMが起動しなくなる\n\nいくつか試してみたのでその記録\n\n本記事では`dev4`というVM名で進める\n\n```shell\n$ vagrant up\nBringing machine 'default' up with 'virtualbox' provider...\n==> default: Checking if box 'bento/centos-7.4' version '201803.24.0' is up to date...\n==> default: Clearing any previously set forwarded ports...\nThere was an error while executing `VBoxManage`, a CLI used by Vagrant\nfor controlling VirtualBox. The command and stderr is shown below.\n\nCommand: [\"modifyvm\", \"d4c26ea5-e507-4049-878a-2c89a841f9e6\", \"--natpf1\", \"delete\", \"127.0.0.1tcp22396\", \"--natpf1\", \"delete\", \"127.0.0.1tcp9200\", \"--natpf1\", \"delete\", \"127.0.0.1tcp9300\", \"--natpf1\", \"delete\", \"ssh\"]\n\nStderr: VBoxManage.exe: error: The machine 'dev4' is already locked for a session (or being unlocked)\nVBoxManage.exe: error: Details: code VBOX_E_INVALID_OBJECT_STATE (0x80bb0007), component MachineWrap, interface IMachine, callee IUnknown\nVBoxManage.exe: error: Context: \"LockMachine(a->session, LockType_Write)\" at line 554 of file VBoxManageModifyVM.cpp\n```\n\nlockされてます\n\nいくつか調べたら`poweroff`にすればよいとあったので実行してみる\n\n```shell\n$ cd /c/Program\\ Files/Oracle/VirtualBox\n$ ./VBoxManage.exe controlvm dev4 poweroff\nVBoxManage.exe: error: The virtual machine is being powered down\nVBoxManage.exe: error: Details: code VBOX_E_INVALID_VM_STATE (0x80bb0002), component ConsoleWrap, interface IConsole, callee IUnknown\nVBoxManage.exe: error: Context: \"PowerDown(progress.asOutParam())\" at line 619 of file VBoxManageControlVM.cpp\n```\n\nもう止まっているよということのよう\n\n```\n$ vagrant status\nCurrent machine states:\n\ndefault                   stopping (virtualbox)\n\nThe VM is stopping.\n```\n\n- 参考\n\n[VirtualBoxで仮想コンピュータが反応しなくなった時( = _ = )](https://qiita.com/Ikumi/items/557808a232a0c12d3027)\n\nを参考に強制的に落とす\n\n```shell\n ./VBoxManage.exe startvm dev4 --type emergencystop\n```\n\nabortedになった\n\n```shell\n$ vagrant status\nCurrent machine states:\n\ndefault                   aborted (virtualbox)\n\nThe VM is in an aborted state. This means that it was abruptly\nstopped without properly closing the session. Run `vagrant up`\nto resume this virtual machine. If any problems persist, you may\nhave to destroy and restart the virtual machine.\n```\n\nここから`vagrant up`して無事立ち上げることができた\n\n\n```\n$ vagrant up\n.....\n.....\n.....\nTimed out while waiting for the machine to boot. This means that\nVagrant was unable to communicate with the guest machine within\nthe configured (\"config.vm.boot_timeout\" value) time period.\n\nIf you look above, you should be able to see the error(s) that\nVagrant had when attempting to connect to the machine. These errors\nare usually good hints as to what may be wrong.\n\nIf you're using a custom box, make sure that networking is properly\nworking and you're able to connect to the machine. It is a common\nproblem that networking isn't setup properly in these boxes.\nVerify that authentication configurations are also setup properly,\nas well.\n\nIf the box appears to be booting properly, you may want to increase\nthe timeout (\"config.vm.boot_timeout\") value.\n```\n\nが、立ち上がったは良いがsshできないという感じになってしまった\n\nVirtualBoxからものぞいてみようと試みたがVMが完全に立ち上がらない状態で操作できず\n\n結局ホストのWindowsを完全シャットダウン（shift+シャットダウン）&起動してVM起動したら動くようになっていた\n\nただの徒労…\n",
          "date": "2021-01-26",
          "title": "VagrantのVMが立ち上がらなくなってしまったときの対処方いくつか",
          "tags": ["Vagrant", "VirtualBox"],
          "description": "最終的にはWindows再起動",
          "slug": "/entries/vagrant_boot_failed/",
          "timeToRead": 3,
          "objectID": "469d3526-3329-586f-a94e-82a9bafd627b",
          "_snippetResult": {
            "text": {
              "value": "is a common\nproblem that networking isn't setup properly in these __ais-highlight__b__/ais-highlight__oxes.\nVerify that authentication configurations are also setup properly,\nas well.\n\nIf the __ais-highlight__b__/ais-highlight__ox appears to __ais-highlight__b__/ais-highlight__e __ais-highlight__b__/ais-highlight__ooting properly, you may want to increase\nthe timeout (\"config.vm.__ais-highlight__b__/ais-highlight__oot_timeout\") value.\n```\n\nが、立ち上がった",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/vagrant___ais-highlight__b__/ais-highlight__oot_failed/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\nホスト機がフリーズしてしまったとかVMを正常に終了させられないまま再起動してしまったときなど\n\nごくたまにVagrantで使っているVMが起動しなくなる\n\nいくつか試してみたのでその記録\n\n本記事では`dev4`というVM名で進める\n\n```shell\n$ vagrant up\n__ais-highlight__B__/ais-highlight__ringing machine 'default' up with 'virtualbox' provider...\n==> default: Checking if __ais-highlight__b__/ais-highlight__ox '__ais-highlight__b__/ais-highlight__ento/centos-7.4' version '201803.24.0' is up to date...\n==> default: Clearing any previously set forwarded ports...\nThere was an error while executing `VBoxManage`, a CLI used __ais-highlight__b__/ais-highlight__y Vagrant\nfor controlling VirtualBox. The command and stderr is shown __ais-highlight__b__/ais-highlight__elow.\n\nCommand: [\"modifyvm\", \"d4c26ea5-e507-4049-878a-2c89a841f9e6\", \"--natpf1\", \"delete\", \"127.0.0.1tcp22396\", \"--natpf1\", \"delete\", \"127.0.0.1tcp9200\", \"--natpf1\", \"delete\", \"127.0.0.1tcp9300\", \"--natpf1\", \"delete\", \"ssh\"]\n\nStderr: VBoxManage.exe: error: The machine 'dev4' is already locked for a session (or __ais-highlight__b__/ais-highlight__eing unlocked)\nVBoxManage.exe: error: Details: code VBOX_E_INVALID_OBJECT_STATE (0x80bb0007), component MachineWrap, interface IMachine, callee IUnknown\nVBoxManage.exe: error: Context: \"LockMachine(a->session, LockType_Write)\" at line 554 of file VBoxManageModifyVM.cpp\n```\n\nlockされてます\n\nいくつか調べたら`poweroff`にすればよいとあったので実行してみる\n\n```shell\n$ cd /c/Program\\ Files/Oracle/VirtualBox\n$ ./VBoxManage.exe controlvm dev4 poweroff\nVBoxManage.exe: error: The virtual machine is __ais-highlight__b__/ais-highlight__eing powered down\nVBoxManage.exe: error: Details: code VBOX_E_INVALID_VM_STATE (0x80bb0002), component ConsoleWrap, interface IConsole, callee IUnknown\nVBoxManage.exe: error: Context: \"PowerDown(progress.asOutParam())\" at line 619 of file VBoxManageControlVM.cpp\n```\n\nもう止まっているよということのよう\n\n```\n$ vagrant status\nCurrent machine states:\n\ndefault                   stopping (virtualbox)\n\nThe VM is stopping.\n```\n\n- 参考\n\n[VirtualBoxで仮想コンピュータが反応しなくなった時( = _ = )](https://qiita.com/Ikumi/items/557808a232a0c12d3027)\n\nを参考に強制的に落とす\n\n```shell\n ./VBoxManage.exe startvm dev4 --type emergencystop\n```\n\nabortedになった\n\n```shell\n$ vagrant status\nCurrent machine states:\n\ndefault                   aborted (virtualbox)\n\nThe VM is in an aborted state. This means that it was abruptly\nstopped without properly closing the session. Run `vagrant up`\nto resume this virtual machine. If any problems persist, you may\nhave to destroy and restart the virtual machine.\n```\n\nここから`vagrant up`して無事立ち上げることができた\n\n\n```\n$ vagrant up\n.....\n.....\n.....\nTimed out while waiting for the machine to __ais-highlight__b__/ais-highlight__oot. This means that\nVagrant was unable to communicate with the guest machine within\nthe configured (\"config.vm.__ais-highlight__b__/ais-highlight__oot_timeout\" value) time period.\n\nIf you look above, you should __ais-highlight__b__/ais-highlight__e able to see the error(s) that\nVagrant had when attempting to connect to the machine. These errors\nare usually good hints as to what may __ais-highlight__b__/ais-highlight__e wrong.\n\nIf you're using a custom __ais-highlight__b__/ais-highlight__ox, make sure that networking is properly\nworking and you're able to connect to the machine. It is a common\nproblem that networking isn't setup properly in these __ais-highlight__b__/ais-highlight__oxes.\nVerify that authentication configurations are also setup properly,\nas well.\n\nIf the __ais-highlight__b__/ais-highlight__ox appears to __ais-highlight__b__/ais-highlight__e __ais-highlight__b__/ais-highlight__ooting properly, you may want to increase\nthe timeout (\"config.vm.__ais-highlight__b__/ais-highlight__oot_timeout\") value.\n```\n\nが、立ち上がったは良いがsshできないという感じになってしまった\n\nVirtualBoxからものぞいてみようと試みたがVMが完全に立ち上がらない状態で操作できず\n\n結局ホストのWindowsを完全シャットダウン（shift+シャットダウン）&起動してVM起動したら動くようになっていた\n\nただの徒労…\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2021-01-26",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "VagrantのVMが立ち上がらなくなってしまったときの対処方いくつか",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "Vagrant", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "VirtualBox",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "最終的にはWindows再起動",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/vagrant___ais-highlight__b__/ais-highlight__oot_failed/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "3",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/github_contribute_bookmarklet/",
          "text": "\n以前Twitterで`採用などでGitHubアカウントもらったらこのクエリでコントリビューションみますね`みたいなのを見かけた\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nとりあえずそのうち見るときのためにタブをそのままにしていたが、いろいろな人のも見られるとおもしろいかもと思ってブックマークレットを書いた\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\nユーザーページもしくは対象ユーザーのどこかのリポジトリなど、ユーザー名がURLに存在すれば実行可能\n\n- github_contribute.js\n\n```javascript\n(function(){\n  const user = window.location.href.split(\"/\")[3];\n  const excludeOrgs = [];\n  const w = window.open();\n  const excludeOrgQuery = excludeOrgs.map(o => `-org%3A${o}`).join('+');\n  w.location.href = `https://github.com/pulls?q=involves%3A${user}+-user%3A${user}+${excludeOrgQuery}`;\n})()\n```\n\n- ブックマークバーへの貼り付け用出力\n\n```shell\n$ cat github_contribute.js |  sed -e ':loop;N;$!b loop;s/\\n/ /g' -e 's/ \\+/%20/g' -e 's/^/javascript:/'\njavascript:(function(){%20const%20user%20=%20window.location.href.split(\"/\")[3];%20const%20excludeOrgs%20=%20[];%20const%20w%20=%20window.open();%20const%20excludeOrgQuery%20=%20excludeOrgs.map(o%20=>%20`-org%3A${o}`).join('+');%20w.location.href%20=%20`https://github.com/pulls?q=involves%3A${user}+-user%3A${user}+${excludeOrgQuery}`;%20})()\n```\n\n`excludeOrgs`は自分が所属している組織へのPRやissueは除外するための記述\n\nGitHubで仕事の開発している場合は対象組織のPRなども表示されてしまうのでその除外\n\n感想としては自分はあんまりコントリビュートできてません!ということがわかりました。まる。\n",
          "date": "2021-09-25",
          "title": "GitHubのコントリビュート一覧に飛ぶためのブックマークレット",
          "tags": ["Bookmarklet", "GitHub"],
          "description": "コントリビュートしたい",
          "slug": "/entries/github_contribute_bookmarklet/",
          "timeToRead": 1,
          "objectID": "faff91eb-e6c1-50b9-9e09-6076dc528ecb",
          "_snippetResult": {
            "text": {
              "value": "マークバーへの貼り付け用出力\n\n```shell\n$ cat github_contribute.js |  sed -e ':loop;N;$!__ais-highlight__b__/ais-highlight__ loop;s/\\n/ /g' -e 's/ \\+/%20/g' -e 's/^/javascript:/'\njavascript:(function(){%20const%20user%20=%20window.location.href.split(\"/\")[3];%20const%20excludeOrgs%20",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/github_contribute___ais-highlight__b__/ais-highlight__ookmarklet/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\n以前Twitterで`採用などでGitHubアカウントもらったらこのクエリでコントリビューションみますね`みたいなのを見かけた\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\nとりあえずそのうち見るときのためにタブをそのままにしていたが、いろいろな人のも見られるとおもしろいかもと思ってブックマークレットを書いた\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->\n\nユーザーページもしくは対象ユーザーのどこかのリポジトリなど、ユーザー名がURLに存在すれば実行可能\n\n- github_contribute.js\n\n```javascript\n(function(){\n  const user = window.location.href.split(\"/\")[3];\n  const excludeOrgs = [];\n  const w = window.open();\n  const excludeOrgQuery = excludeOrgs.map(o => `-org%3A${o}`).join('+');\n  w.location.href = `https://github.com/pulls?q=involves%3A${user}+-user%3A${user}+${excludeOrgQuery}`;\n})()\n```\n\n- ブックマークバーへの貼り付け用出力\n\n```shell\n$ cat github_contribute.js |  sed -e ':loop;N;$!__ais-highlight__b__/ais-highlight__ loop;s/\\n/ /g' -e 's/ \\+/%20/g' -e 's/^/javascript:/'\njavascript:(function(){%20const%20user%20=%20window.location.href.split(\"/\")[3];%20const%20excludeOrgs%20=%20[];%20const%20w%20=%20window.open();%20const%20excludeOrgQuery%20=%20excludeOrgs.map(o%20=>%20`-org%3A${o}`).join('+');%20w.location.href%20=%20`https://github.com/pulls?q=involves%3A${user}+-user%3A${user}+${excludeOrgQuery}`;%20})()\n```\n\n`excludeOrgs`は自分が所属している組織へのPRやissueは除外するための記述\n\nGitHubで仕事の開発している場合は対象組織のPRなども表示されてしまうのでその除外\n\n感想としては自分はあんまりコントリビュートできてません!ということがわかりました。まる。\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2021-09-25",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "GitHubのコントリビュート一覧に飛ぶためのブックマークレット",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "__ais-highlight__B__/ais-highlight__ookmarklet",
                "matchLevel": "full",
                "fullyHighlighted": false,
                "matchedWords": ["b"]
              },
              { "value": "GitHub", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "コントリビュートしたい",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/github_contribute___ais-highlight__b__/ais-highlight__ookmarklet/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/github_projects_batch_archive/",
          "text": "\nProjects自体はItemが1200件までしか作れない、それ以上扱いたい場合は既存のItemをDelete or Archiveしなければならない\n\nなのでArchiveするという選択肢になるが、今度は2022-08-31時点ではArchiveするAPI（mutation）がない\n\nGUIの中でBoardViewだと各リストに一括Archiveできる機能もあるがStatusかIteration単位でしかグループ化できない\n\nなのでIterationを設定する前のItemについては一括で扱うしかない状態になってしまう\n\nIteration設定されていないものを一括でArchiveするのもなんとなく嫌だなと思ったので\n\n雑だが簡単なコードを書いた\n\n## consoleでの一回の操作\n\n```javascript\n$('.menu-trigger').click()\n$('[data-test-id=\"row-menu-archive\"]').click()\n$x('//button[text()=\"Archive\"]')[0].click()\n```\n\n- メニューを出して\n- Archiveをクリックして\n- Confirmする\n\nというながれを一番上のItemで行うためのコード\n\n## まとめて操作\n\n```javascript\nfunction archive() {\n  document.querySelector('.menu-trigger').click();\n  document.querySelector('[data-test-id=\"row-menu-archive\"]').click();\n  document.evaluate('//button[text()=\"Archive\"]', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.click()\n}\n```\n\n一番上のItemをArchiveする操作を関数にまとめ\n\n```javascript\nsetInterval(archive, 2000);\n```\n\n定期実行することでたまっているItemを自動でArchiveする\n\n使い方としてはある程度フィルタリングして全件Archive\n\nあと全部ArchiveされるとItemがない状態になるので実行時エラーになる\n\n丁寧にやるならエラーをキャッチしてclearIntervalまでしてあげれば良さそうだが…\n\n## XPath周りでの差分\n\n関数化するとdevtoolで便利な`$`が使えないので一部修正した\n\nさらにXPath周りはちょっと勝手が違った\n\n- 参考\n\n[JavaScript での XPath の利用の手引き - XPath | MDN](https://developer.mozilla.org/ja/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript)\n\nただ単に`document.evaluate`するだけだと`click()`できるNodeが返却値に含まれない\n\nオプションで返却値の指定をしてNodeを取れるようにしてからノードを取得、クリックといった処理になった\n\n今回は初回に見つかったNodeだけを取得したいので`FIRST_ORDERED_NODE_TYPE`を指定し`sinbleNodeValue`でNodeを取得した\n",
          "date": "2022-09-04",
          "title": "GitHub ProjectsのItemを一括Archive",
          "tags": ["GitHub", "GitHub Projects", "JavaScript"],
          "description": "desc",
          "slug": "/entries/github_projects_batch_archive/",
          "timeToRead": 2,
          "objectID": "cccac18a-0e2e-5671-b3d2-9a1a4bc2e3fa",
          "_snippetResult": {
            "text": {
              "value": "なるが、今度は2022-08-31時点ではArchiveするAPI（mutation）がない\n\nGUIの中で__ais-highlight__B__/ais-highlight__oardViewだと各リストに一括Archiveできる機能もあるがStatusかIteration単位",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/github_projects___ais-highlight__b__/ais-highlight__atch_archive/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\nProjects自体はItemが1200件までしか作れない、それ以上扱いたい場合は既存のItemをDelete or Archiveしなければならない\n\nなのでArchiveするという選択肢になるが、今度は2022-08-31時点ではArchiveするAPI（mutation）がない\n\nGUIの中で__ais-highlight__B__/ais-highlight__oardViewだと各リストに一括Archiveできる機能もあるがStatusかIteration単位でしかグループ化できない\n\nなのでIterationを設定する前のItemについては一括で扱うしかない状態になってしまう\n\nIteration設定されていないものを一括でArchiveするのもなんとなく嫌だなと思ったので\n\n雑だが簡単なコードを書いた\n\n## consoleでの一回の操作\n\n```javascript\n$('.menu-trigger').click()\n$('[data-test-id=\"row-menu-archive\"]').click()\n$x('//__ais-highlight__b__/ais-highlight__utton[text()=\"Archive\"]')[0].click()\n```\n\n- メニューを出して\n- Archiveをクリックして\n- Confirmする\n\nというながれを一番上のItemで行うためのコード\n\n## まとめて操作\n\n```javascript\nfunction archive() {\n  document.querySelector('.menu-trigger').click();\n  document.querySelector('[data-test-id=\"row-menu-archive\"]').click();\n  document.evaluate('//__ais-highlight__b__/ais-highlight__utton[text()=\"Archive\"]', document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue.click()\n}\n```\n\n一番上のItemをArchiveする操作を関数にまとめ\n\n```javascript\nsetInterval(archive, 2000);\n```\n\n定期実行することでたまっているItemを自動でArchiveする\n\n使い方としてはある程度フィルタリングして全件Archive\n\nあと全部ArchiveされるとItemがない状態になるので実行時エラーになる\n\n丁寧にやるならエラーをキャッチしてclearIntervalまでしてあげれば良さそうだが…\n\n## XPath周りでの差分\n\n関数化するとdevtoolで便利な`$`が使えないので一部修正した\n\nさらにXPath周りはちょっと勝手が違った\n\n- 参考\n\n[JavaScript での XPath の利用の手引き - XPath | MDN](https://developer.mozilla.org/ja/docs/Web/XPath/Introduction_to_using_XPath_in_JavaScript)\n\nただ単に`document.evaluate`するだけだと`click()`できるNodeが返却値に含まれない\n\nオプションで返却値の指定をしてNodeを取れるようにしてからノードを取得、クリックといった処理になった\n\n今回は初回に見つかったNodeだけを取得したいので`FIRST_ORDERED_NODE_TYPE`を指定し`sinbleNodeValue`でNodeを取得した\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2022-09-04",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "GitHub ProjectsのItemを一括Archive",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "GitHub", "matchLevel": "none", "matchedWords": [] },
              {
                "value": "GitHub Projects",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "JavaScript",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "desc",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/github_projects___ais-highlight__b__/ais-highlight__atch_archive/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "2",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/workflows_logging_bigquery_failed/",
          "text": "\nはてなブログのAPIなど公開のAPIをたたいてそのレスポンスをそのままBigQueryに突っ込むみたいなやつ\n\nプライベートなのと規模感が小さいのでちょっと冒険的な感じでやってみようと次のような構成で試みた\n\n- Workflowsではてなブックマークの公開APIをたたく\n- WorkflowsのログにAPIのレスポンスをそのまま流す\n- Logging→集約シンクでBigQueryにレコードを追加する\n\nFunctionsを新たに作らなくても良いしとりあえずの生データも保存できるしわりと省力で実現できるかと考えた\n\nある程度動作確認して問題なかったので自分のブログの全URLで実行したら次のようなエラーが出てしまった\n\n```shell\nExecution failed or cancelled.\nin step \"call_workflow_api\", routine \"call_workflow\", line: 88\nin step \"collect_hatena_bookmark_workflow\", routine \"main\", line: 35\n{\n  \"message\": \"Execution failed or cancelled.\",\n  \"operation\": {\n    \"argument\": \"{\\\"target_url\\\":\\\"https://swfz.hatenablog.com/entry/2018/12/22/080733\\\"}\",\n    \"endTime\": \"2021-07-10T12:01:03.749667278Z\",\n    \"error\": {\n      \"payload\": \"{\\\"message\\\":\\\"ResourceLimitError: Memory usage limit exceeded\\\",\\\"tags\\\":[\\\"ResourceLimitError\\\"]}\",\n      \"stackTrace\": {}\n    },\n    \"name\": \"projects/1111111111111/locations/us-central1/workflows/collect_hatena_bookmark_metrics/executions/c4a686eb-4d92-4e95-94f6-4257438131e0\",\n    \"startTime\": \"2021-07-10T12:01:02.693637032Z\",\n    \"state\": \"FAILED\",\n    \"workflowRevisionId\": \"000001-331\"\n  },\n  \"tags\": [\n    \"OperationError\"\n  ]\n}\n```\n\nバズって300前後のブックマークが付いたURLのレスポンスで発生した\n\n[割り当てと上限  |  ワークフロー  |  Google Cloud](https://cloud.google.com/workflows/quotas)\n\n変数のメモリ割り当てにも上限があり64KBまでらしい\n\nなのでAPIのレスポンスが64KB以上ある場合はエラーになってしまう…\n\nFunctionsは経由するがFunctionsからLoggingへ直接流すようにするか?と思ったが\n\n[割り当てと上限  |  Cloud Logging  |  Google Cloud](https://cloud.google.com/logging/quotas?hl=ja)\n\n同じようにLoggingにも割り当て上限があるのでこの辺も考慮できていないといけない\n\nこの辺まで調べて面倒になってきてしまいこの手法は諦めた\n\nメモリリミットに達してしまったため回避方法はなさそう…APIのレスポンスをそのままWorkflows上でよしなにやるパターンは厳しいという結論になりました\n\nWorkflowsはあくまで各処理のオーケストレーションなのでWorkflows内にあまり処理を持ち込むべきではないっていう考え方なのかなと推測\n\n結局こういうパターンはFunctionsでGCSにデータ置く+BigQueryへloadってパターンがベターなのかな",
          "date": "2021-07-13",
          "title": "Workflowsで Memory usage limit exeeded",
          "tags": ["Workflows", "GoogleCloudPlatform"],
          "description": "失敗記録",
          "slug": "/entries/workflows_logging_bigquery_failed/",
          "timeToRead": 2,
          "objectID": "ac419206-6eea-559a-82a6-992344e0e64d",
          "_snippetResult": {
            "text": {
              "value": "\nはてなブログのAPIなど公開のAPIをたたいてそのレスポンスをそのまま__ais-highlight__B__/ais-highlight__igQueryに突っ込むみたいなやつ\n\nプライベート",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/workflows_logging___ais-highlight__b__/ais-highlight__igquery_failed/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\nはてなブログのAPIなど公開のAPIをたたいてそのレスポンスをそのまま__ais-highlight__B__/ais-highlight__igQueryに突っ込むみたいなやつ\n\nプライベートなのと規模感が小さいのでちょっと冒険的な感じでやってみようと次のような構成で試みた\n\n- Workflowsではてなブックマークの公開APIをたたく\n- WorkflowsのログにAPIのレスポンスをそのまま流す\n- Logging→集約シンクで__ais-highlight__B__/ais-highlight__igQueryにレコードを追加する\n\nFunctionsを新たに作らなくても良いしとりあえずの生データも保存できるしわりと省力で実現できるかと考えた\n\nある程度動作確認して問題なかったので自分のブログの全URLで実行したら次のようなエラーが出てしまった\n\n```shell\nExecution failed or cancelled.\nin step \"call_workflow_api\", routine \"call_workflow\", line: 88\nin step \"collect_hatena___ais-highlight__b__/ais-highlight__ookmark_workflow\", routine \"main\", line: 35\n{\n  \"message\": \"Execution failed or cancelled.\",\n  \"operation\": {\n    \"argument\": \"{\\\"target_url\\\":\\\"https://swfz.hatenablog.com/entry/2018/12/22/080733\\\"}\",\n    \"endTime\": \"2021-07-10T12:01:03.749667278Z\",\n    \"error\": {\n      \"payload\": \"{\\\"message\\\":\\\"ResourceLimitError: Memory usage limit exceeded\\\",\\\"tags\\\":[\\\"ResourceLimitError\\\"]}\",\n      \"stackTrace\": {}\n    },\n    \"name\": \"projects/1111111111111/locations/us-central1/workflows/collect_hatena___ais-highlight__b__/ais-highlight__ookmark_metrics/executions/c4a686eb-4d92-4e95-94f6-4257438131e0\",\n    \"startTime\": \"2021-07-10T12:01:02.693637032Z\",\n    \"state\": \"FAILED\",\n    \"workflowRevisionId\": \"000001-331\"\n  },\n  \"tags\": [\n    \"OperationError\"\n  ]\n}\n```\n\nバズって300前後のブックマークが付いたURLのレスポンスで発生した\n\n[割り当てと上限  |  ワークフロー  |  Google Cloud](https://cloud.google.com/workflows/quotas)\n\n変数のメモリ割り当てにも上限があり64KBまでらしい\n\nなのでAPIのレスポンスが64KB以上ある場合はエラーになってしまう…\n\nFunctionsは経由するがFunctionsからLoggingへ直接流すようにするか?と思ったが\n\n[割り当てと上限  |  Cloud Logging  |  Google Cloud](https://cloud.google.com/logging/quotas?hl=ja)\n\n同じようにLoggingにも割り当て上限があるのでこの辺も考慮できていないといけない\n\nこの辺まで調べて面倒になってきてしまいこの手法は諦めた\n\nメモリリミットに達してしまったため回避方法はなさそう…APIのレスポンスをそのままWorkflows上でよしなにやるパターンは厳しいという結論になりました\n\nWorkflowsはあくまで各処理のオーケストレーションなのでWorkflows内にあまり処理を持ち込むべきではないっていう考え方なのかなと推測\n\n結局こういうパターンはFunctionsでGCSにデータ置く+__ais-highlight__B__/ais-highlight__igQueryへloadってパターンがベターなのかな",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2021-07-13",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Workflowsで Memory usage limit exeeded",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "Workflows",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              }
            ],
            "description": {
              "value": "失敗記録",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/workflows_logging___ais-highlight__b__/ais-highlight__igquery_failed/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "2",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/terraform_gcs_backend/",
          "text": "\n環境ごとにバックエンドの設定を変えたりする場合などに有効\n\n- backend.tf\n\n```terraform\nterraform {\n  backend \"gcs\" {\n  }\n}\n```\n\n## ファイルから設定する\n\n- backend-config.tfvars\n\n```tfvars\nbucket = \"hoge-tfstate\"\nprefix = \"prefix-hoge\"\n```\n\n```shell\nterraform init -backend-config=backend-config.tfvars\n```\n\n## コマンドラインから設定する\n\n```shell\nterraform init -backend-config=\"bucket=hoge-tfstate\" -backend-config=\"prefix=prefix-hoge\"\n```\n",
          "date": "2021-04-07",
          "title": "Terraform+GCSでバックエンドの設定をCLIで行う",
          "tags": ["Terraform", "GoogleCloudPlatform", "GCS"],
          "description": "backend-config",
          "slug": "/entries/terraform_gcs_backend/",
          "timeToRead": 1,
          "objectID": "9a0ca1bc-1a07-58e1-9626-90ce61382f87",
          "_snippetResult": {
            "text": {
              "value": "__ais-highlight__b__/ais-highlight__ackend \"gcs\" {\n  }\n}\n```\n\n## ファイルから設定する\n\n- __ais-highlight__b__/ais-highlight__ackend-config.tfvars\n\n```tfvars\n__ais-highlight__b__/ais-highlight__ucket = \"hoge-tfstate\"\nprefix = \"prefix-hoge\"\n```\n\n```shell\nterraform init -__ais-highlight__b__/ais-highlight__ackend-config=__ais-highlight__b__/ais-highlight__ackend-config.tfvars\n```\n\n## コマンドラインから設定する\n\n```shell\nterraform init -__ais-highlight__b__/ais-highlight__ackend-config=\"__ais-highlight__b__/ais-highlight__ucket=hoge",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/terraform_gcs___ais-highlight__b__/ais-highlight__ackend/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\n環境ごとにバックエンドの設定を変えたりする場合などに有効\n\n- __ais-highlight__b__/ais-highlight__ackend.tf\n\n```terraform\nterraform {\n  __ais-highlight__b__/ais-highlight__ackend \"gcs\" {\n  }\n}\n```\n\n## ファイルから設定する\n\n- __ais-highlight__b__/ais-highlight__ackend-config.tfvars\n\n```tfvars\n__ais-highlight__b__/ais-highlight__ucket = \"hoge-tfstate\"\nprefix = \"prefix-hoge\"\n```\n\n```shell\nterraform init -__ais-highlight__b__/ais-highlight__ackend-config=__ais-highlight__b__/ais-highlight__ackend-config.tfvars\n```\n\n## コマンドラインから設定する\n\n```shell\nterraform init -__ais-highlight__b__/ais-highlight__ackend-config=\"__ais-highlight__b__/ais-highlight__ucket=hoge-tfstate\" -__ais-highlight__b__/ais-highlight__ackend-config=\"prefix=prefix-hoge\"\n```\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2021-04-07",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Terraform+GCSでバックエンドの設定をCLIで行う",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              {
                "value": "Terraform",
                "matchLevel": "none",
                "matchedWords": []
              },
              {
                "value": "GoogleCloudPlatform",
                "matchLevel": "none",
                "matchedWords": []
              },
              { "value": "GCS", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "__ais-highlight__b__/ais-highlight__ackend-config",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "slug": {
              "value": "/entries/terraform_gcs___ais-highlight__b__/ais-highlight__ackend/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/ruby_progress_bar/ruby_progress_bar/",
          "text": "\n```ruby\n(1..100).each { |n| print \"#{'#' * n}#{'-' * (100 - n)} #{n}% \\r\"; sleep 1}\n```\n\n書き捨てスクリプトなどで進捗を表示させたいときなど`\\r`を末尾に付けることで再描画できるので進捗が進んでいるような見え方をさせられる\n\n![alt](ruby_progress_bar01.gif)\n",
          "date": "2021-01-23",
          "title": "Rubyで進捗表示のスクリプトを書くとき",
          "tags": ["Ruby"],
          "description": "print + \r つかう",
          "slug": "/entries/ruby_progress_bar/ruby_progress_bar/",
          "timeToRead": 1,
          "objectID": "3a2f8eb1-6650-5235-9340-825346f132c8",
          "_snippetResult": {
            "text": {
              "value": "たいときなど`\\r`を末尾に付けることで再描画できるので進捗が進んでいるような見え方をさせられる\n\n![alt](ruby_progress___ais-highlight__b__/ais-highlight__ar01.gif)\n",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/ruby_progress___ais-highlight__b__/ais-highlight__ar/ruby_progress___ais-highlight__b__/ais-highlight__ar/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\n```ruby\n(1..100).each { |n| print \"#{'#' * n}#{'-' * (100 - n)} #{n}% \\r\"; sleep 1}\n```\n\n書き捨てスクリプトなどで進捗を表示させたいときなど`\\r`を末尾に付けることで再描画できるので進捗が進んでいるような見え方をさせられる\n\n![alt](ruby_progress___ais-highlight__b__/ais-highlight__ar01.gif)\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2021-01-23",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Rubyで進捗表示のスクリプトを書くとき",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [{ "value": "Ruby", "matchLevel": "none", "matchedWords": [] }],
            "description": {
              "value": "print + \r つかう",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/ruby_progress___ais-highlight__b__/ais-highlight__ar/ruby_progress___ais-highlight__b__/ais-highlight__ar/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/s3_price_per_bucket/",
          "text": "\nかなり面倒で分かりづらかったのでメモ程度に残しておく\n\n## 手順\n### 使用状況レポートをDLする\n- [使用状況レポートのダウンロード](https://console.aws.amazon.com/billing/home#/reports/usage)\n- 次の項目を指定する\n    - サービス\n    - 使用タイプ\n    - オペレーション\n    - 期間\n    - 詳細度（粒度）\n\n`Resource`列にバケット名が入ってくるので区別する\n\n### 次の3点に関してそれぞれ使用状況レポートから計算する\n- ストレージ容量\n    - `TimedStorage-ByteHrs`などを対象\n    - バイト時間を課金GB月に変換する\n- リクエストカウント\n    - `Requests-Tier2`などを対象\n        - Tier1\n        - Tier2\n    - リクエストのタイプにより料金が違うのでそれぞれ集計し、1000リクエストごとの料金を掛け合わせる\n- データ転送量\n    - 次の3点を考慮して計算する\n        - Outに関して料金が発生する\n        - 月の使用量によってレートが変わる\n        - インターネットかリージョンかでもレートが変わる\n            - インターネット -> `DataTransfer-Out-Bytes`\n            - リージョン間 -> `AWS-Out-Bytes`,`C3DataTransfer-Out-Bytes`\n            - `S3G-DataTransfer-Out-Bytes`はリージョン間に該当すると思われる\n            - Cloudfrontへの転送は料金がかからない\n                - `CloudFront-Out-Bytes`\n\n`使用レポート`の項目を読み込んで必要な項目だけ抜き出して計算する必要がある\n\n## 参考\n\n[AWS の Amazon S3 請求および使用状況レポートを理解する - Amazon Simple Storage Service](https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/aws-usage-report-understand.html)\n\n[S3 バケットの請求および使用状況レポート - Amazon Simple Storage Service](https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/BucketBilling.html)\n\n[Amazon S3 用の AWS 使用状況レポート - Amazon Simple Storage Service](https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/aws-usage-report.html)\n\n[料金 - Amazon S3 ｜AWS](https://aws.amazon.com/jp/s3/pricing/?nc1=h_ls)\n",
          "date": "2020-07-18",
          "title": "S3利用料をバケット毎に詳細に出すための情報",
          "tags": ["AWS", "S3"],
          "description": "使用量レポートと合わせて計算する",
          "slug": "/entries/s3_price_per_bucket/",
          "timeToRead": 2,
          "objectID": "bdc0fa91-9ec4-5a0a-9c22-729b15d9b40d",
          "_snippetResult": {
            "text": {
              "value": "かリージョンかでもレートが変わる\n            - インターネット -> `DataTransfer-Out-__ais-highlight__B__/ais-highlight__ytes`\n            - リージョン間 -> `AWS-Out-__ais-highlight__B__/ais-highlight__ytes`,`C3DataTransfer-Out-__ais-highlight__B__/ais-highlight__ytes`\n            - `S3G-DataTransfer-Out-__ais-highlight__B__/ais-highlight__ytes`はリージョン間に",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/s3_price_per___ais-highlight__b__/ais-highlight__ucket/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\nかなり面倒で分かりづらかったのでメモ程度に残しておく\n\n## 手順\n### 使用状況レポートをDLする\n- [使用状況レポートのダウンロード](https://console.aws.amazon.com/__ais-highlight__b__/ais-highlight__illing/home#/reports/usage)\n- 次の項目を指定する\n    - サービス\n    - 使用タイプ\n    - オペレーション\n    - 期間\n    - 詳細度（粒度）\n\n`Resource`列にバケット名が入ってくるので区別する\n\n### 次の3点に関してそれぞれ使用状況レポートから計算する\n- ストレージ容量\n    - `TimedStorage-__ais-highlight__B__/ais-highlight__yteHrs`などを対象\n    - バイト時間を課金GB月に変換する\n- リクエストカウント\n    - `Requests-Tier2`などを対象\n        - Tier1\n        - Tier2\n    - リクエストのタイプにより料金が違うのでそれぞれ集計し、1000リクエストごとの料金を掛け合わせる\n- データ転送量\n    - 次の3点を考慮して計算する\n        - Outに関して料金が発生する\n        - 月の使用量によってレートが変わる\n        - インターネットかリージョンかでもレートが変わる\n            - インターネット -> `DataTransfer-Out-__ais-highlight__B__/ais-highlight__ytes`\n            - リージョン間 -> `AWS-Out-__ais-highlight__B__/ais-highlight__ytes`,`C3DataTransfer-Out-__ais-highlight__B__/ais-highlight__ytes`\n            - `S3G-DataTransfer-Out-__ais-highlight__B__/ais-highlight__ytes`はリージョン間に該当すると思われる\n            - Cloudfrontへの転送は料金がかからない\n                - `CloudFront-Out-__ais-highlight__B__/ais-highlight__ytes`\n\n`使用レポート`の項目を読み込んで必要な項目だけ抜き出して計算する必要がある\n\n## 参考\n\n[AWS の Amazon S3 請求および使用状況レポートを理解する - Amazon Simple Storage Service](https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/aws-usage-report-understand.html)\n\n[S3 バケットの請求および使用状況レポート - Amazon Simple Storage Service](https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/__ais-highlight__B__/ais-highlight__ucketBilling.html)\n\n[Amazon S3 用の AWS 使用状況レポート - Amazon Simple Storage Service](https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/aws-usage-report.html)\n\n[料金 - Amazon S3 ｜AWS](https://aws.amazon.com/jp/s3/pricing/?nc1=h_ls)\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2020-07-18",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "S3利用料をバケット毎に詳細に出すための情報",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [
              { "value": "AWS", "matchLevel": "none", "matchedWords": [] },
              { "value": "S3", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "使用量レポートと合わせて計算する",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/s3_price_per___ais-highlight__b__/ais-highlight__ucket/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "2",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/react_hot_loader_should_be_patched/",
          "text": "\n次のリンクとまったく同じ状態になった\n\n[Gatsby doesn't work with React 17 RC (Error: React-Hot-Loader: AppContainer should be patched) · Issue #26979 · gatsbyjs/gatsby](https://github.com/gatsbyjs/gatsby/issues/26979)\n\nhttps://github.com/gatsbyjs/gatsby/issues/26979#issuecomment-696702777\n\nのコメントにあるようにパッケージのバージョンを上げればOKのよう\n\n`react-hot-loader`自体はgatsbyの依存モジュールで`package.json`には含まれていなかったため\n\n気にせず`yarn add`したら解決するかと思ったら解決せず…\n\n`yarn why`で確認すると2つのバージョンが混在する状態になっていた\n\n```shell\n$ yarn why react-hot-loader\nyarn why v1.22.5\n[1/4] Why do we have the module \"react-hot-loader\"...?\n[2/4] Initialising dependency graph...\n[3/4] Finding dependency...\n[4/4] Calculating file sizes...\n=> Found \"react-hot-loader@4.13.0\"\ninfo Has been hoisted to \"react-hot-loader\"\ninfo This module exists because it's specified in \"devDependencies\".\ninfo Disk size without dependencies: \"652KB\"\ninfo Disk size with unique dependencies: \"1.96MB\"\ninfo Disk size with transitive dependencies: \"2.8MB\"\ninfo Number of shared dependencies: 16\n=> Found \"gatsby#react-hot-loader@4.12.21\"\ninfo This module exists because \"gatsby\" depends on it.\ninfo Disk size without dependencies: \"288KB\"\ninfo Disk size with unique dependencies: \"1.61MB\"\ninfo Disk size with transitive dependencies: \"2.45MB\"\ninfo Number of shared dependencies: 16\nDone in 1.94s.\n```\n\n新たにインストールしたほうは呼ばれていないっぽい\n\nということで次の記事を参考にして`yarn.lock`の`gatsby#react-hot-loader`の部分を削除して再度`yarn install`で解決した\n\n[yarn upgrade で更新できない間接的な依存パッケージだけをアップグレードするには - Qiita](https://qiita.com/uasi/items/ca440a750a77ca62321b)\n\n[https://qiita.com/uasi/items/ca440a750a77ca62321b:embed:cite]\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\n直接`yarn.lock`触るのはちょっと気が引けたので別の機会で他の方法がないか調べてみようと思う\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->",
          "date": "2020-11-15",
          "title": "Error: React-Hot-Loader: AppContainer should be patched",
          "tags": ["Gatsby", "Yarn", "Node"],
          "description": "yarn whyでチェック",
          "slug": "/entries/react_hot_loader_should_be_patched/",
          "timeToRead": 2,
          "objectID": "a61de203-87d7-50d7-9527-092862613f1f",
          "_snippetResult": {
            "text": {
              "value": "hot-loader\"...?\n[2/4] Initialising dependency graph...\n[3/4] Finding dependency...\n[4/4] Calculating file sizes...\n=> Found \"react-hot-loader@4.13.0\"\ninfo Has __ais-highlight__b__/ais-highlight__een hoisted to \"react-hot-loader\"\ninfo This module exists __ais-highlight__b__/ais-highlight__ecause it's specified in \"devDependencies\".\ninfo Disk size without dependencies: \"652KB\"\ninfo Disk size",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/react_hot_loader_should___ais-highlight__b__/ais-highlight__e_patched/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "text": {
              "value": "\n次のリンクとまったく同じ状態になった\n\n[Gatsby doesn't work with React 17 RC (Error: React-Hot-Loader: AppContainer should __ais-highlight__b__/ais-highlight__e patched) · Issue #26979 · gatsbyjs/gatsby](https://github.com/gatsbyjs/gatsby/issues/26979)\n\nhttps://github.com/gatsbyjs/gatsby/issues/26979#issuecomment-696702777\n\nのコメントにあるようにパッケージのバージョンを上げればOKのよう\n\n`react-hot-loader`自体はgatsbyの依存モジュールで`package.json`には含まれていなかったため\n\n気にせず`yarn add`したら解決するかと思ったら解決せず…\n\n`yarn why`で確認すると2つのバージョンが混在する状態になっていた\n\n```shell\n$ yarn why react-hot-loader\nyarn why v1.22.5\n[1/4] Why do we have the module \"react-hot-loader\"...?\n[2/4] Initialising dependency graph...\n[3/4] Finding dependency...\n[4/4] Calculating file sizes...\n=> Found \"react-hot-loader@4.13.0\"\ninfo Has __ais-highlight__b__/ais-highlight__een hoisted to \"react-hot-loader\"\ninfo This module exists __ais-highlight__b__/ais-highlight__ecause it's specified in \"devDependencies\".\ninfo Disk size without dependencies: \"652KB\"\ninfo Disk size with unique dependencies: \"1.96MB\"\ninfo Disk size with transitive dependencies: \"2.8MB\"\ninfo Number of shared dependencies: 16\n=> Found \"gatsby#react-hot-loader@4.12.21\"\ninfo This module exists __ais-highlight__b__/ais-highlight__ecause \"gatsby\" depends on it.\ninfo Disk size without dependencies: \"288KB\"\ninfo Disk size with unique dependencies: \"1.61MB\"\ninfo Disk size with transitive dependencies: \"2.45MB\"\ninfo Number of shared dependencies: 16\nDone in 1.94s.\n```\n\n新たにインストールしたほうは呼ばれていないっぽい\n\nということで次の記事を参考にして`yarn.lock`の`gatsby#react-hot-loader`の部分を削除して再度`yarn install`で解決した\n\n[yarn upgrade で更新できない間接的な依存パッケージだけをアップグレードするには - Qiita](https://qiita.com/uasi/items/ca440a750a77ca62321b)\n\n[https://qiita.com/uasi/items/ca440a750a77ca62321b:embed:cite]\n\n<!-- textlint-disable ja-technical-writing/ja-no-weak-phrase -->\n直接`yarn.lock`触るのはちょっと気が引けたので別の機会で他の方法がないか調べてみようと思う\n<!-- textlint-enable ja-technical-writing/ja-no-weak-phrase -->",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2020-11-15",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Error: React-Hot-Loader: AppContainer should __ais-highlight__b__/ais-highlight__e patched",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "tags": [
              { "value": "Gatsby", "matchLevel": "none", "matchedWords": [] },
              { "value": "Yarn", "matchLevel": "none", "matchedWords": [] },
              { "value": "Node", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "yarn whyでチェック",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/react_hot_loader_should___ais-highlight__b__/ais-highlight__e_patched/",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "timeToRead": {
              "value": "2",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/nextjs_export/",
          "text": "\nNext.jsでbuildした後ホスティングサービスへ配信する際の成果物指定の方法\n\nデフォルトの挙動として、`next build`ではSSRなどサーバ側も含めてビルドした成果物を`.next`に配置する\n\n[Advanced Features: Static HTML Export | Next.js](https://nextjs.org/docs/advanced-features/static-html-export)\n\n静的ファイルのみをホストしたい場合、デフォルトの`.next`を指定しても静的ファイルを配信できる状態ではないので配信できない\n\nしらなかった…\n\n## 静的ファイルだけでOKな場合（SSG）\n\n`next export`で静的ファイルを`out`に置き、`out`ディレクトリをサーブすることでページを閲覧できるようになる\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\nなのでサーバサイドでの処理が不要な場合は公式の通り`next build && next export`で静的ファイルだけを`out`ディレクトリに置き、ホスティングサービスのGit連携で成果物があるディレクトリを指定する\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n今までNext.jsで作成したサイトはVercelでしか配信したことなかったのでVercelがよしなにやってくれていたようだ\n\n今回Cloudflare Pagesで配信する際にこれを知らずにつまずいた",
          "date": "2022-09-11",
          "title": "Next.jsで静的ファイルだけ使えるようにする",
          "tags": ["Next"],
          "description": "SSG",
          "slug": "/entries/nextjs_export/",
          "timeToRead": 1,
          "objectID": "18750b2f-3c40-5983-b91c-17f31646edb6",
          "_snippetResult": {
            "text": {
              "value": "\nNext.jsで__ais-highlight__b__/ais-highlight__uildした後ホスティングサービスへ配信する際の成果物指定の方法\n\nデフォルトの挙動として、`next __ais-highlight__b__/ais-highlight__uild`ではSSRな",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/nextjs_export/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "text": {
              "value": "\nNext.jsで__ais-highlight__b__/ais-highlight__uildした後ホスティングサービスへ配信する際の成果物指定の方法\n\nデフォルトの挙動として、`next __ais-highlight__b__/ais-highlight__uild`ではSSRなどサーバ側も含めてビルドした成果物を`.next`に配置する\n\n[Advanced Features: Static HTML Export | Next.js](https://nextjs.org/docs/advanced-features/static-html-export)\n\n静的ファイルのみをホストしたい場合、デフォルトの`.next`を指定しても静的ファイルを配信できる状態ではないので配信できない\n\nしらなかった…\n\n## 静的ファイルだけでOKな場合（SSG）\n\n`next export`で静的ファイルを`out`に置き、`out`ディレクトリをサーブすることでページを閲覧できるようになる\n\n<!-- textlint-disable ja-technical-writing/sentence-length -->\nなのでサーバサイドでの処理が不要な場合は公式の通り`next __ais-highlight__b__/ais-highlight__uild && next export`で静的ファイルだけを`out`ディレクトリに置き、ホスティングサービスのGit連携で成果物があるディレクトリを指定する\n<!-- textlint-enable ja-technical-writing/sentence-length -->\n\n今までNext.jsで作成したサイトはVercelでしか配信したことなかったのでVercelがよしなにやってくれていたようだ\n\n今回Cloudflare Pagesで配信する際にこれを知らずにつまずいた",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2022-09-11",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "Next.jsで静的ファイルだけ使えるようにする",
              "matchLevel": "none",
              "matchedWords": []
            },
            "tags": [{ "value": "Next", "matchLevel": "none", "matchedWords": [] }],
            "description": {
              "value": "SSG",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/nextjs_export/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "timeToRead": {
              "value": "1",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        },
        {
          "url": "https://til.swfz.io//entries/github_projects_data_from_graphql/",
          "text": "\nGitHubのProjects（Beta）を使って自動化や集計をするなどしたい場合のメモ\n\nAPIの基本的な使い方に関しては下記を参照し、1つずつ実行していけばイメージはつかめる\n\n[APIを使ったプロジェクト（ベータ）の管理 - GitHub Docs](https://docs.github.com/ja/issues/trying-out-the-new-projects-experience/using-the-api-to-manage-projects)\n\n事前にProjectのIDだけ取得しメモしておく\n\n次のクエリ一発でだいたい必要なデータは取れそう\n\n```graphql\nquery ($project_id: ID!) {\n  node(id: $project_id) {\n    ... on ProjectNext {\n      items(first: 100) {\n        nodes {\n          title\n          createdAt\n          fieldValues(first: 8) {\n            nodes {\n              value\n              createdAt\n              projectField {\n                name\n                settings\n              }\n            }\n          }\n          content {\n            ... on Issue {\n              id\n              number\n              url\n              repository {\n                name\n              }\n              milestone {\n                id\n                title\n              }\n              createdAt\n              closed\n              closedAt\n              assignees(first: 5) {\n                nodes {\n                  name\n                }\n              }\n            }\n            ... on PullRequest {\n              id\n              number\n              url\n              assignees(first: 5) {\n                nodes {\n                  name\n                }\n              }\n              repository {\n                name\n              }\n              createdAt\n              closed\n              closedAt\n              merged\n              mergedAt\n              reviewRequests(first: 10) {\n                nodes {\n                  requestedReviewer {\n                    ... on User {\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          id\n          updatedAt\n        }\n      }\n    }\n  }\n}\n```\n\nproject_idは事前にメモしておいた値\n\nどのカラムが必要かなどは下記で`Explorer`を展開して1つずつ見ていけば把握できる\n\n[Explorer - GitHub Docs](https://docs.github.com/ja/graphql/overview/explorer)\n\nExplorerのiframeの範囲が狭くて見づらいのがちょっと不満ではあるがそれ以外は便利に使える\n\nカードに紐づくIssueやPullRequestなどの情報も取ってこれるのでフラットにして集計する前のデータとして使える\n\nとりあえずプロジェクトのデータ使って云々やりたい場合はこのくらいデータが有れば十分かなと感じる\n\n- 結果（一部抜粋）\n\n```json\n{\n  \"data\": {\n    \"node\": {\n      \"items\": {\n        \"nodes\": [\n          {\n            \"title\": \"timerの時刻がブラウザの負荷状況によってずれる\",\n            \"id\": \"PNI_xxxxxxxxxxxxxxxxxxxx\",\n            \"updatedAt\": \"2022-01-19T06:12:59Z\",\n            \"fieldValues\": {\n              \"nodes\": [\n                {\n                  \"value\": \"timerの時刻がブラウザの負荷状況によってずれる\",\n                  \"projectField\": {\n                    \"name\": \"Title\",\n                    \"settings\": \"{\\\"width\\\":319}\"\n                  }\n                },\n                {\n                  \"value\": \"98236657\",\n                  \"projectField\": {\n                    \"name\": \"Status\",\n                    \"settings\": \"{\\\"width\\\":125,\\\"options\\\":[{\\\"id\\\":\\\"xxxxxxx1\\\",\\\"name\\\":\\\"New\\\",\\\"name_html\\\":\\\"New\\\"},{\\\"id\\\":\\\"xxxxxxx2\\\",\\\"name\\\":\\\"Epic\\\",\\\"name_html\\\":\\\"Epic\\\"},{\\\"id\\\":\\\"xxxxxxx3\\\",\\\"name\\\":\\\"Idea\\\",\\\"name_html\\\":\\\"Idea\\\"},{\\\"id\\\":\\\"xxxxxxx4\\\",\\\"name\\\":\\\"Todo\\\",\\\"name_html\\\":\\\"Todo\\\"},{\\\"id\\\":\\\"xxxxxxx5\\\",\\\"name\\\":\\\"In Progress\\\",\\\"name_html\\\":\\\"In Progress\\\"},{\\\"id\\\":\\\"xxxxxxx6\\\",\\\"name\\\":\\\"Review\\\",\\\"name_html\\\":\\\"Review\\\"},{\\\"id\\\":\\\"xxxxxxx7\\\",\\\"name\\\":\\\"Done\\\",\\\"name_html\\\":\\\"Done\\\"}]}\"\n                  }\n                },\n                {\n                  \"value\": \"2\",\n                  \"projectField\": {\n                    \"name\": \"Point\",\n                    \"settings\": \"{\\\"width\\\":69}\"\n                  }\n                },\n                {\n                  \"value\": \"2022-01-01T00:00:00+00:00\",\n                  \"projectField\": {\n                    \"name\": \"Month\",\n                    \"settings\": \"null\"\n                  }\n                },\n                {\n                  \"value\": \"e9bbecfa\",\n                  \"projectField\": {\n                    \"name\": \"Iteration\",\n                    \"settings\": \"{\\\"configuration\\\":{\\\"duration\\\":14,\\\"start_day\\\":1,\\\"iterations\\\":[{\\\"id\\\":\\\"xxxxxxa\\\",\\\"title\\\":\\\"2022-01_2\\\",\\\"duration\\\":14,\\\"start_date\\\":\\\"2022-01-17\\\",\\\"title_html\\\":\\\"2022-01_2\\\"},{\\\"id\\\":\\\"xxxxxxb\\\",\\\"title\\\":\\\"2022-02_1\\\",\\\"duration\\\":14,\\\"start_date\\\":\\\"2022-01-31\\\",\\\"title_html\\\":\\\"2022-02_1\\\"},{\\\"id\\\":\\\"xxxxxxc\\\",\\\"title\\\":\\\"2022-02_2\\\",\\\"duration\\\":14,\\\"start_date\\\":\\\"2022-02-14\\\",\\\"title_html\\\":\\\"2022-02_2\\\"}],\\\"completed_iterations\\\":[{\\\"id\\\":\\\"xxxxxxd\\\",\\\"title\\\":\\\"2022-01_1\\\",\\\"duration\\\":14,\\\"start_date\\\":\\\"2022-01-03\\\",\\\"title_html\\\":\\\"2022-01_1\\\"},{\\\"id\\\":\\\"xxxxxxe\\\",\\\"title\\\":\\\"Iteration 1\\\",\\\"duration\\\":7,\\\"start_date\\\":\\\"2021-12-27\\\",\\\"title_html\\\":\\\"Iteration 1\\\"}]}}\"\n                  }\n                }\n              ]\n            },\n            \"content\": {\n              \"id\": \"I_xxxxxxxxxxxxxxxx\",\n              \"number\": 56,\n              \"url\": \"https://github.com/swfz/tools/issues/56\",\n              \"closed\": true,\n              \"closedAt\": \"2022-01-20T16:27:38Z\",\n              \"createdAt\": \"2022-01-19T06:12:59Z\",\n              \"repository\": {\n                \"name\": \"tools\"\n              },\n              \"milestone\": null,\n              \"assignees\": {\n                \"nodes\": [\n                  {\n                    \"name\": \"swfz\"\n                  }\n                ]\n              }\n            }\n          },\n          .....\n          .....\n          .....\n          .....\n```\n\nまた、実際にこのデータを用いて何かやるなら100件以上のデータが存在することのほうが多いはずなのでページングにも対応したクエリにする必要があるが今回はここまで\n",
          "date": "2022-01-21",
          "title": "GitHub Projects(beta)のデータを収集する",
          "tags": ["GitHub", "GraphQL"],
          "description": "Explorerが便利",
          "slug": "/entries/github_projects_data_from_graphql/",
          "timeToRead": 3,
          "objectID": "4c05ffd1-8ca9-53f5-80d3-ef7e8a28dac6",
          "_snippetResult": {
            "text": {
              "value": "\nGitHubのProjects（__ais-highlight__B__/ais-highlight__eta）を使って自動化や集計をするなどしたい場合のメモ\n\nAPIの基本的な使い方に関しては下記を参照し、1つ",
              "matchLevel": "full"
            }
          },
          "_highlightResult": {
            "url": {
              "value": "https://til.swfz.io//entries/github_projects_data_from_graphql/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "text": {
              "value": "\nGitHubのProjects（__ais-highlight__B__/ais-highlight__eta）を使って自動化や集計をするなどしたい場合のメモ\n\nAPIの基本的な使い方に関しては下記を参照し、1つずつ実行していけばイメージはつかめる\n\n[APIを使ったプロジェクト（ベータ）の管理 - GitHub Docs](https://docs.github.com/ja/issues/trying-out-the-new-projects-experience/using-the-api-to-manage-projects)\n\n事前にProjectのIDだけ取得しメモしておく\n\n次のクエリ一発でだいたい必要なデータは取れそう\n\n```graphql\nquery ($project_id: ID!) {\n  node(id: $project_id) {\n    ... on ProjectNext {\n      items(first: 100) {\n        nodes {\n          title\n          createdAt\n          fieldValues(first: 8) {\n            nodes {\n              value\n              createdAt\n              projectField {\n                name\n                settings\n              }\n            }\n          }\n          content {\n            ... on Issue {\n              id\n              number\n              url\n              repository {\n                name\n              }\n              milestone {\n                id\n                title\n              }\n              createdAt\n              closed\n              closedAt\n              assignees(first: 5) {\n                nodes {\n                  name\n                }\n              }\n            }\n            ... on PullRequest {\n              id\n              number\n              url\n              assignees(first: 5) {\n                nodes {\n                  name\n                }\n              }\n              repository {\n                name\n              }\n              createdAt\n              closed\n              closedAt\n              merged\n              mergedAt\n              reviewRequests(first: 10) {\n                nodes {\n                  requestedReviewer {\n                    ... on User {\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n          id\n          updatedAt\n        }\n      }\n    }\n  }\n}\n```\n\nproject_idは事前にメモしておいた値\n\nどのカラムが必要かなどは下記で`Explorer`を展開して1つずつ見ていけば把握できる\n\n[Explorer - GitHub Docs](https://docs.github.com/ja/graphql/overview/explorer)\n\nExplorerのiframeの範囲が狭くて見づらいのがちょっと不満ではあるがそれ以外は便利に使える\n\nカードに紐づくIssueやPullRequestなどの情報も取ってこれるのでフラットにして集計する前のデータとして使える\n\nとりあえずプロジェクトのデータ使って云々やりたい場合はこのくらいデータが有れば十分かなと感じる\n\n- 結果（一部抜粋）\n\n```json\n{\n  \"data\": {\n    \"node\": {\n      \"items\": {\n        \"nodes\": [\n          {\n            \"title\": \"timerの時刻がブラウザの負荷状況によってずれる\",\n            \"id\": \"PNI_xxxxxxxxxxxxxxxxxxxx\",\n            \"updatedAt\": \"2022-01-19T06:12:59Z\",\n            \"fieldValues\": {\n              \"nodes\": [\n                {\n                  \"value\": \"timerの時刻がブラウザの負荷状況によってずれる\",\n                  \"projectField\": {\n                    \"name\": \"Title\",\n                    \"settings\": \"{\\\"width\\\":319}\"\n                  }\n                },\n                {\n                  \"value\": \"98236657\",\n                  \"projectField\": {\n                    \"name\": \"Status\",\n                    \"settings\": \"{\\\"width\\\":125,\\\"options\\\":[{\\\"id\\\":\\\"xxxxxxx1\\\",\\\"name\\\":\\\"New\\\",\\\"name_html\\\":\\\"New\\\"},{\\\"id\\\":\\\"xxxxxxx2\\\",\\\"name\\\":\\\"Epic\\\",\\\"name_html\\\":\\\"Epic\\\"},{\\\"id\\\":\\\"xxxxxxx3\\\",\\\"name\\\":\\\"Idea\\\",\\\"name_html\\\":\\\"Idea\\\"},{\\\"id\\\":\\\"xxxxxxx4\\\",\\\"name\\\":\\\"Todo\\\",\\\"name_html\\\":\\\"Todo\\\"},{\\\"id\\\":\\\"xxxxxxx5\\\",\\\"name\\\":\\\"In Progress\\\",\\\"name_html\\\":\\\"In Progress\\\"},{\\\"id\\\":\\\"xxxxxxx6\\\",\\\"name\\\":\\\"Review\\\",\\\"name_html\\\":\\\"Review\\\"},{\\\"id\\\":\\\"xxxxxxx7\\\",\\\"name\\\":\\\"Done\\\",\\\"name_html\\\":\\\"Done\\\"}]}\"\n                  }\n                },\n                {\n                  \"value\": \"2\",\n                  \"projectField\": {\n                    \"name\": \"Point\",\n                    \"settings\": \"{\\\"width\\\":69}\"\n                  }\n                },\n                {\n                  \"value\": \"2022-01-01T00:00:00+00:00\",\n                  \"projectField\": {\n                    \"name\": \"Month\",\n                    \"settings\": \"null\"\n                  }\n                },\n                {\n                  \"value\": \"e9bbecfa\",\n                  \"projectField\": {\n                    \"name\": \"Iteration\",\n                    \"settings\": \"{\\\"configuration\\\":{\\\"duration\\\":14,\\\"start_day\\\":1,\\\"iterations\\\":[{\\\"id\\\":\\\"xxxxxxa\\\",\\\"title\\\":\\\"2022-01_2\\\",\\\"duration\\\":14,\\\"start_date\\\":\\\"2022-01-17\\\",\\\"title_html\\\":\\\"2022-01_2\\\"},{\\\"id\\\":\\\"xxxxxxb\\\",\\\"title\\\":\\\"2022-02_1\\\",\\\"duration\\\":14,\\\"start_date\\\":\\\"2022-01-31\\\",\\\"title_html\\\":\\\"2022-02_1\\\"},{\\\"id\\\":\\\"xxxxxxc\\\",\\\"title\\\":\\\"2022-02_2\\\",\\\"duration\\\":14,\\\"start_date\\\":\\\"2022-02-14\\\",\\\"title_html\\\":\\\"2022-02_2\\\"}],\\\"completed_iterations\\\":[{\\\"id\\\":\\\"xxxxxxd\\\",\\\"title\\\":\\\"2022-01_1\\\",\\\"duration\\\":14,\\\"start_date\\\":\\\"2022-01-03\\\",\\\"title_html\\\":\\\"2022-01_1\\\"},{\\\"id\\\":\\\"xxxxxxe\\\",\\\"title\\\":\\\"Iteration 1\\\",\\\"duration\\\":7,\\\"start_date\\\":\\\"2021-12-27\\\",\\\"title_html\\\":\\\"Iteration 1\\\"}]}}\"\n                  }\n                }\n              ]\n            },\n            \"content\": {\n              \"id\": \"I_xxxxxxxxxxxxxxxx\",\n              \"number\": 56,\n              \"url\": \"https://github.com/swfz/tools/issues/56\",\n              \"closed\": true,\n              \"closedAt\": \"2022-01-20T16:27:38Z\",\n              \"createdAt\": \"2022-01-19T06:12:59Z\",\n              \"repository\": {\n                \"name\": \"tools\"\n              },\n              \"milestone\": null,\n              \"assignees\": {\n                \"nodes\": [\n                  {\n                    \"name\": \"swfz\"\n                  }\n                ]\n              }\n            }\n          },\n          .....\n          .....\n          .....\n          .....\n```\n\nまた、実際にこのデータを用いて何かやるなら100件以上のデータが存在することのほうが多いはずなのでページングにも対応したクエリにする必要があるが今回はここまで\n",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "date": {
              "value": "2022-01-21",
              "matchLevel": "none",
              "matchedWords": []
            },
            "title": {
              "value": "GitHub Projects(__ais-highlight__b__/ais-highlight__eta)のデータを収集する",
              "matchLevel": "full",
              "fullyHighlighted": false,
              "matchedWords": ["b"]
            },
            "tags": [
              { "value": "GitHub", "matchLevel": "none", "matchedWords": [] },
              { "value": "GraphQL", "matchLevel": "none", "matchedWords": [] }
            ],
            "description": {
              "value": "Explorerが便利",
              "matchLevel": "none",
              "matchedWords": []
            },
            "slug": {
              "value": "/entries/github_projects_data_from_graphql/",
              "matchLevel": "none",
              "matchedWords": []
            },
            "timeToRead": {
              "value": "3",
              "matchLevel": "none",
              "matchedWords": []
            }
          }
        }
      ],
      "nbHits": 108,
      "page": 0,
      "nbPages": 6,
      "hitsPerPage": 20,
      "exhaustiveNbHits": true,
      "exhaustiveTypo": true,
      "exhaustive": { "nbHits": true, "typo": true },
      "query": "B",
      "params": "facets=%5B%5D&highlightPostTag=__%2Fais-highlight__&highlightPreTag=__ais-highlight__&query=B&tagFilters=",
      "index": "til",
      "renderingContent": {},
      "processingTimeMS": 12,
      "processingTimingsMS": {
        "afterFetch": {
          "format": { "highlighting": 4, "snippeting": 6, "total": 11 },
          "total": 12
        },
        "total": 12
      }
    }
  ]
}
